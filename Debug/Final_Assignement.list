
Final_Assignement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008778  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08008908  08008908  00018908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a10  08008a10  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008a10  08008a10  00018a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a18  08008a18  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a18  08008a18  00018a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a1c  08008a1c  00018a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004a6c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004a7c  20004a7c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a5ae  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003751  00000000  00000000  0003a631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001760  00000000  00000000  0003dd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001259  00000000  00000000  0003f4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003581  00000000  00000000  00040741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a51a  00000000  00000000  00043cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d78b0  00000000  00000000  0005e1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000063d4  00000000  00000000  00135a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0013be60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080088f0 	.word	0x080088f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080088f0 	.word	0x080088f0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E

void lcd_send_cmd (char cmd)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	f023 030f 	bic.w	r3, r3, #15
 80004dc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	011b      	lsls	r3, r3, #4
 80004e2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 80004e4:	7bfb      	ldrb	r3, [r7, #15]
 80004e6:	f043 030c 	orr.w	r3, r3, #12
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 80004ee:	7bfb      	ldrb	r3, [r7, #15]
 80004f0:	f043 0308 	orr.w	r3, r3, #8
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 80004f8:	7bbb      	ldrb	r3, [r7, #14]
 80004fa:	f043 030c 	orr.w	r3, r3, #12
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8000502:	7bbb      	ldrb	r3, [r7, #14]
 8000504:	f043 0308 	orr.w	r3, r3, #8
 8000508:	b2db      	uxtb	r3, r3
 800050a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800050c:	f107 0208 	add.w	r2, r7, #8
 8000510:	2364      	movs	r3, #100	; 0x64
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	2304      	movs	r3, #4
 8000516:	214e      	movs	r1, #78	; 0x4e
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <lcd_send_cmd+0x5c>)
 800051a:	f001 faad 	bl	8001a78 <HAL_I2C_Master_Transmit>
}
 800051e:	bf00      	nop
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	2000002c 	.word	0x2000002c

0800052c <lcd_send_data>:

void lcd_send_data (char *data)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af02      	add	r7, sp, #8
 8000532:	6078      	str	r0, [r7, #4]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (*data&0xf0);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	f023 030f 	bic.w	r3, r3, #15
 800053c:	73fb      	strb	r3, [r7, #15]
	data_l = ((*data<<4)&0xf0);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	011b      	lsls	r3, r3, #4
 8000544:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000546:	7bfb      	ldrb	r3, [r7, #15]
 8000548:	f043 030d 	orr.w	r3, r3, #13
 800054c:	b2db      	uxtb	r3, r3
 800054e:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	f043 0309 	orr.w	r3, r3, #9
 8000556:	b2db      	uxtb	r3, r3
 8000558:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 800055a:	7bbb      	ldrb	r3, [r7, #14]
 800055c:	f043 030d 	orr.w	r3, r3, #13
 8000560:	b2db      	uxtb	r3, r3
 8000562:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 8000564:	7bbb      	ldrb	r3, [r7, #14]
 8000566:	f043 0309 	orr.w	r3, r3, #9
 800056a:	b2db      	uxtb	r3, r3
 800056c:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800056e:	f107 0208 	add.w	r2, r7, #8
 8000572:	2364      	movs	r3, #100	; 0x64
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2304      	movs	r3, #4
 8000578:	214e      	movs	r1, #78	; 0x4e
 800057a:	4803      	ldr	r0, [pc, #12]	; (8000588 <lcd_send_data+0x5c>)
 800057c:	f001 fa7c 	bl	8001a78 <HAL_I2C_Master_Transmit>
}
 8000580:	bf00      	nop
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	2000002c 	.word	0x2000002c

0800058c <lcd_clear>:

void lcd_clear (void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000592:	2080      	movs	r0, #128	; 0x80
 8000594:	f7ff ff9a 	bl	80004cc <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	e005      	b.n	80005aa <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800059e:	2020      	movs	r0, #32
 80005a0:	f7ff ffc4 	bl	800052c <lcd_send_data>
	for (int i=0; i<70; i++)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3301      	adds	r3, #1
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2b45      	cmp	r3, #69	; 0x45
 80005ae:	ddf6      	ble.n	800059e <lcd_clear+0x12>
	}
}
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b082      	sub	sp, #8
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
 80005c2:	6039      	str	r1, [r7, #0]
    switch (row)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d003      	beq.n	80005d2 <lcd_put_cur+0x18>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d005      	beq.n	80005dc <lcd_put_cur+0x22>
 80005d0:	e009      	b.n	80005e6 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d8:	603b      	str	r3, [r7, #0]
            break;
 80005da:	e004      	b.n	80005e6 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80005e2:	603b      	str	r3, [r7, #0]
            break;
 80005e4:	bf00      	nop
    }

    lcd_send_cmd (col);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff ff6e 	bl	80004cc <lcd_send_cmd>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <lcd_init>:


void lcd_init (void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80005fc:	2032      	movs	r0, #50	; 0x32
 80005fe:	f000 fd53 	bl	80010a8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000602:	2030      	movs	r0, #48	; 0x30
 8000604:	f7ff ff62 	bl	80004cc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000608:	2005      	movs	r0, #5
 800060a:	f000 fd4d 	bl	80010a8 <HAL_Delay>
	lcd_send_cmd (0x30);
 800060e:	2030      	movs	r0, #48	; 0x30
 8000610:	f7ff ff5c 	bl	80004cc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000614:	2001      	movs	r0, #1
 8000616:	f000 fd47 	bl	80010a8 <HAL_Delay>
	lcd_send_cmd (0x30);
 800061a:	2030      	movs	r0, #48	; 0x30
 800061c:	f7ff ff56 	bl	80004cc <lcd_send_cmd>
	HAL_Delay(10);
 8000620:	200a      	movs	r0, #10
 8000622:	f000 fd41 	bl	80010a8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000626:	2020      	movs	r0, #32
 8000628:	f7ff ff50 	bl	80004cc <lcd_send_cmd>
	HAL_Delay(10);
 800062c:	200a      	movs	r0, #10
 800062e:	f000 fd3b 	bl	80010a8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000632:	2028      	movs	r0, #40	; 0x28
 8000634:	f7ff ff4a 	bl	80004cc <lcd_send_cmd>
	HAL_Delay(1);
 8000638:	2001      	movs	r0, #1
 800063a:	f000 fd35 	bl	80010a8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800063e:	2008      	movs	r0, #8
 8000640:	f7ff ff44 	bl	80004cc <lcd_send_cmd>
	HAL_Delay(1);
 8000644:	2001      	movs	r0, #1
 8000646:	f000 fd2f 	bl	80010a8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800064a:	2001      	movs	r0, #1
 800064c:	f7ff ff3e 	bl	80004cc <lcd_send_cmd>
	HAL_Delay(1);
 8000650:	2001      	movs	r0, #1
 8000652:	f000 fd29 	bl	80010a8 <HAL_Delay>
	HAL_Delay(1);
 8000656:	2001      	movs	r0, #1
 8000658:	f000 fd26 	bl	80010a8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800065c:	2006      	movs	r0, #6
 800065e:	f7ff ff35 	bl	80004cc <lcd_send_cmd>
	HAL_Delay(1);
 8000662:	2001      	movs	r0, #1
 8000664:	f000 fd20 	bl	80010a8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000668:	200c      	movs	r0, #12
 800066a:	f7ff ff2f 	bl	80004cc <lcd_send_cmd>
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}

08000672 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	b082      	sub	sp, #8
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800067a:	e006      	b.n	800068a <lcd_send_string+0x18>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	1c5a      	adds	r2, r3, #1
 8000680:	607a      	str	r2, [r7, #4]
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ff51 	bl	800052c <lcd_send_data>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1f4      	bne.n	800067c <lcd_send_string+0xa>
}
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a0:	f000 fcc0 	bl	8001024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a4:	f000 f856 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a8:	f000 f90a 	bl	80008c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006ac:	f000 f8b0 	bl	8000810 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80006b0:	f000 f8dc 	bl	800086c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80006b4:	f7ff ffa0 	bl	80005f8 <lcd_init>
  lcd_clear();
 80006b8:	f7ff ff68 	bl	800058c <lcd_clear>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006bc:	f004 ff84 	bl	80055c8 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  Mutex = xSemaphoreCreateMutex();
 80006c0:	2001      	movs	r0, #1
 80006c2:	f005 fb76 	bl	8005db2 <xQueueCreateMutex>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4a16      	ldr	r2, [pc, #88]	; (8000724 <main+0x88>)
 80006ca:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of butttonstatus */
  butttonstatusHandle = osTimerNew(checkbutton, osTimerPeriodic, NULL, &butttonstatus_attributes);
 80006cc:	4b16      	ldr	r3, [pc, #88]	; (8000728 <main+0x8c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	2101      	movs	r1, #1
 80006d2:	4816      	ldr	r0, [pc, #88]	; (800072c <main+0x90>)
 80006d4:	f005 f884 	bl	80057e0 <osTimerNew>
 80006d8:	4603      	mov	r3, r0
 80006da:	4a15      	ldr	r2, [pc, #84]	; (8000730 <main+0x94>)
 80006dc:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  xButtonQueue = xQueueCreate(5, sizeof(Sw_state));
 80006de:	2200      	movs	r2, #0
 80006e0:	2102      	movs	r1, #2
 80006e2:	2005      	movs	r0, #5
 80006e4:	f005 faee 	bl	8005cc4 <xQueueGenericCreate>
 80006e8:	4603      	mov	r3, r0
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <main+0x98>)
 80006ec:	6013      	str	r3, [r2, #0]
  xLedState    = xQueueCreate(1, sizeof(Led_state));
 80006ee:	2200      	movs	r2, #0
 80006f0:	2102      	movs	r1, #2
 80006f2:	2001      	movs	r0, #1
 80006f4:	f005 fae6 	bl	8005cc4 <xQueueGenericCreate>
 80006f8:	4603      	mov	r3, r0
 80006fa:	4a0f      	ldr	r2, [pc, #60]	; (8000738 <main+0x9c>)
 80006fc:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ledblink */
  ledblinkHandle = osThreadNew(BlinkLed, NULL, &ledblink_attributes);
 80006fe:	4a0f      	ldr	r2, [pc, #60]	; (800073c <main+0xa0>)
 8000700:	2100      	movs	r1, #0
 8000702:	480f      	ldr	r0, [pc, #60]	; (8000740 <main+0xa4>)
 8000704:	f004 ffaa 	bl	800565c <osThreadNew>
 8000708:	4603      	mov	r3, r0
 800070a:	4a0e      	ldr	r2, [pc, #56]	; (8000744 <main+0xa8>)
 800070c:	6013      	str	r3, [r2, #0]

  /* creation of lcd_gloq */
  lcd_gloqHandle = osThreadNew(lcd_send, NULL, &lcd_gloq_attributes);
 800070e:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <main+0xac>)
 8000710:	2100      	movs	r1, #0
 8000712:	480e      	ldr	r0, [pc, #56]	; (800074c <main+0xb0>)
 8000714:	f004 ffa2 	bl	800565c <osThreadNew>
 8000718:	4603      	mov	r3, r0
 800071a:	4a0d      	ldr	r2, [pc, #52]	; (8000750 <main+0xb4>)
 800071c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800071e:	f004 ff77 	bl	8005610 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000722:	e7fe      	b.n	8000722 <main+0x86>
 8000724:	200000d4 	.word	0x200000d4
 8000728:	080089e8 	.word	0x080089e8
 800072c:	08000c21 	.word	0x08000c21
 8000730:	200000d0 	.word	0x200000d0
 8000734:	200000d8 	.word	0x200000d8
 8000738:	200000dc 	.word	0x200000dc
 800073c:	080089a0 	.word	0x080089a0
 8000740:	0800099d 	.word	0x0800099d
 8000744:	200000c8 	.word	0x200000c8
 8000748:	080089c4 	.word	0x080089c4
 800074c:	08000b09 	.word	0x08000b09
 8000750:	200000cc 	.word	0x200000cc

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b094      	sub	sp, #80	; 0x50
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	2230      	movs	r2, #48	; 0x30
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f008 f88a 	bl	800887c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	4b22      	ldr	r3, [pc, #136]	; (8000808 <SystemClock_Config+0xb4>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	4a21      	ldr	r2, [pc, #132]	; (8000808 <SystemClock_Config+0xb4>)
 8000782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000786:	6413      	str	r3, [r2, #64]	; 0x40
 8000788:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <SystemClock_Config+0xb4>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000794:	2300      	movs	r3, #0
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	4b1c      	ldr	r3, [pc, #112]	; (800080c <SystemClock_Config+0xb8>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a1b      	ldr	r2, [pc, #108]	; (800080c <SystemClock_Config+0xb8>)
 800079e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <SystemClock_Config+0xb8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b0:	2302      	movs	r3, #2
 80007b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b4:	2301      	movs	r3, #1
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b8:	2310      	movs	r3, #16
 80007ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007bc:	2300      	movs	r3, #0
 80007be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c0:	f107 0320 	add.w	r3, r7, #32
 80007c4:	4618      	mov	r0, r3
 80007c6:	f003 f871 	bl	80038ac <HAL_RCC_OscConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007d0:	f000 fa74 	bl	8000cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d4:	230f      	movs	r3, #15
 80007d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f003 fad4 	bl	8003d9c <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007fa:	f000 fa5f 	bl	8000cbc <Error_Handler>
  }
}
 80007fe:	bf00      	nop
 8000800:	3750      	adds	r7, #80	; 0x50
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800
 800080c:	40007000 	.word	0x40007000

08000810 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_I2C1_Init+0x50>)
 8000816:	4a13      	ldr	r2, [pc, #76]	; (8000864 <MX_I2C1_Init+0x54>)
 8000818:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_I2C1_Init+0x50>)
 800081c:	4a12      	ldr	r2, [pc, #72]	; (8000868 <MX_I2C1_Init+0x58>)
 800081e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_I2C1_Init+0x50>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_I2C1_Init+0x50>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_I2C1_Init+0x50>)
 800082e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000832:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <MX_I2C1_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_I2C1_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <MX_I2C1_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_I2C1_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_I2C1_Init+0x50>)
 800084e:	f000 ffb9 	bl	80017c4 <HAL_I2C_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000858:	f000 fa30 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	2000002c 	.word	0x2000002c
 8000864:	40005400 	.word	0x40005400
 8000868:	000186a0 	.word	0x000186a0

0800086c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000872:	4a12      	ldr	r2, [pc, #72]	; (80008bc <MX_USART2_UART_Init+0x50>)
 8000874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 80008a4:	f003 ff2e 	bl	8004704 <HAL_UART_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ae:	f000 fa05 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000080 	.word	0x20000080
 80008bc:	40004400 	.word	0x40004400

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b2d      	ldr	r3, [pc, #180]	; (8000990 <MX_GPIO_Init+0xd0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a2c      	ldr	r2, [pc, #176]	; (8000990 <MX_GPIO_Init+0xd0>)
 80008e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b2a      	ldr	r3, [pc, #168]	; (8000990 <MX_GPIO_Init+0xd0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b26      	ldr	r3, [pc, #152]	; (8000990 <MX_GPIO_Init+0xd0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a25      	ldr	r2, [pc, #148]	; (8000990 <MX_GPIO_Init+0xd0>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b23      	ldr	r3, [pc, #140]	; (8000990 <MX_GPIO_Init+0xd0>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <MX_GPIO_Init+0xd0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a1e      	ldr	r2, [pc, #120]	; (8000990 <MX_GPIO_Init+0xd0>)
 8000918:	f043 0308 	orr.w	r3, r3, #8
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <MX_GPIO_Init+0xd0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0308 	and.w	r3, r3, #8
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_GPIO_Init+0xd0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a17      	ldr	r2, [pc, #92]	; (8000990 <MX_GPIO_Init+0xd0>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_GPIO_Init+0xd0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800094c:	4811      	ldr	r0, [pc, #68]	; (8000994 <MX_GPIO_Init+0xd4>)
 800094e:	f000 ff05 	bl	800175c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000952:	2303      	movs	r3, #3
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	480c      	ldr	r0, [pc, #48]	; (8000998 <MX_GPIO_Init+0xd8>)
 8000966:	f000 fd45 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800096a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800096e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	4804      	ldr	r0, [pc, #16]	; (8000994 <MX_GPIO_Init+0xd4>)
 8000984:	f000 fd36 	bl	80013f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000988:	bf00      	nop
 800098a:	3728      	adds	r7, #40	; 0x28
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800
 8000994:	40020c00 	.word	0x40020c00
 8000998:	40020000 	.word	0x40020000

0800099c <BlinkLed>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_BlinkLed */
void BlinkLed(void *argument)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osTimerStart(butttonstatusHandle, 100);
 80009a4:	4b53      	ldr	r3, [pc, #332]	; (8000af4 <BlinkLed+0x158>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2164      	movs	r1, #100	; 0x64
 80009aa:	4618      	mov	r0, r3
 80009ac:	f004 ff94 	bl	80058d8 <osTimerStart>
	Led_state ledstate;

  /* Infinite loop */
  for(;;)
  {
      if (xQueueReceive(xButtonQueue, &switchstate, portMAX_DELAY) == pdPASS)
 80009b0:	4b51      	ldr	r3, [pc, #324]	; (8000af8 <BlinkLed+0x15c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f107 010c 	add.w	r1, r7, #12
 80009b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009bc:	4618      	mov	r0, r3
 80009be:	f005 fbab 	bl	8006118 <xQueueReceive>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	f040 808c 	bne.w	8000ae2 <BlinkLed+0x146>
      {
          xSemaphoreTake(Mutex, portMAX_DELAY);
 80009ca:	4b4c      	ldr	r3, [pc, #304]	; (8000afc <BlinkLed+0x160>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009d2:	4618      	mov	r0, r3
 80009d4:	f005 fc80 	bl	80062d8 <xQueueSemaphoreTake>

          	  if(switchstate.Sw1_State == 1 && switchstate.Sw2_State==0 ){
 80009d8:	7b3b      	ldrb	r3, [r7, #12]
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d016      	beq.n	8000a0e <BlinkLed+0x72>
 80009e0:	7b7b      	ldrb	r3, [r7, #13]
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	f083 0301 	eor.w	r3, r3, #1
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d00f      	beq.n	8000a0e <BlinkLed+0x72>
          		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f4:	4842      	ldr	r0, [pc, #264]	; (8000b00 <BlinkLed+0x164>)
 80009f6:	f000 feb1 	bl	800175c <HAL_GPIO_WritePin>
          		  ledstate.Led1_State = 1;
 80009fa:	2301      	movs	r3, #1
 80009fc:	723b      	strb	r3, [r7, #8]
          		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a04:	483e      	ldr	r0, [pc, #248]	; (8000b00 <BlinkLed+0x164>)
 8000a06:	f000 fea9 	bl	800175c <HAL_GPIO_WritePin>
          		ledstate.Led2_State = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	727b      	strb	r3, [r7, #9]


          	  }
          	  if(switchstate.Sw2_State ==1  && switchstate.Sw1_State==0){
 8000a0e:	7b7b      	ldrb	r3, [r7, #13]
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d016      	beq.n	8000a44 <BlinkLed+0xa8>
 8000a16:	7b3b      	ldrb	r3, [r7, #12]
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	f083 0301 	eor.w	r3, r3, #1
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d00f      	beq.n	8000a44 <BlinkLed+0xa8>
          		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a2a:	4835      	ldr	r0, [pc, #212]	; (8000b00 <BlinkLed+0x164>)
 8000a2c:	f000 fe96 	bl	800175c <HAL_GPIO_WritePin>
          		ledstate.Led1_State = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	723b      	strb	r3, [r7, #8]
          		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000a34:	2201      	movs	r2, #1
 8000a36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a3a:	4831      	ldr	r0, [pc, #196]	; (8000b00 <BlinkLed+0x164>)
 8000a3c:	f000 fe8e 	bl	800175c <HAL_GPIO_WritePin>
          		ledstate.Led2_State = 1;
 8000a40:	2301      	movs	r3, #1
 8000a42:	727b      	strb	r3, [r7, #9]

          	  }
          	  if(switchstate.Sw2_State && switchstate.Sw1_State)
 8000a44:	7b7b      	ldrb	r3, [r7, #13]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d009      	beq.n	8000a60 <BlinkLed+0xc4>
 8000a4c:	7b3b      	ldrb	r3, [r7, #12]
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d005      	beq.n	8000a60 <BlinkLed+0xc4>
          	  {
          		ledstate.Led1_State = ledstate.Led1_State;
 8000a54:	7a3b      	ldrb	r3, [r7, #8]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	723b      	strb	r3, [r7, #8]
          		ledstate.Led2_State = ledstate.Led2_State;
 8000a5a:	7a7b      	ldrb	r3, [r7, #9]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	727b      	strb	r3, [r7, #9]
          	  }
          	  if(switchstate.Sw2_State==0  && switchstate.Sw1_State==0){
 8000a60:	7b7b      	ldrb	r3, [r7, #13]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	f083 0301 	eor.w	r3, r3, #1
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d032      	beq.n	8000ad4 <BlinkLed+0x138>
 8000a6e:	7b3b      	ldrb	r3, [r7, #12]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	f083 0301 	eor.w	r3, r3, #1
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d02b      	beq.n	8000ad4 <BlinkLed+0x138>

          		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000a7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a80:	481f      	ldr	r0, [pc, #124]	; (8000b00 <BlinkLed+0x164>)
 8000a82:	f000 fe84 	bl	800178e <HAL_GPIO_TogglePin>
          		  ledstate.Led1_State = !ledstate.Led1_State;
 8000a86:	7a3b      	ldrb	r3, [r7, #8]
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	bf14      	ite	ne
 8000a8e:	2301      	movne	r3, #1
 8000a90:	2300      	moveq	r3, #0
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	f083 0301 	eor.w	r3, r3, #1
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	723b      	strb	r3, [r7, #8]
          		  osDelay(30);
 8000aa2:	201e      	movs	r0, #30
 8000aa4:	f004 fe6c 	bl	8005780 <osDelay>
          		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000aa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aac:	4814      	ldr	r0, [pc, #80]	; (8000b00 <BlinkLed+0x164>)
 8000aae:	f000 fe6e 	bl	800178e <HAL_GPIO_TogglePin>
          		 ledstate.Led2_State = !ledstate.Led2_State;
 8000ab2:	7a7b      	ldrb	r3, [r7, #9]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	bf14      	ite	ne
 8000aba:	2301      	movne	r3, #1
 8000abc:	2300      	moveq	r3, #0
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	f083 0301 	eor.w	r3, r3, #1
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	727b      	strb	r3, [r7, #9]
          		  osDelay(30);
 8000ace:	201e      	movs	r0, #30
 8000ad0:	f004 fe56 	bl	8005780 <osDelay>
          	  }




          xSemaphoreGive(Mutex);
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <BlinkLed+0x160>)
 8000ad6:	6818      	ldr	r0, [r3, #0]
 8000ad8:	2300      	movs	r3, #0
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	f005 f981 	bl	8005de4 <xQueueGenericSend>
      }

    	  xQueueSend(xLedState, &ledstate, 1);
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <BlinkLed+0x168>)
 8000ae4:	6818      	ldr	r0, [r3, #0]
 8000ae6:	f107 0108 	add.w	r1, r7, #8
 8000aea:	2300      	movs	r3, #0
 8000aec:	2201      	movs	r2, #1
 8000aee:	f005 f979 	bl	8005de4 <xQueueGenericSend>
      if (xQueueReceive(xButtonQueue, &switchstate, portMAX_DELAY) == pdPASS)
 8000af2:	e75d      	b.n	80009b0 <BlinkLed+0x14>
 8000af4:	200000d0 	.word	0x200000d0
 8000af8:	200000d8 	.word	0x200000d8
 8000afc:	200000d4 	.word	0x200000d4
 8000b00:	40020c00 	.word	0x40020c00
 8000b04:	200000dc 	.word	0x200000dc

08000b08 <lcd_send>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_lcd_send */
void lcd_send(void *argument)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)

  {

	if (xQueueReceive(xButtonQueue, &switchstate, portMAX_DELAY) == pdPASS){
 8000b10:	4b38      	ldr	r3, [pc, #224]	; (8000bf4 <lcd_send+0xec>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f107 010c 	add.w	r1, r7, #12
 8000b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f005 fafb 	bl	8006118 <xQueueReceive>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d12b      	bne.n	8000b80 <lcd_send+0x78>

		//transmit data to lcd
		xSemaphoreTake(Mutex, portMAX_DELAY);
 8000b28:	4b33      	ldr	r3, [pc, #204]	; (8000bf8 <lcd_send+0xf0>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b30:	4618      	mov	r0, r3
 8000b32:	f005 fbd1 	bl	80062d8 <xQueueSemaphoreTake>
		// transmit
	    lcd_put_cur(0, 10);
 8000b36:	210a      	movs	r1, #10
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f7ff fd3e 	bl	80005ba <lcd_put_cur>
	    if (switchstate.Sw1_State) {
 8000b3e:	7b3b      	ldrb	r3, [r7, #12]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d003      	beq.n	8000b4e <lcd_send+0x46>
	        lcd_send_string("SW1: ON");
 8000b46:	482d      	ldr	r0, [pc, #180]	; (8000bfc <lcd_send+0xf4>)
 8000b48:	f7ff fd93 	bl	8000672 <lcd_send_string>
 8000b4c:	e002      	b.n	8000b54 <lcd_send+0x4c>
	    } else {
	        lcd_send_string("SW1: OFF");
 8000b4e:	482c      	ldr	r0, [pc, #176]	; (8000c00 <lcd_send+0xf8>)
 8000b50:	f7ff fd8f 	bl	8000672 <lcd_send_string>
	    }

	    // Display button switch2 state
	    lcd_put_cur(1, 10); // Set cursor to second row, column 10
 8000b54:	210a      	movs	r1, #10
 8000b56:	2001      	movs	r0, #1
 8000b58:	f7ff fd2f 	bl	80005ba <lcd_put_cur>
	    if (switchstate.Sw2_State) {
 8000b5c:	7b7b      	ldrb	r3, [r7, #13]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d003      	beq.n	8000b6c <lcd_send+0x64>
	        lcd_send_string("SW2: ON");
 8000b64:	4827      	ldr	r0, [pc, #156]	; (8000c04 <lcd_send+0xfc>)
 8000b66:	f7ff fd84 	bl	8000672 <lcd_send_string>
 8000b6a:	e002      	b.n	8000b72 <lcd_send+0x6a>
	    } else {
	        lcd_send_string("SW2: OFF");
 8000b6c:	4826      	ldr	r0, [pc, #152]	; (8000c08 <lcd_send+0x100>)
 8000b6e:	f7ff fd80 	bl	8000672 <lcd_send_string>
	    }


        xSemaphoreGive(Mutex);
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <lcd_send+0xf0>)
 8000b74:	6818      	ldr	r0, [r3, #0]
 8000b76:	2300      	movs	r3, #0
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	f005 f932 	bl	8005de4 <xQueueGenericSend>

	}

	if (xQueueReceive(xLedState, &ledstate, portMAX_DELAY) == pdPASS){
 8000b80:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <lcd_send+0x104>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f107 0108 	add.w	r1, r7, #8
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f005 fac3 	bl	8006118 <xQueueReceive>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d1bb      	bne.n	8000b10 <lcd_send+0x8>

		//transmit data to lcd
		xSemaphoreTake(Mutex, portMAX_DELAY);
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <lcd_send+0xf0>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f005 fb99 	bl	80062d8 <xQueueSemaphoreTake>
		// transmit
	    lcd_put_cur(0, 0);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f7ff fd06 	bl	80005ba <lcd_put_cur>
	    if (ledstate.Led1_State) {
 8000bae:	7a3b      	ldrb	r3, [r7, #8]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d003      	beq.n	8000bbe <lcd_send+0xb6>
	        lcd_send_string("LED1: ON");
 8000bb6:	4816      	ldr	r0, [pc, #88]	; (8000c10 <lcd_send+0x108>)
 8000bb8:	f7ff fd5b 	bl	8000672 <lcd_send_string>
 8000bbc:	e002      	b.n	8000bc4 <lcd_send+0xbc>
	    } else {
	        lcd_send_string("LED1: OFF");
 8000bbe:	4815      	ldr	r0, [pc, #84]	; (8000c14 <lcd_send+0x10c>)
 8000bc0:	f7ff fd57 	bl	8000672 <lcd_send_string>
	    }
	    lcd_put_cur(1, 0); // Set cursor to the second row, first column
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f7ff fcf7 	bl	80005ba <lcd_put_cur>
	    if (ledstate.Led2_State) {
 8000bcc:	7a7b      	ldrb	r3, [r7, #9]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d003      	beq.n	8000bdc <lcd_send+0xd4>
	        lcd_send_string("LED2: ON");
 8000bd4:	4810      	ldr	r0, [pc, #64]	; (8000c18 <lcd_send+0x110>)
 8000bd6:	f7ff fd4c 	bl	8000672 <lcd_send_string>
 8000bda:	e002      	b.n	8000be2 <lcd_send+0xda>
	    } else {
	        lcd_send_string("LED2: OFF");
 8000bdc:	480f      	ldr	r0, [pc, #60]	; (8000c1c <lcd_send+0x114>)
 8000bde:	f7ff fd48 	bl	8000672 <lcd_send_string>
	    }

        xSemaphoreGive(Mutex);
 8000be2:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <lcd_send+0xf0>)
 8000be4:	6818      	ldr	r0, [r3, #0]
 8000be6:	2300      	movs	r3, #0
 8000be8:	2200      	movs	r2, #0
 8000bea:	2100      	movs	r1, #0
 8000bec:	f005 f8fa 	bl	8005de4 <xQueueGenericSend>
	if (xQueueReceive(xButtonQueue, &switchstate, portMAX_DELAY) == pdPASS){
 8000bf0:	e78e      	b.n	8000b10 <lcd_send+0x8>
 8000bf2:	bf00      	nop
 8000bf4:	200000d8 	.word	0x200000d8
 8000bf8:	200000d4 	.word	0x200000d4
 8000bfc:	08008930 	.word	0x08008930
 8000c00:	08008938 	.word	0x08008938
 8000c04:	08008944 	.word	0x08008944
 8000c08:	0800894c 	.word	0x0800894c
 8000c0c:	200000dc 	.word	0x200000dc
 8000c10:	08008958 	.word	0x08008958
 8000c14:	08008964 	.word	0x08008964
 8000c18:	08008970 	.word	0x08008970
 8000c1c:	0800897c 	.word	0x0800897c

08000c20 <checkbutton>:
  /* USER CODE END lcd_send */
}

/* checkbutton function */
void checkbutton(void *argument)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN checkbutton */
	Sw_state switchstate;



	xSemaphoreTake(Mutex,portMAX_DELAY);
 8000c28:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <checkbutton+0x6c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c30:	4618      	mov	r0, r3
 8000c32:	f005 fb51 	bl	80062d8 <xQueueSemaphoreTake>

		switchstate.Sw1_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000c36:	2101      	movs	r1, #1
 8000c38:	4815      	ldr	r0, [pc, #84]	; (8000c90 <checkbutton+0x70>)
 8000c3a:	f000 fd77 	bl	800172c <HAL_GPIO_ReadPin>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	bf14      	ite	ne
 8000c44:	2301      	movne	r3, #1
 8000c46:	2300      	moveq	r3, #0
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	733b      	strb	r3, [r7, #12]
		switchstate.Sw2_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	4810      	ldr	r0, [pc, #64]	; (8000c90 <checkbutton+0x70>)
 8000c50:	f000 fd6c 	bl	800172c <HAL_GPIO_ReadPin>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	bf14      	ite	ne
 8000c5a:	2301      	movne	r3, #1
 8000c5c:	2300      	moveq	r3, #0
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	737b      	strb	r3, [r7, #13]

		xQueueSend(xButtonQueue, &switchstate, portMAX_DELAY);
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <checkbutton+0x74>)
 8000c64:	6818      	ldr	r0, [r3, #0]
 8000c66:	f107 010c 	add.w	r1, r7, #12
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c70:	f005 f8b8 	bl	8005de4 <xQueueGenericSend>

	xSemaphoreGive(Mutex);
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <checkbutton+0x6c>)
 8000c76:	6818      	ldr	r0, [r3, #0]
 8000c78:	2300      	movs	r3, #0
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	f005 f8b1 	bl	8005de4 <xQueueGenericSend>




  /* USER CODE END checkbutton */
}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200000d4 	.word	0x200000d4
 8000c90:	40020000 	.word	0x40020000
 8000c94:	200000d8 	.word	0x200000d8

08000c98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d101      	bne.n	8000cae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000caa:	f000 f9dd 	bl	8001068 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40010000 	.word	0x40010000

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <Error_Handler+0x8>
	...

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_MspInit+0x54>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	4a11      	ldr	r2, [pc, #68]	; (8000d1c <HAL_MspInit+0x54>)
 8000cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <HAL_MspInit+0x54>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	603b      	str	r3, [r7, #0]
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <HAL_MspInit+0x54>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <HAL_MspInit+0x54>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <HAL_MspInit+0x54>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	210f      	movs	r1, #15
 8000d0a:	f06f 0001 	mvn.w	r0, #1
 8000d0e:	f000 faa7 	bl	8001260 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800

08000d20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a1d      	ldr	r2, [pc, #116]	; (8000db4 <HAL_I2C_MspInit+0x94>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d133      	bne.n	8000daa <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <HAL_I2C_MspInit+0x98>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a1b      	ldr	r2, [pc, #108]	; (8000db8 <HAL_I2C_MspInit+0x98>)
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <HAL_I2C_MspInit+0x98>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d5e:	23c0      	movs	r3, #192	; 0xc0
 8000d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d62:	2312      	movs	r3, #18
 8000d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d6e:	2304      	movs	r3, #4
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	4810      	ldr	r0, [pc, #64]	; (8000dbc <HAL_I2C_MspInit+0x9c>)
 8000d7a:	f000 fb3b 	bl	80013f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <HAL_I2C_MspInit+0x98>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	4a0c      	ldr	r2, [pc, #48]	; (8000db8 <HAL_I2C_MspInit+0x98>)
 8000d88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <HAL_I2C_MspInit+0x98>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2105      	movs	r1, #5
 8000d9e:	201f      	movs	r0, #31
 8000da0:	f000 fa5e 	bl	8001260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000da4:	201f      	movs	r0, #31
 8000da6:	f000 fa77 	bl	8001298 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000daa:	bf00      	nop
 8000dac:	3728      	adds	r7, #40	; 0x28
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40005400 	.word	0x40005400
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020400 	.word	0x40020400

08000dc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a1d      	ldr	r2, [pc, #116]	; (8000e54 <HAL_UART_MspInit+0x94>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d133      	bne.n	8000e4a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df0:	6413      	str	r3, [r2, #64]	; 0x40
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e1a:	230c      	movs	r3, #12
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4809      	ldr	r0, [pc, #36]	; (8000e5c <HAL_UART_MspInit+0x9c>)
 8000e36:	f000 fadd 	bl	80013f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2105      	movs	r1, #5
 8000e3e:	2026      	movs	r0, #38	; 0x26
 8000e40:	f000 fa0e 	bl	8001260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e44:	2026      	movs	r0, #38	; 0x26
 8000e46:	f000 fa27 	bl	8001298 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e4a:	bf00      	nop
 8000e4c:	3728      	adds	r7, #40	; 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40004400 	.word	0x40004400
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000

08000e60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08c      	sub	sp, #48	; 0x30
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e70:	2300      	movs	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	4b2e      	ldr	r3, [pc, #184]	; (8000f30 <HAL_InitTick+0xd0>)
 8000e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e78:	4a2d      	ldr	r2, [pc, #180]	; (8000f30 <HAL_InitTick+0xd0>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6453      	str	r3, [r2, #68]	; 0x44
 8000e80:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <HAL_InitTick+0xd0>)
 8000e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e8c:	f107 020c 	add.w	r2, r7, #12
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	4611      	mov	r1, r2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f003 f960 	bl	800415c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e9c:	f003 f94a 	bl	8004134 <HAL_RCC_GetPCLK2Freq>
 8000ea0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea4:	4a23      	ldr	r2, [pc, #140]	; (8000f34 <HAL_InitTick+0xd4>)
 8000ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eaa:	0c9b      	lsrs	r3, r3, #18
 8000eac:	3b01      	subs	r3, #1
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000eb0:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <HAL_InitTick+0xd8>)
 8000eb2:	4a22      	ldr	r2, [pc, #136]	; (8000f3c <HAL_InitTick+0xdc>)
 8000eb4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000eb6:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <HAL_InitTick+0xd8>)
 8000eb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ebc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ebe:	4a1e      	ldr	r2, [pc, #120]	; (8000f38 <HAL_InitTick+0xd8>)
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ec4:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <HAL_InitTick+0xd8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eca:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <HAL_InitTick+0xd8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_InitTick+0xd8>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ed6:	4818      	ldr	r0, [pc, #96]	; (8000f38 <HAL_InitTick+0xd8>)
 8000ed8:	f003 f972 	bl	80041c0 <HAL_TIM_Base_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ee2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d11b      	bne.n	8000f22 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000eea:	4813      	ldr	r0, [pc, #76]	; (8000f38 <HAL_InitTick+0xd8>)
 8000eec:	f003 f9c2 	bl	8004274 <HAL_TIM_Base_Start_IT>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ef6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d111      	bne.n	8000f22 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000efe:	2019      	movs	r0, #25
 8000f00:	f000 f9ca 	bl	8001298 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b0f      	cmp	r3, #15
 8000f08:	d808      	bhi.n	8000f1c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	6879      	ldr	r1, [r7, #4]
 8000f0e:	2019      	movs	r0, #25
 8000f10:	f000 f9a6 	bl	8001260 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f14:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <HAL_InitTick+0xe0>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]
 8000f1a:	e002      	b.n	8000f22 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3730      	adds	r7, #48	; 0x30
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800
 8000f34:	431bde83 	.word	0x431bde83
 8000f38:	200000e0 	.word	0x200000e0
 8000f3c:	40010000 	.word	0x40010000
 8000f40:	20000004 	.word	0x20000004

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f48:	e7fe      	b.n	8000f48 <NMI_Handler+0x4>

08000f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler+0x4>

08000f56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f76:	f003 f9ed 	bl	8004354 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200000e0 	.word	0x200000e0

08000f84 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <I2C1_EV_IRQHandler+0x10>)
 8000f8a:	f000 fe73 	bl	8001c74 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000002c 	.word	0x2000002c

08000f98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <USART2_IRQHandler+0x10>)
 8000f9e:	f003 fc01 	bl	80047a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000080 	.word	0x20000080

08000fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <SystemInit+0x20>)
 8000fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb6:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <SystemInit+0x20>)
 8000fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001008 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fd4:	f7ff ffea 	bl	8000fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd8:	480c      	ldr	r0, [pc, #48]	; (800100c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fda:	490d      	ldr	r1, [pc, #52]	; (8001010 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	; (8001014 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe0:	e002      	b.n	8000fe8 <LoopCopyDataInit>

08000fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe6:	3304      	adds	r3, #4

08000fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fec:	d3f9      	bcc.n	8000fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ff0:	4c0a      	ldr	r4, [pc, #40]	; (800101c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff4:	e001      	b.n	8000ffa <LoopFillZerobss>

08000ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff8:	3204      	adds	r2, #4

08000ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ffc:	d3fb      	bcc.n	8000ff6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f007 fc45 	bl	800888c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001002:	f7ff fb4b 	bl	800069c <main>
  bx  lr    
 8001006:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001008:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800100c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001010:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001014:	08008a20 	.word	0x08008a20
  ldr r2, =_sbss
 8001018:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800101c:	20004a7c 	.word	0x20004a7c

08001020 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC_IRQHandler>
	...

08001024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <HAL_Init+0x40>)
 800102e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001032:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <HAL_Init+0x40>)
 800103a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800103e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_Init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_Init+0x40>)
 8001046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104c:	2003      	movs	r0, #3
 800104e:	f000 f8fc 	bl	800124a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001052:	200f      	movs	r0, #15
 8001054:	f7ff ff04 	bl	8000e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001058:	f7ff fe36 	bl	8000cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023c00 	.word	0x40023c00

08001068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_IncTick+0x20>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_IncTick+0x24>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4413      	add	r3, r2
 8001078:	4a04      	ldr	r2, [pc, #16]	; (800108c <HAL_IncTick+0x24>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000008 	.word	0x20000008
 800108c:	20000128 	.word	0x20000128

08001090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return uwTick;
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <HAL_GetTick+0x14>)
 8001096:	681b      	ldr	r3, [r3, #0]
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000128 	.word	0x20000128

080010a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b0:	f7ff ffee 	bl	8001090 <HAL_GetTick>
 80010b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010c0:	d005      	beq.n	80010ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_Delay+0x44>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4413      	add	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ce:	bf00      	nop
 80010d0:	f7ff ffde 	bl	8001090 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d8f7      	bhi.n	80010d0 <HAL_Delay+0x28>
  {
  }
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000008 	.word	0x20000008

080010f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800110c:	4013      	ands	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800111c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001122:	4a04      	ldr	r2, [pc, #16]	; (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	60d3      	str	r3, [r2, #12]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <__NVIC_GetPriorityGrouping+0x18>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	f003 0307 	and.w	r3, r3, #7
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	2b00      	cmp	r3, #0
 8001164:	db0b      	blt.n	800117e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f003 021f 	and.w	r2, r3, #31
 800116c:	4907      	ldr	r1, [pc, #28]	; (800118c <__NVIC_EnableIRQ+0x38>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	095b      	lsrs	r3, r3, #5
 8001174:	2001      	movs	r0, #1
 8001176:	fa00 f202 	lsl.w	r2, r0, r2
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000e100 	.word	0xe000e100

08001190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	db0a      	blt.n	80011ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	490c      	ldr	r1, [pc, #48]	; (80011dc <__NVIC_SetPriority+0x4c>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	0112      	lsls	r2, r2, #4
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	440b      	add	r3, r1
 80011b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b8:	e00a      	b.n	80011d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4908      	ldr	r1, [pc, #32]	; (80011e0 <__NVIC_SetPriority+0x50>)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	3b04      	subs	r3, #4
 80011c8:	0112      	lsls	r2, r2, #4
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	440b      	add	r3, r1
 80011ce:	761a      	strb	r2, [r3, #24]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000e100 	.word	0xe000e100
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	; 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f1c3 0307 	rsb	r3, r3, #7
 80011fe:	2b04      	cmp	r3, #4
 8001200:	bf28      	it	cs
 8001202:	2304      	movcs	r3, #4
 8001204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3304      	adds	r3, #4
 800120a:	2b06      	cmp	r3, #6
 800120c:	d902      	bls.n	8001214 <NVIC_EncodePriority+0x30>
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3b03      	subs	r3, #3
 8001212:	e000      	b.n	8001216 <NVIC_EncodePriority+0x32>
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43da      	mvns	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	401a      	ands	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800122c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa01 f303 	lsl.w	r3, r1, r3
 8001236:	43d9      	mvns	r1, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	4313      	orrs	r3, r2
         );
}
 800123e:	4618      	mov	r0, r3
 8001240:	3724      	adds	r7, #36	; 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ff4c 	bl	80010f0 <__NVIC_SetPriorityGrouping>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001272:	f7ff ff61 	bl	8001138 <__NVIC_GetPriorityGrouping>
 8001276:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	68b9      	ldr	r1, [r7, #8]
 800127c:	6978      	ldr	r0, [r7, #20]
 800127e:	f7ff ffb1 	bl	80011e4 <NVIC_EncodePriority>
 8001282:	4602      	mov	r2, r0
 8001284:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001288:	4611      	mov	r1, r2
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff80 	bl	8001190 <__NVIC_SetPriority>
}
 8001290:	bf00      	nop
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff54 	bl	8001154 <__NVIC_EnableIRQ>
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012c2:	f7ff fee5 	bl	8001090 <HAL_GetTick>
 80012c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d008      	beq.n	80012e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2280      	movs	r2, #128	; 0x80
 80012d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e052      	b.n	800138c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0216 	bic.w	r2, r2, #22
 80012f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	695a      	ldr	r2, [r3, #20]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001304:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	2b00      	cmp	r3, #0
 800130c:	d103      	bne.n	8001316 <HAL_DMA_Abort+0x62>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001312:	2b00      	cmp	r3, #0
 8001314:	d007      	beq.n	8001326 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 0208 	bic.w	r2, r2, #8
 8001324:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0201 	bic.w	r2, r2, #1
 8001334:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001336:	e013      	b.n	8001360 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001338:	f7ff feaa 	bl	8001090 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b05      	cmp	r3, #5
 8001344:	d90c      	bls.n	8001360 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2220      	movs	r2, #32
 800134a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2203      	movs	r2, #3
 8001350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e015      	b.n	800138c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1e4      	bne.n	8001338 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001372:	223f      	movs	r2, #63	; 0x3f
 8001374:	409a      	lsls	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d004      	beq.n	80013b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2280      	movs	r2, #128	; 0x80
 80013ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00c      	b.n	80013cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2205      	movs	r2, #5
 80013b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 0201 	bic.w	r2, r2, #1
 80013c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013e6:	b2db      	uxtb	r3, r3
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
 800140e:	e16b      	b.n	80016e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001410:	2201      	movs	r2, #1
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	429a      	cmp	r2, r3
 800142a:	f040 815a 	bne.w	80016e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	2b01      	cmp	r3, #1
 8001438:	d005      	beq.n	8001446 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001442:	2b02      	cmp	r3, #2
 8001444:	d130      	bne.n	80014a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	2203      	movs	r2, #3
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800147c:	2201      	movs	r2, #1
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	091b      	lsrs	r3, r3, #4
 8001492:	f003 0201 	and.w	r2, r3, #1
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d017      	beq.n	80014e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	2203      	movs	r2, #3
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d123      	bne.n	8001538 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	08da      	lsrs	r2, r3, #3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3208      	adds	r2, #8
 80014f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	220f      	movs	r2, #15
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	691a      	ldr	r2, [r3, #16]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	08da      	lsrs	r2, r3, #3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3208      	adds	r2, #8
 8001532:	69b9      	ldr	r1, [r7, #24]
 8001534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	2203      	movs	r2, #3
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0203 	and.w	r2, r3, #3
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 80b4 	beq.w	80016e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b60      	ldr	r3, [pc, #384]	; (8001700 <HAL_GPIO_Init+0x30c>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	4a5f      	ldr	r2, [pc, #380]	; (8001700 <HAL_GPIO_Init+0x30c>)
 8001584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001588:	6453      	str	r3, [r2, #68]	; 0x44
 800158a:	4b5d      	ldr	r3, [pc, #372]	; (8001700 <HAL_GPIO_Init+0x30c>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001596:	4a5b      	ldr	r2, [pc, #364]	; (8001704 <HAL_GPIO_Init+0x310>)
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	3302      	adds	r3, #2
 800159e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	220f      	movs	r2, #15
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a52      	ldr	r2, [pc, #328]	; (8001708 <HAL_GPIO_Init+0x314>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d02b      	beq.n	800161a <HAL_GPIO_Init+0x226>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a51      	ldr	r2, [pc, #324]	; (800170c <HAL_GPIO_Init+0x318>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d025      	beq.n	8001616 <HAL_GPIO_Init+0x222>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a50      	ldr	r2, [pc, #320]	; (8001710 <HAL_GPIO_Init+0x31c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d01f      	beq.n	8001612 <HAL_GPIO_Init+0x21e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4f      	ldr	r2, [pc, #316]	; (8001714 <HAL_GPIO_Init+0x320>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d019      	beq.n	800160e <HAL_GPIO_Init+0x21a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4e      	ldr	r2, [pc, #312]	; (8001718 <HAL_GPIO_Init+0x324>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d013      	beq.n	800160a <HAL_GPIO_Init+0x216>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4d      	ldr	r2, [pc, #308]	; (800171c <HAL_GPIO_Init+0x328>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d00d      	beq.n	8001606 <HAL_GPIO_Init+0x212>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x32c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d007      	beq.n	8001602 <HAL_GPIO_Init+0x20e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x330>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d101      	bne.n	80015fe <HAL_GPIO_Init+0x20a>
 80015fa:	2307      	movs	r3, #7
 80015fc:	e00e      	b.n	800161c <HAL_GPIO_Init+0x228>
 80015fe:	2308      	movs	r3, #8
 8001600:	e00c      	b.n	800161c <HAL_GPIO_Init+0x228>
 8001602:	2306      	movs	r3, #6
 8001604:	e00a      	b.n	800161c <HAL_GPIO_Init+0x228>
 8001606:	2305      	movs	r3, #5
 8001608:	e008      	b.n	800161c <HAL_GPIO_Init+0x228>
 800160a:	2304      	movs	r3, #4
 800160c:	e006      	b.n	800161c <HAL_GPIO_Init+0x228>
 800160e:	2303      	movs	r3, #3
 8001610:	e004      	b.n	800161c <HAL_GPIO_Init+0x228>
 8001612:	2302      	movs	r3, #2
 8001614:	e002      	b.n	800161c <HAL_GPIO_Init+0x228>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <HAL_GPIO_Init+0x228>
 800161a:	2300      	movs	r3, #0
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	f002 0203 	and.w	r2, r2, #3
 8001622:	0092      	lsls	r2, r2, #2
 8001624:	4093      	lsls	r3, r2
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800162c:	4935      	ldr	r1, [pc, #212]	; (8001704 <HAL_GPIO_Init+0x310>)
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	089b      	lsrs	r3, r3, #2
 8001632:	3302      	adds	r3, #2
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800163a:	4b3b      	ldr	r3, [pc, #236]	; (8001728 <HAL_GPIO_Init+0x334>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800165e:	4a32      	ldr	r2, [pc, #200]	; (8001728 <HAL_GPIO_Init+0x334>)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001664:	4b30      	ldr	r3, [pc, #192]	; (8001728 <HAL_GPIO_Init+0x334>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001688:	4a27      	ldr	r2, [pc, #156]	; (8001728 <HAL_GPIO_Init+0x334>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800168e:	4b26      	ldr	r3, [pc, #152]	; (8001728 <HAL_GPIO_Init+0x334>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016b2:	4a1d      	ldr	r2, [pc, #116]	; (8001728 <HAL_GPIO_Init+0x334>)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_GPIO_Init+0x334>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016dc:	4a12      	ldr	r2, [pc, #72]	; (8001728 <HAL_GPIO_Init+0x334>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3301      	adds	r3, #1
 80016e6:	61fb      	str	r3, [r7, #28]
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	2b0f      	cmp	r3, #15
 80016ec:	f67f ae90 	bls.w	8001410 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3724      	adds	r7, #36	; 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	40013800 	.word	0x40013800
 8001708:	40020000 	.word	0x40020000
 800170c:	40020400 	.word	0x40020400
 8001710:	40020800 	.word	0x40020800
 8001714:	40020c00 	.word	0x40020c00
 8001718:	40021000 	.word	0x40021000
 800171c:	40021400 	.word	0x40021400
 8001720:	40021800 	.word	0x40021800
 8001724:	40021c00 	.word	0x40021c00
 8001728:	40013c00 	.word	0x40013c00

0800172c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691a      	ldr	r2, [r3, #16]
 800173c:	887b      	ldrh	r3, [r7, #2]
 800173e:	4013      	ands	r3, r2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d002      	beq.n	800174a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001744:	2301      	movs	r3, #1
 8001746:	73fb      	strb	r3, [r7, #15]
 8001748:	e001      	b.n	800174e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800174a:	2300      	movs	r3, #0
 800174c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800174e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
 8001768:	4613      	mov	r3, r2
 800176a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800176c:	787b      	ldrb	r3, [r7, #1]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001772:	887a      	ldrh	r2, [r7, #2]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001778:	e003      	b.n	8001782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800177a:	887b      	ldrh	r3, [r7, #2]
 800177c:	041a      	lsls	r2, r3, #16
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	619a      	str	r2, [r3, #24]
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800178e:	b480      	push	{r7}
 8001790:	b085      	sub	sp, #20
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017a0:	887a      	ldrh	r2, [r7, #2]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4013      	ands	r3, r2
 80017a6:	041a      	lsls	r2, r3, #16
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	43d9      	mvns	r1, r3
 80017ac:	887b      	ldrh	r3, [r7, #2]
 80017ae:	400b      	ands	r3, r1
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	619a      	str	r2, [r3, #24]
}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e12b      	b.n	8001a2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d106      	bne.n	80017f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff fa98 	bl	8000d20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2224      	movs	r2, #36	; 0x24
 80017f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0201 	bic.w	r2, r2, #1
 8001806:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001816:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001826:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001828:	f002 fc70 	bl	800410c <HAL_RCC_GetPCLK1Freq>
 800182c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	4a81      	ldr	r2, [pc, #516]	; (8001a38 <HAL_I2C_Init+0x274>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d807      	bhi.n	8001848 <HAL_I2C_Init+0x84>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4a80      	ldr	r2, [pc, #512]	; (8001a3c <HAL_I2C_Init+0x278>)
 800183c:	4293      	cmp	r3, r2
 800183e:	bf94      	ite	ls
 8001840:	2301      	movls	r3, #1
 8001842:	2300      	movhi	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	e006      	b.n	8001856 <HAL_I2C_Init+0x92>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4a7d      	ldr	r2, [pc, #500]	; (8001a40 <HAL_I2C_Init+0x27c>)
 800184c:	4293      	cmp	r3, r2
 800184e:	bf94      	ite	ls
 8001850:	2301      	movls	r3, #1
 8001852:	2300      	movhi	r3, #0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e0e7      	b.n	8001a2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4a78      	ldr	r2, [pc, #480]	; (8001a44 <HAL_I2C_Init+0x280>)
 8001862:	fba2 2303 	umull	r2, r3, r2, r3
 8001866:	0c9b      	lsrs	r3, r3, #18
 8001868:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	430a      	orrs	r2, r1
 800187c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	4a6a      	ldr	r2, [pc, #424]	; (8001a38 <HAL_I2C_Init+0x274>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d802      	bhi.n	8001898 <HAL_I2C_Init+0xd4>
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	3301      	adds	r3, #1
 8001896:	e009      	b.n	80018ac <HAL_I2C_Init+0xe8>
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800189e:	fb02 f303 	mul.w	r3, r2, r3
 80018a2:	4a69      	ldr	r2, [pc, #420]	; (8001a48 <HAL_I2C_Init+0x284>)
 80018a4:	fba2 2303 	umull	r2, r3, r2, r3
 80018a8:	099b      	lsrs	r3, r3, #6
 80018aa:	3301      	adds	r3, #1
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	430b      	orrs	r3, r1
 80018b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	495c      	ldr	r1, [pc, #368]	; (8001a38 <HAL_I2C_Init+0x274>)
 80018c8:	428b      	cmp	r3, r1
 80018ca:	d819      	bhi.n	8001900 <HAL_I2C_Init+0x13c>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	1e59      	subs	r1, r3, #1
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80018da:	1c59      	adds	r1, r3, #1
 80018dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018e0:	400b      	ands	r3, r1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00a      	beq.n	80018fc <HAL_I2C_Init+0x138>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1e59      	subs	r1, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80018f4:	3301      	adds	r3, #1
 80018f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018fa:	e051      	b.n	80019a0 <HAL_I2C_Init+0x1dc>
 80018fc:	2304      	movs	r3, #4
 80018fe:	e04f      	b.n	80019a0 <HAL_I2C_Init+0x1dc>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d111      	bne.n	800192c <HAL_I2C_Init+0x168>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	1e58      	subs	r0, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6859      	ldr	r1, [r3, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	440b      	add	r3, r1
 8001916:	fbb0 f3f3 	udiv	r3, r0, r3
 800191a:	3301      	adds	r3, #1
 800191c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001920:	2b00      	cmp	r3, #0
 8001922:	bf0c      	ite	eq
 8001924:	2301      	moveq	r3, #1
 8001926:	2300      	movne	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	e012      	b.n	8001952 <HAL_I2C_Init+0x18e>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	1e58      	subs	r0, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6859      	ldr	r1, [r3, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	0099      	lsls	r1, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001942:	3301      	adds	r3, #1
 8001944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001948:	2b00      	cmp	r3, #0
 800194a:	bf0c      	ite	eq
 800194c:	2301      	moveq	r3, #1
 800194e:	2300      	movne	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_I2C_Init+0x196>
 8001956:	2301      	movs	r3, #1
 8001958:	e022      	b.n	80019a0 <HAL_I2C_Init+0x1dc>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10e      	bne.n	8001980 <HAL_I2C_Init+0x1bc>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1e58      	subs	r0, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6859      	ldr	r1, [r3, #4]
 800196a:	460b      	mov	r3, r1
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	440b      	add	r3, r1
 8001970:	fbb0 f3f3 	udiv	r3, r0, r3
 8001974:	3301      	adds	r3, #1
 8001976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800197a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800197e:	e00f      	b.n	80019a0 <HAL_I2C_Init+0x1dc>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	1e58      	subs	r0, r3, #1
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6859      	ldr	r1, [r3, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	0099      	lsls	r1, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	fbb0 f3f3 	udiv	r3, r0, r3
 8001996:	3301      	adds	r3, #1
 8001998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800199c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	6809      	ldr	r1, [r1, #0]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69da      	ldr	r2, [r3, #28]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6911      	ldr	r1, [r2, #16]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68d2      	ldr	r2, [r2, #12]
 80019da:	4311      	orrs	r1, r2
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	430b      	orrs	r3, r1
 80019e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695a      	ldr	r2, [r3, #20]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2220      	movs	r2, #32
 8001a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	000186a0 	.word	0x000186a0
 8001a3c:	001e847f 	.word	0x001e847f
 8001a40:	003d08ff 	.word	0x003d08ff
 8001a44:	431bde83 	.word	0x431bde83
 8001a48:	10624dd3 	.word	0x10624dd3

08001a4c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5e:	2b80      	cmp	r3, #128	; 0x80
 8001a60:	d103      	bne.n	8001a6a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af02      	add	r7, sp, #8
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	461a      	mov	r2, r3
 8001a84:	460b      	mov	r3, r1
 8001a86:	817b      	strh	r3, [r7, #10]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a8c:	f7ff fb00 	bl	8001090 <HAL_GetTick>
 8001a90:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b20      	cmp	r3, #32
 8001a9c:	f040 80e0 	bne.w	8001c60 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2319      	movs	r3, #25
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	4970      	ldr	r1, [pc, #448]	; (8001c6c <HAL_I2C_Master_Transmit+0x1f4>)
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f001 fcd8 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e0d3      	b.n	8001c62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_I2C_Master_Transmit+0x50>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e0cc      	b.n	8001c62 <HAL_I2C_Master_Transmit+0x1ea>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d007      	beq.n	8001aee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f042 0201 	orr.w	r2, r2, #1
 8001aec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001afc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2221      	movs	r2, #33	; 0x21
 8001b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2210      	movs	r2, #16
 8001b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	893a      	ldrh	r2, [r7, #8]
 8001b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4a50      	ldr	r2, [pc, #320]	; (8001c70 <HAL_I2C_Master_Transmit+0x1f8>)
 8001b2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b30:	8979      	ldrh	r1, [r7, #10]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	6a3a      	ldr	r2, [r7, #32]
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f001 fb68 	bl	800320c <I2C_MasterRequestWrite>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e08d      	b.n	8001c62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b5c:	e066      	b.n	8001c2c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	6a39      	ldr	r1, [r7, #32]
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f001 fd96 	bl	8003694 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00d      	beq.n	8001b8a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d107      	bne.n	8001b86 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e06b      	b.n	8001c62 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	781a      	ldrb	r2, [r3, #0]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d11b      	bne.n	8001c00 <HAL_I2C_Master_Transmit+0x188>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d017      	beq.n	8001c00 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	781a      	ldrb	r2, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	3b01      	subs	r3, #1
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	6a39      	ldr	r1, [r7, #32]
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f001 fd8d 	bl	8003724 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00d      	beq.n	8001c2c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d107      	bne.n	8001c28 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c26:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e01a      	b.n	8001c62 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d194      	bne.n	8001b5e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2220      	movs	r2, #32
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	e000      	b.n	8001c62 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c60:	2302      	movs	r3, #2
  }
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	00100002 	.word	0x00100002
 8001c70:	ffff0000 	.word	0xffff0000

08001c74 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c94:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c9c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	2b10      	cmp	r3, #16
 8001ca2:	d003      	beq.n	8001cac <HAL_I2C_EV_IRQHandler+0x38>
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	2b40      	cmp	r3, #64	; 0x40
 8001ca8:	f040 80b1 	bne.w	8001e0e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10d      	bne.n	8001ce2 <HAL_I2C_EV_IRQHandler+0x6e>
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001ccc:	d003      	beq.n	8001cd6 <HAL_I2C_EV_IRQHandler+0x62>
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001cd4:	d101      	bne.n	8001cda <HAL_I2C_EV_IRQHandler+0x66>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <HAL_I2C_EV_IRQHandler+0x68>
 8001cda:	2300      	movs	r3, #0
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	f000 8114 	beq.w	8001f0a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00b      	beq.n	8001d04 <HAL_I2C_EV_IRQHandler+0x90>
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f001 fdbd 	bl	8003876 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 fcdb 	bl	80026b8 <I2C_Master_SB>
 8001d02:	e083      	b.n	8001e0c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d008      	beq.n	8001d20 <HAL_I2C_EV_IRQHandler+0xac>
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 fd53 	bl	80027c4 <I2C_Master_ADD10>
 8001d1e:	e075      	b.n	8001e0c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d008      	beq.n	8001d3c <HAL_I2C_EV_IRQHandler+0xc8>
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 fd6f 	bl	8002818 <I2C_Master_ADDR>
 8001d3a:	e067      	b.n	8001e0c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d036      	beq.n	8001db4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d54:	f000 80db 	beq.w	8001f0e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00d      	beq.n	8001d7e <HAL_I2C_EV_IRQHandler+0x10a>
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d008      	beq.n	8001d7e <HAL_I2C_EV_IRQHandler+0x10a>
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d103      	bne.n	8001d7e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f937 	bl	8001fea <I2C_MasterTransmit_TXE>
 8001d7c:	e046      	b.n	8001e0c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 80c2 	beq.w	8001f0e <HAL_I2C_EV_IRQHandler+0x29a>
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 80bc 	beq.w	8001f0e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001d96:	7bbb      	ldrb	r3, [r7, #14]
 8001d98:	2b21      	cmp	r3, #33	; 0x21
 8001d9a:	d103      	bne.n	8001da4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f9c0 	bl	8002122 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001da2:	e0b4      	b.n	8001f0e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	2b40      	cmp	r3, #64	; 0x40
 8001da8:	f040 80b1 	bne.w	8001f0e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 fa2e 	bl	800220e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001db2:	e0ac      	b.n	8001f0e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dc2:	f000 80a4 	beq.w	8001f0e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00d      	beq.n	8001dec <HAL_I2C_EV_IRQHandler+0x178>
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d008      	beq.n	8001dec <HAL_I2C_EV_IRQHandler+0x178>
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d103      	bne.n	8001dec <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 faaa 	bl	800233e <I2C_MasterReceive_RXNE>
 8001dea:	e00f      	b.n	8001e0c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 808b 	beq.w	8001f0e <HAL_I2C_EV_IRQHandler+0x29a>
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 8085 	beq.w	8001f0e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 fb62 	bl	80024ce <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e0a:	e080      	b.n	8001f0e <HAL_I2C_EV_IRQHandler+0x29a>
 8001e0c:	e07f      	b.n	8001f0e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d004      	beq.n	8001e20 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	e007      	b.n	8001e30 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d011      	beq.n	8001e5e <HAL_I2C_EV_IRQHandler+0x1ea>
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00c      	beq.n	8001e5e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001e54:	69b9      	ldr	r1, [r7, #24]
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 ff2d 	bl	8002cb6 <I2C_Slave_ADDR>
 8001e5c:	e05a      	b.n	8001f14 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d008      	beq.n	8001e7a <HAL_I2C_EV_IRQHandler+0x206>
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 ff68 	bl	8002d48 <I2C_Slave_STOPF>
 8001e78:	e04c      	b.n	8001f14 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001e7a:	7bbb      	ldrb	r3, [r7, #14]
 8001e7c:	2b21      	cmp	r3, #33	; 0x21
 8001e7e:	d002      	beq.n	8001e86 <HAL_I2C_EV_IRQHandler+0x212>
 8001e80:	7bbb      	ldrb	r3, [r7, #14]
 8001e82:	2b29      	cmp	r3, #41	; 0x29
 8001e84:	d120      	bne.n	8001ec8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00d      	beq.n	8001eac <HAL_I2C_EV_IRQHandler+0x238>
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d008      	beq.n	8001eac <HAL_I2C_EV_IRQHandler+0x238>
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d103      	bne.n	8001eac <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 fe48 	bl	8002b3a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001eaa:	e032      	b.n	8001f12 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d02d      	beq.n	8001f12 <HAL_I2C_EV_IRQHandler+0x29e>
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d028      	beq.n	8001f12 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 fe77 	bl	8002bb4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ec6:	e024      	b.n	8001f12 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00d      	beq.n	8001eee <HAL_I2C_EV_IRQHandler+0x27a>
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d008      	beq.n	8001eee <HAL_I2C_EV_IRQHandler+0x27a>
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d103      	bne.n	8001eee <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 fe85 	bl	8002bf6 <I2C_SlaveReceive_RXNE>
 8001eec:	e012      	b.n	8001f14 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00d      	beq.n	8001f14 <HAL_I2C_EV_IRQHandler+0x2a0>
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d008      	beq.n	8001f14 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 feb5 	bl	8002c72 <I2C_SlaveReceive_BTF>
 8001f08:	e004      	b.n	8001f14 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001f0a:	bf00      	nop
 8001f0c:	e002      	b.n	8001f14 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f0e:	bf00      	nop
 8001f10:	e000      	b.n	8001f14 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f12:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001f14:	3720      	adds	r7, #32
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
 8001f72:	460b      	mov	r3, r1
 8001f74:	70fb      	strb	r3, [r7, #3]
 8001f76:	4613      	mov	r3, r2
 8001f78:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b084      	sub	sp, #16
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002000:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002006:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200c:	2b00      	cmp	r3, #0
 800200e:	d150      	bne.n	80020b2 <I2C_MasterTransmit_TXE+0xc8>
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	2b21      	cmp	r3, #33	; 0x21
 8002014:	d14d      	bne.n	80020b2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2b08      	cmp	r3, #8
 800201a:	d01d      	beq.n	8002058 <I2C_MasterTransmit_TXE+0x6e>
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2b20      	cmp	r3, #32
 8002020:	d01a      	beq.n	8002058 <I2C_MasterTransmit_TXE+0x6e>
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002028:	d016      	beq.n	8002058 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002038:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2211      	movs	r2, #17
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2220      	movs	r2, #32
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff ff62 	bl	8001f1a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002056:	e060      	b.n	800211a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002066:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002076:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2220      	movs	r2, #32
 8002082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b40      	cmp	r3, #64	; 0x40
 8002090:	d107      	bne.n	80020a2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff ff7d 	bl	8001f9a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020a0:	e03b      	b.n	800211a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff ff35 	bl	8001f1a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020b0:	e033      	b.n	800211a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
 80020b4:	2b21      	cmp	r3, #33	; 0x21
 80020b6:	d005      	beq.n	80020c4 <I2C_MasterTransmit_TXE+0xda>
 80020b8:	7bbb      	ldrb	r3, [r7, #14]
 80020ba:	2b40      	cmp	r3, #64	; 0x40
 80020bc:	d12d      	bne.n	800211a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	2b22      	cmp	r3, #34	; 0x22
 80020c2:	d12a      	bne.n	800211a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d108      	bne.n	80020e0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020dc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80020de:	e01c      	b.n	800211a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b40      	cmp	r3, #64	; 0x40
 80020ea:	d103      	bne.n	80020f4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f88e 	bl	800220e <I2C_MemoryTransmit_TXE_BTF>
}
 80020f2:	e012      	b.n	800211a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	781a      	ldrb	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210e:	b29b      	uxth	r3, r3
 8002110:	3b01      	subs	r3, #1
 8002112:	b29a      	uxth	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002118:	e7ff      	b.n	800211a <I2C_MasterTransmit_TXE+0x130>
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b084      	sub	sp, #16
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b21      	cmp	r3, #33	; 0x21
 800213a:	d164      	bne.n	8002206 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002140:	b29b      	uxth	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d012      	beq.n	800216c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	781a      	ldrb	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002160:	b29b      	uxth	r3, r3
 8002162:	3b01      	subs	r3, #1
 8002164:	b29a      	uxth	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800216a:	e04c      	b.n	8002206 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b08      	cmp	r3, #8
 8002170:	d01d      	beq.n	80021ae <I2C_MasterTransmit_BTF+0x8c>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2b20      	cmp	r3, #32
 8002176:	d01a      	beq.n	80021ae <I2C_MasterTransmit_BTF+0x8c>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800217e:	d016      	beq.n	80021ae <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800218e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2211      	movs	r2, #17
 8002194:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2220      	movs	r2, #32
 80021a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff feb7 	bl	8001f1a <HAL_I2C_MasterTxCpltCallback>
}
 80021ac:	e02b      	b.n	8002206 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021bc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021cc:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b40      	cmp	r3, #64	; 0x40
 80021e6:	d107      	bne.n	80021f8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff fed2 	bl	8001f9a <HAL_I2C_MemTxCpltCallback>
}
 80021f6:	e006      	b.n	8002206 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff fe8a 	bl	8001f1a <HAL_I2C_MasterTxCpltCallback>
}
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b084      	sub	sp, #16
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800221c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002222:	2b00      	cmp	r3, #0
 8002224:	d11d      	bne.n	8002262 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222a:	2b01      	cmp	r3, #1
 800222c:	d10b      	bne.n	8002246 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002232:	b2da      	uxtb	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800223e:	1c9a      	adds	r2, r3, #2
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002244:	e077      	b.n	8002336 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800224a:	b29b      	uxth	r3, r3
 800224c:	121b      	asrs	r3, r3, #8
 800224e:	b2da      	uxtb	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002260:	e069      	b.n	8002336 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002266:	2b01      	cmp	r3, #1
 8002268:	d10b      	bne.n	8002282 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800226e:	b2da      	uxtb	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002280:	e059      	b.n	8002336 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002286:	2b02      	cmp	r3, #2
 8002288:	d152      	bne.n	8002330 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	2b22      	cmp	r3, #34	; 0x22
 800228e:	d10d      	bne.n	80022ac <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800229e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022aa:	e044      	b.n	8002336 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d015      	beq.n	80022e2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	2b21      	cmp	r3, #33	; 0x21
 80022ba:	d112      	bne.n	80022e2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	781a      	ldrb	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80022e0:	e029      	b.n	8002336 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d124      	bne.n	8002336 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	2b21      	cmp	r3, #33	; 0x21
 80022f0:	d121      	bne.n	8002336 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002300:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002310:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff fe36 	bl	8001f9a <HAL_I2C_MemTxCpltCallback>
}
 800232e:	e002      	b.n	8002336 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7ff fb8b 	bl	8001a4c <I2C_Flush_DR>
}
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b22      	cmp	r3, #34	; 0x22
 8002350:	f040 80b9 	bne.w	80024c6 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002358:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235e:	b29b      	uxth	r3, r3
 8002360:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d921      	bls.n	80023ac <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691a      	ldr	r2, [r3, #16]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002384:	b29b      	uxth	r3, r3
 8002386:	3b01      	subs	r3, #1
 8002388:	b29a      	uxth	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002392:	b29b      	uxth	r3, r3
 8002394:	2b03      	cmp	r3, #3
 8002396:	f040 8096 	bne.w	80024c6 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023a8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80023aa:	e08c      	b.n	80024c6 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d07f      	beq.n	80024b4 <I2C_MasterReceive_RXNE+0x176>
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d002      	beq.n	80023c0 <I2C_MasterReceive_RXNE+0x82>
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d179      	bne.n	80024b4 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f001 f9f7 	bl	80037b4 <I2C_WaitOnSTOPRequestThroughIT>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d14c      	bne.n	8002466 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023da:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023ea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	691a      	ldr	r2, [r3, #16]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002408:	b29b      	uxth	r3, r3
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2220      	movs	r2, #32
 8002416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b40      	cmp	r3, #64	; 0x40
 8002424:	d10a      	bne.n	800243c <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff fdba 	bl	8001fae <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800243a:	e044      	b.n	80024c6 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2b08      	cmp	r3, #8
 8002448:	d002      	beq.n	8002450 <I2C_MasterReceive_RXNE+0x112>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2b20      	cmp	r3, #32
 800244e:	d103      	bne.n	8002458 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	631a      	str	r2, [r3, #48]	; 0x30
 8002456:	e002      	b.n	800245e <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2212      	movs	r2, #18
 800245c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff fd65 	bl	8001f2e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002464:	e02f      	b.n	80024c6 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002474:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	691a      	ldr	r2, [r3, #16]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002492:	b29b      	uxth	r3, r3
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff fd88 	bl	8001fc2 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80024b2:	e008      	b.n	80024c6 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024c2:	605a      	str	r2, [r3, #4]
}
 80024c4:	e7ff      	b.n	80024c6 <I2C_MasterReceive_RXNE+0x188>
 80024c6:	bf00      	nop
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b084      	sub	sp, #16
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024da:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d11b      	bne.n	800251e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002512:	b29b      	uxth	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800251c:	e0c8      	b.n	80026b0 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002522:	b29b      	uxth	r3, r3
 8002524:	2b03      	cmp	r3, #3
 8002526:	d129      	bne.n	800257c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002536:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b04      	cmp	r3, #4
 800253c:	d00a      	beq.n	8002554 <I2C_MasterReceive_BTF+0x86>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d007      	beq.n	8002554 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002552:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002570:	b29b      	uxth	r3, r3
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800257a:	e099      	b.n	80026b0 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	f040 8081 	bne.w	800268a <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d002      	beq.n	8002594 <I2C_MasterReceive_BTF+0xc6>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2b10      	cmp	r3, #16
 8002592:	d108      	bne.n	80025a6 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	e019      	b.n	80025da <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d002      	beq.n	80025b2 <I2C_MasterReceive_BTF+0xe4>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d108      	bne.n	80025c4 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	e00a      	b.n	80025da <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2b10      	cmp	r3, #16
 80025c8:	d007      	beq.n	80025da <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261c:	b29b      	uxth	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002634:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2220      	movs	r2, #32
 800263a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b40      	cmp	r3, #64	; 0x40
 8002648:	d10a      	bne.n	8002660 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff fca8 	bl	8001fae <HAL_I2C_MemRxCpltCallback>
}
 800265e:	e027      	b.n	80026b0 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2b08      	cmp	r3, #8
 800266c:	d002      	beq.n	8002674 <I2C_MasterReceive_BTF+0x1a6>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b20      	cmp	r3, #32
 8002672:	d103      	bne.n	800267c <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	631a      	str	r2, [r3, #48]	; 0x30
 800267a:	e002      	b.n	8002682 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2212      	movs	r2, #18
 8002680:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff fc53 	bl	8001f2e <HAL_I2C_MasterRxCpltCallback>
}
 8002688:	e012      	b.n	80026b0 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80026b0:	bf00      	nop
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b40      	cmp	r3, #64	; 0x40
 80026ca:	d117      	bne.n	80026fc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d109      	bne.n	80026e8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	461a      	mov	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026e4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80026e6:	e067      	b.n	80027b8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	611a      	str	r2, [r3, #16]
}
 80026fa:	e05d      	b.n	80027b8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002704:	d133      	bne.n	800276e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b21      	cmp	r3, #33	; 0x21
 8002710:	d109      	bne.n	8002726 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	b2db      	uxtb	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002722:	611a      	str	r2, [r3, #16]
 8002724:	e008      	b.n	8002738 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	b2da      	uxtb	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800273c:	2b00      	cmp	r3, #0
 800273e:	d004      	beq.n	800274a <I2C_Master_SB+0x92>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002746:	2b00      	cmp	r3, #0
 8002748:	d108      	bne.n	800275c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274e:	2b00      	cmp	r3, #0
 8002750:	d032      	beq.n	80027b8 <I2C_Master_SB+0x100>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002758:	2b00      	cmp	r3, #0
 800275a:	d02d      	beq.n	80027b8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800276a:	605a      	str	r2, [r3, #4]
}
 800276c:	e024      	b.n	80027b8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10e      	bne.n	8002794 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	b29b      	uxth	r3, r3
 800277c:	11db      	asrs	r3, r3, #7
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f003 0306 	and.w	r3, r3, #6
 8002784:	b2db      	uxtb	r3, r3
 8002786:	f063 030f 	orn	r3, r3, #15
 800278a:	b2da      	uxtb	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	611a      	str	r2, [r3, #16]
}
 8002792:	e011      	b.n	80027b8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002798:	2b01      	cmp	r3, #1
 800279a:	d10d      	bne.n	80027b8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	11db      	asrs	r3, r3, #7
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	f003 0306 	and.w	r3, r3, #6
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	f063 030e 	orn	r3, r3, #14
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	611a      	str	r2, [r3, #16]
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d004      	beq.n	80027ea <I2C_Master_ADD10+0x26>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d108      	bne.n	80027fc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00c      	beq.n	800280c <I2C_Master_ADD10+0x48>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d007      	beq.n	800280c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800280a:	605a      	str	r2, [r3, #4]
  }
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002818:	b480      	push	{r7}
 800281a:	b091      	sub	sp, #68	; 0x44
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002826:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b22      	cmp	r3, #34	; 0x22
 8002840:	f040 8169 	bne.w	8002b16 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10f      	bne.n	800286c <I2C_Master_ADDR+0x54>
 800284c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002850:	2b40      	cmp	r3, #64	; 0x40
 8002852:	d10b      	bne.n	800286c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002854:	2300      	movs	r3, #0
 8002856:	633b      	str	r3, [r7, #48]	; 0x30
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	633b      	str	r3, [r7, #48]	; 0x30
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	633b      	str	r3, [r7, #48]	; 0x30
 8002868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286a:	e160      	b.n	8002b2e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002870:	2b00      	cmp	r3, #0
 8002872:	d11d      	bne.n	80028b0 <I2C_Master_ADDR+0x98>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800287c:	d118      	bne.n	80028b0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800287e:	2300      	movs	r3, #0
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028a2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	651a      	str	r2, [r3, #80]	; 0x50
 80028ae:	e13e      	b.n	8002b2e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d113      	bne.n	80028e2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ba:	2300      	movs	r3, #0
 80028bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ce:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e115      	b.n	8002b0e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	f040 808a 	bne.w	8002a02 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80028ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028f4:	d137      	bne.n	8002966 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002904:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002914:	d113      	bne.n	800293e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002924:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002926:	2300      	movs	r3, #0
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	e0e7      	b.n	8002b0e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800293e:	2300      	movs	r3, #0
 8002940:	623b      	str	r3, [r7, #32]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	623b      	str	r3, [r7, #32]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	623b      	str	r3, [r7, #32]
 8002952:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	e0d3      	b.n	8002b0e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002968:	2b08      	cmp	r3, #8
 800296a:	d02e      	beq.n	80029ca <I2C_Master_ADDR+0x1b2>
 800296c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296e:	2b20      	cmp	r3, #32
 8002970:	d02b      	beq.n	80029ca <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002974:	2b12      	cmp	r3, #18
 8002976:	d102      	bne.n	800297e <I2C_Master_ADDR+0x166>
 8002978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297a:	2b01      	cmp	r3, #1
 800297c:	d125      	bne.n	80029ca <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800297e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002980:	2b04      	cmp	r3, #4
 8002982:	d00e      	beq.n	80029a2 <I2C_Master_ADDR+0x18a>
 8002984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002986:	2b02      	cmp	r3, #2
 8002988:	d00b      	beq.n	80029a2 <I2C_Master_ADDR+0x18a>
 800298a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800298c:	2b10      	cmp	r3, #16
 800298e:	d008      	beq.n	80029a2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	e007      	b.n	80029b2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029b0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	61fb      	str	r3, [r7, #28]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	61fb      	str	r3, [r7, #28]
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	e0a1      	b.n	8002b0e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029d8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029da:	2300      	movs	r3, #0
 80029dc:	61bb      	str	r3, [r7, #24]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	61bb      	str	r3, [r7, #24]
 80029ee:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	e085      	b.n	8002b0e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d14d      	bne.n	8002aa8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d016      	beq.n	8002a40 <I2C_Master_ADDR+0x228>
 8002a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d013      	beq.n	8002a40 <I2C_Master_ADDR+0x228>
 8002a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1a:	2b10      	cmp	r3, #16
 8002a1c:	d010      	beq.n	8002a40 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a2c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	e007      	b.n	8002a50 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a4e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a5e:	d117      	bne.n	8002a90 <I2C_Master_ADDR+0x278>
 8002a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a66:	d00b      	beq.n	8002a80 <I2C_Master_ADDR+0x268>
 8002a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d008      	beq.n	8002a80 <I2C_Master_ADDR+0x268>
 8002a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d005      	beq.n	8002a80 <I2C_Master_ADDR+0x268>
 8002a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a76:	2b10      	cmp	r3, #16
 8002a78:	d002      	beq.n	8002a80 <I2C_Master_ADDR+0x268>
 8002a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d107      	bne.n	8002a90 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a8e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	e032      	b.n	8002b0e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ab6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ac6:	d117      	bne.n	8002af8 <I2C_Master_ADDR+0x2e0>
 8002ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ace:	d00b      	beq.n	8002ae8 <I2C_Master_ADDR+0x2d0>
 8002ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d008      	beq.n	8002ae8 <I2C_Master_ADDR+0x2d0>
 8002ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d005      	beq.n	8002ae8 <I2C_Master_ADDR+0x2d0>
 8002adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ade:	2b10      	cmp	r3, #16
 8002ae0:	d002      	beq.n	8002ae8 <I2C_Master_ADDR+0x2d0>
 8002ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae4:	2b20      	cmp	r3, #32
 8002ae6:	d107      	bne.n	8002af8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002af6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af8:	2300      	movs	r3, #0
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002b14:	e00b      	b.n	8002b2e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
}
 8002b2c:	e7ff      	b.n	8002b2e <I2C_Master_ADDR+0x316>
 8002b2e:	bf00      	nop
 8002b30:	3744      	adds	r7, #68	; 0x44
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b48:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d02b      	beq.n	8002bac <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	781a      	ldrb	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d114      	bne.n	8002bac <I2C_SlaveTransmit_TXE+0x72>
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	2b29      	cmp	r3, #41	; 0x29
 8002b86:	d111      	bne.n	8002bac <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b96:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2221      	movs	r2, #33	; 0x21
 8002b9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2228      	movs	r2, #40	; 0x28
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff f9cb 	bl	8001f42 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002bac:	bf00      	nop
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d011      	beq.n	8002bea <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	781a      	ldrb	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b084      	sub	sp, #16
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c04:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d02c      	beq.n	8002c6a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d114      	bne.n	8002c6a <I2C_SlaveReceive_RXNE+0x74>
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	2b2a      	cmp	r3, #42	; 0x2a
 8002c44:	d111      	bne.n	8002c6a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c54:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2222      	movs	r2, #34	; 0x22
 8002c5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2228      	movs	r2, #40	; 0x28
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7ff f976 	bl	8001f56 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d012      	beq.n	8002caa <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691a      	ldr	r2, [r3, #16]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cd0:	2b28      	cmp	r3, #40	; 0x28
 8002cd2:	d125      	bne.n	8002d20 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d103      	bne.n	8002d04 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	81bb      	strh	r3, [r7, #12]
 8002d02:	e002      	b.n	8002d0a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002d12:	89ba      	ldrh	r2, [r7, #12]
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	4619      	mov	r1, r3
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff f926 	bl	8001f6a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002d1e:	e00e      	b.n	8002d3e <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d20:	2300      	movs	r3, #0
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	60bb      	str	r3, [r7, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	60bb      	str	r3, [r7, #8]
 8002d34:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002d3e:	bf00      	nop
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d56:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d66:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d94:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002da4:	d172      	bne.n	8002e8c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
 8002da8:	2b22      	cmp	r3, #34	; 0x22
 8002daa:	d002      	beq.n	8002db2 <I2C_Slave_STOPF+0x6a>
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	2b2a      	cmp	r3, #42	; 0x2a
 8002db0:	d135      	bne.n	8002e1e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d005      	beq.n	8002dd6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f043 0204 	orr.w	r2, r3, #4
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002de4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe faf4 	bl	80013d8 <HAL_DMA_GetState>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d049      	beq.n	8002e8a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	4a69      	ldr	r2, [pc, #420]	; (8002fa0 <I2C_Slave_STOPF+0x258>)
 8002dfc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fe fac6 	bl	8001394 <HAL_DMA_Abort_IT>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d03d      	beq.n	8002e8a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e18:	4610      	mov	r0, r2
 8002e1a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e1c:	e035      	b.n	8002e8a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f043 0204 	orr.w	r2, r3, #4
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e50:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fe fabe 	bl	80013d8 <HAL_DMA_GetState>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d014      	beq.n	8002e8c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e66:	4a4e      	ldr	r2, [pc, #312]	; (8002fa0 <I2C_Slave_STOPF+0x258>)
 8002e68:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe fa90 	bl	8001394 <HAL_DMA_Abort_IT>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d008      	beq.n	8002e8c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e84:	4610      	mov	r0, r2
 8002e86:	4798      	blx	r3
 8002e88:	e000      	b.n	8002e8c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e8a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d03e      	beq.n	8002f14 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d112      	bne.n	8002eca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	1c5a      	adds	r2, r3, #1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	d112      	bne.n	8002efe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691a      	ldr	r2, [r3, #16]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	f043 0204 	orr.w	r2, r3, #4
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f843 	bl	8002fa8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002f22:	e039      	b.n	8002f98 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
 8002f26:	2b2a      	cmp	r3, #42	; 0x2a
 8002f28:	d109      	bne.n	8002f3e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2228      	movs	r2, #40	; 0x28
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff f80c 	bl	8001f56 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b28      	cmp	r3, #40	; 0x28
 8002f48:	d111      	bne.n	8002f6e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a15      	ldr	r2, [pc, #84]	; (8002fa4 <I2C_Slave_STOPF+0x25c>)
 8002f4e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff f80d 	bl	8001f86 <HAL_I2C_ListenCpltCallback>
}
 8002f6c:	e014      	b.n	8002f98 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	2b22      	cmp	r3, #34	; 0x22
 8002f74:	d002      	beq.n	8002f7c <I2C_Slave_STOPF+0x234>
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	2b22      	cmp	r3, #34	; 0x22
 8002f7a:	d10d      	bne.n	8002f98 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7fe ffdf 	bl	8001f56 <HAL_I2C_SlaveRxCpltCallback>
}
 8002f98:	bf00      	nop
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	08003311 	.word	0x08003311
 8002fa4:	ffff0000 	.word	0xffff0000

08002fa8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fbe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002fc0:	7bbb      	ldrb	r3, [r7, #14]
 8002fc2:	2b10      	cmp	r3, #16
 8002fc4:	d002      	beq.n	8002fcc <I2C_ITError+0x24>
 8002fc6:	7bbb      	ldrb	r3, [r7, #14]
 8002fc8:	2b40      	cmp	r3, #64	; 0x40
 8002fca:	d10a      	bne.n	8002fe2 <I2C_ITError+0x3a>
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	2b22      	cmp	r3, #34	; 0x22
 8002fd0:	d107      	bne.n	8002fe2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fe0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
 8002fe4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002fe8:	2b28      	cmp	r3, #40	; 0x28
 8002fea:	d107      	bne.n	8002ffc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2228      	movs	r2, #40	; 0x28
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002ffa:	e015      	b.n	8003028 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003006:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800300a:	d00a      	beq.n	8003022 <I2C_ITError+0x7a>
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	2b60      	cmp	r3, #96	; 0x60
 8003010:	d007      	beq.n	8003022 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2220      	movs	r2, #32
 8003016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003036:	d162      	bne.n	80030fe <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003046:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b01      	cmp	r3, #1
 8003054:	d020      	beq.n	8003098 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305a:	4a6a      	ldr	r2, [pc, #424]	; (8003204 <I2C_ITError+0x25c>)
 800305c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003062:	4618      	mov	r0, r3
 8003064:	f7fe f996 	bl	8001394 <HAL_DMA_Abort_IT>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 8089 	beq.w	8003182 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003092:	4610      	mov	r0, r2
 8003094:	4798      	blx	r3
 8003096:	e074      	b.n	8003182 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	4a59      	ldr	r2, [pc, #356]	; (8003204 <I2C_ITError+0x25c>)
 800309e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7fe f975 	bl	8001394 <HAL_DMA_Abort_IT>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d068      	beq.n	8003182 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ba:	2b40      	cmp	r3, #64	; 0x40
 80030bc:	d10b      	bne.n	80030d6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0201 	bic.w	r2, r2, #1
 80030e4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2220      	movs	r2, #32
 80030ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030f8:	4610      	mov	r0, r2
 80030fa:	4798      	blx	r3
 80030fc:	e041      	b.n	8003182 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b60      	cmp	r3, #96	; 0x60
 8003108:	d125      	bne.n	8003156 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003122:	2b40      	cmp	r3, #64	; 0x40
 8003124:	d10b      	bne.n	800313e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0201 	bic.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7fe ff41 	bl	8001fd6 <HAL_I2C_AbortCpltCallback>
 8003154:	e015      	b.n	8003182 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003160:	2b40      	cmp	r3, #64	; 0x40
 8003162:	d10b      	bne.n	800317c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7fe ff20 	bl	8001fc2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10e      	bne.n	80031b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003198:	2b00      	cmp	r3, #0
 800319a:	d109      	bne.n	80031b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d104      	bne.n	80031b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d007      	beq.n	80031c0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031be:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d113      	bne.n	80031fc <I2C_ITError+0x254>
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	2b28      	cmp	r3, #40	; 0x28
 80031d8:	d110      	bne.n	80031fc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a0a      	ldr	r2, [pc, #40]	; (8003208 <I2C_ITError+0x260>)
 80031de:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fe fec5 	bl	8001f86 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80031fc:	bf00      	nop
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	08003311 	.word	0x08003311
 8003208:	ffff0000 	.word	0xffff0000

0800320c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b088      	sub	sp, #32
 8003210:	af02      	add	r7, sp, #8
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	607a      	str	r2, [r7, #4]
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	460b      	mov	r3, r1
 800321a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2b08      	cmp	r3, #8
 8003226:	d006      	beq.n	8003236 <I2C_MasterRequestWrite+0x2a>
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d003      	beq.n	8003236 <I2C_MasterRequestWrite+0x2a>
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003234:	d108      	bne.n	8003248 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	e00b      	b.n	8003260 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	2b12      	cmp	r3, #18
 800324e:	d107      	bne.n	8003260 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800325e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 f8f7 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00d      	beq.n	8003294 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003286:	d103      	bne.n	8003290 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800328e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e035      	b.n	8003300 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800329c:	d108      	bne.n	80032b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800329e:	897b      	ldrh	r3, [r7, #10]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	461a      	mov	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032ac:	611a      	str	r2, [r3, #16]
 80032ae:	e01b      	b.n	80032e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032b0:	897b      	ldrh	r3, [r7, #10]
 80032b2:	11db      	asrs	r3, r3, #7
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	f003 0306 	and.w	r3, r3, #6
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f063 030f 	orn	r3, r3, #15
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	490e      	ldr	r1, [pc, #56]	; (8003308 <I2C_MasterRequestWrite+0xfc>)
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 f940 	bl	8003554 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e010      	b.n	8003300 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032de:	897b      	ldrh	r3, [r7, #10]
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	4907      	ldr	r1, [pc, #28]	; (800330c <I2C_MasterRequestWrite+0x100>)
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f930 	bl	8003554 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	00010008 	.word	0x00010008
 800330c:	00010002 	.word	0x00010002

08003310 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003320:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003328:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800332a:	4b4b      	ldr	r3, [pc, #300]	; (8003458 <I2C_DMAAbort+0x148>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	08db      	lsrs	r3, r3, #3
 8003330:	4a4a      	ldr	r2, [pc, #296]	; (800345c <I2C_DMAAbort+0x14c>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	0a1a      	lsrs	r2, r3, #8
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	00da      	lsls	r2, r3, #3
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f043 0220 	orr.w	r2, r3, #32
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003356:	e00a      	b.n	800336e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	3b01      	subs	r3, #1
 800335c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800336c:	d0ea      	beq.n	8003344 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337a:	2200      	movs	r2, #0
 800337c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338a:	2200      	movs	r2, #0
 800338c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800339c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2200      	movs	r2, #0
 80033a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b0:	2200      	movs	r2, #0
 80033b2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	2200      	movs	r2, #0
 80033c2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0201 	bic.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b60      	cmp	r3, #96	; 0x60
 80033de:	d10e      	bne.n	80033fe <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2200      	movs	r2, #0
 80033f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80033f6:	6978      	ldr	r0, [r7, #20]
 80033f8:	f7fe fded 	bl	8001fd6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80033fc:	e027      	b.n	800344e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033fe:	7cfb      	ldrb	r3, [r7, #19]
 8003400:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003404:	2b28      	cmp	r3, #40	; 0x28
 8003406:	d117      	bne.n	8003438 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003426:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	2200      	movs	r2, #0
 800342c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2228      	movs	r2, #40	; 0x28
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003436:	e007      	b.n	8003448 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003448:	6978      	ldr	r0, [r7, #20]
 800344a:	f7fe fdba 	bl	8001fc2 <HAL_I2C_ErrorCallback>
}
 800344e:	bf00      	nop
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000000 	.word	0x20000000
 800345c:	14f8b589 	.word	0x14f8b589

08003460 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	4613      	mov	r3, r2
 800346e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003470:	e048      	b.n	8003504 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003478:	d044      	beq.n	8003504 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347a:	f7fd fe09 	bl	8001090 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d302      	bcc.n	8003490 <I2C_WaitOnFlagUntilTimeout+0x30>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d139      	bne.n	8003504 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	0c1b      	lsrs	r3, r3, #16
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b01      	cmp	r3, #1
 8003498:	d10d      	bne.n	80034b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	43da      	mvns	r2, r3
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	4013      	ands	r3, r2
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	bf0c      	ite	eq
 80034ac:	2301      	moveq	r3, #1
 80034ae:	2300      	movne	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	461a      	mov	r2, r3
 80034b4:	e00c      	b.n	80034d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	43da      	mvns	r2, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	4013      	ands	r3, r2
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	bf0c      	ite	eq
 80034c8:	2301      	moveq	r3, #1
 80034ca:	2300      	movne	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	461a      	mov	r2, r3
 80034d0:	79fb      	ldrb	r3, [r7, #7]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d116      	bne.n	8003504 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	f043 0220 	orr.w	r2, r3, #32
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e023      	b.n	800354c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	0c1b      	lsrs	r3, r3, #16
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b01      	cmp	r3, #1
 800350c:	d10d      	bne.n	800352a <I2C_WaitOnFlagUntilTimeout+0xca>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	43da      	mvns	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	4013      	ands	r3, r2
 800351a:	b29b      	uxth	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	bf0c      	ite	eq
 8003520:	2301      	moveq	r3, #1
 8003522:	2300      	movne	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	461a      	mov	r2, r3
 8003528:	e00c      	b.n	8003544 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	43da      	mvns	r2, r3
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	4013      	ands	r3, r2
 8003536:	b29b      	uxth	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	bf0c      	ite	eq
 800353c:	2301      	moveq	r3, #1
 800353e:	2300      	movne	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	461a      	mov	r2, r3
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	429a      	cmp	r2, r3
 8003548:	d093      	beq.n	8003472 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003562:	e071      	b.n	8003648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003572:	d123      	bne.n	80035bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003582:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800358c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	f043 0204 	orr.w	r2, r3, #4
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e067      	b.n	800368c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035c2:	d041      	beq.n	8003648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c4:	f7fd fd64 	bl	8001090 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d302      	bcc.n	80035da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d136      	bne.n	8003648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	0c1b      	lsrs	r3, r3, #16
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d10c      	bne.n	80035fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	43da      	mvns	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4013      	ands	r3, r2
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	bf14      	ite	ne
 80035f6:	2301      	movne	r3, #1
 80035f8:	2300      	moveq	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	e00b      	b.n	8003616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	43da      	mvns	r2, r3
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	4013      	ands	r3, r2
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	bf14      	ite	ne
 8003610:	2301      	movne	r3, #1
 8003612:	2300      	moveq	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d016      	beq.n	8003648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	f043 0220 	orr.w	r2, r3, #32
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e021      	b.n	800368c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	0c1b      	lsrs	r3, r3, #16
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b01      	cmp	r3, #1
 8003650:	d10c      	bne.n	800366c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	43da      	mvns	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4013      	ands	r3, r2
 800365e:	b29b      	uxth	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf14      	ite	ne
 8003664:	2301      	movne	r3, #1
 8003666:	2300      	moveq	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	e00b      	b.n	8003684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	43da      	mvns	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4013      	ands	r3, r2
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	bf14      	ite	ne
 800367e:	2301      	movne	r3, #1
 8003680:	2300      	moveq	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	f47f af6d 	bne.w	8003564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036a0:	e034      	b.n	800370c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f8b8 	bl	8003818 <I2C_IsAcknowledgeFailed>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e034      	b.n	800371c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036b8:	d028      	beq.n	800370c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ba:	f7fd fce9 	bl	8001090 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d302      	bcc.n	80036d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d11d      	bne.n	800370c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036da:	2b80      	cmp	r3, #128	; 0x80
 80036dc:	d016      	beq.n	800370c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	f043 0220 	orr.w	r2, r3, #32
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e007      	b.n	800371c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003716:	2b80      	cmp	r3, #128	; 0x80
 8003718:	d1c3      	bne.n	80036a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003730:	e034      	b.n	800379c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 f870 	bl	8003818 <I2C_IsAcknowledgeFailed>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e034      	b.n	80037ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003748:	d028      	beq.n	800379c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800374a:	f7fd fca1 	bl	8001090 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	429a      	cmp	r2, r3
 8003758:	d302      	bcc.n	8003760 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d11d      	bne.n	800379c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b04      	cmp	r3, #4
 800376c:	d016      	beq.n	800379c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	f043 0220 	orr.w	r2, r3, #32
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e007      	b.n	80037ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d1c3      	bne.n	8003732 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80037bc:	2300      	movs	r3, #0
 80037be:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80037c0:	4b13      	ldr	r3, [pc, #76]	; (8003810 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	08db      	lsrs	r3, r3, #3
 80037c6:	4a13      	ldr	r2, [pc, #76]	; (8003814 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80037c8:	fba2 2303 	umull	r2, r3, r2, r3
 80037cc:	0a1a      	lsrs	r2, r3, #8
 80037ce:	4613      	mov	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	3b01      	subs	r3, #1
 80037da:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d107      	bne.n	80037f2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f043 0220 	orr.w	r2, r3, #32
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e008      	b.n	8003804 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003800:	d0e9      	beq.n	80037d6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	20000000 	.word	0x20000000
 8003814:	14f8b589 	.word	0x14f8b589

08003818 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800382e:	d11b      	bne.n	8003868 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003838:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	f043 0204 	orr.w	r2, r3, #4
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e000      	b.n	800386a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003886:	d103      	bne.n	8003890 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800388e:	e007      	b.n	80038a0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003898:	d102      	bne.n	80038a0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2208      	movs	r2, #8
 800389e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e267      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d075      	beq.n	80039b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038ca:	4b88      	ldr	r3, [pc, #544]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d00c      	beq.n	80038f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038d6:	4b85      	ldr	r3, [pc, #532]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038de:	2b08      	cmp	r3, #8
 80038e0:	d112      	bne.n	8003908 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038e2:	4b82      	ldr	r3, [pc, #520]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ee:	d10b      	bne.n	8003908 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f0:	4b7e      	ldr	r3, [pc, #504]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d05b      	beq.n	80039b4 <HAL_RCC_OscConfig+0x108>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d157      	bne.n	80039b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e242      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003910:	d106      	bne.n	8003920 <HAL_RCC_OscConfig+0x74>
 8003912:	4b76      	ldr	r3, [pc, #472]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a75      	ldr	r2, [pc, #468]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	e01d      	b.n	800395c <HAL_RCC_OscConfig+0xb0>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003928:	d10c      	bne.n	8003944 <HAL_RCC_OscConfig+0x98>
 800392a:	4b70      	ldr	r3, [pc, #448]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a6f      	ldr	r2, [pc, #444]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	4b6d      	ldr	r3, [pc, #436]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a6c      	ldr	r2, [pc, #432]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 800393c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e00b      	b.n	800395c <HAL_RCC_OscConfig+0xb0>
 8003944:	4b69      	ldr	r3, [pc, #420]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a68      	ldr	r2, [pc, #416]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 800394a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	4b66      	ldr	r3, [pc, #408]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a65      	ldr	r2, [pc, #404]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800395a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d013      	beq.n	800398c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003964:	f7fd fb94 	bl	8001090 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800396c:	f7fd fb90 	bl	8001090 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b64      	cmp	r3, #100	; 0x64
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e207      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397e:	4b5b      	ldr	r3, [pc, #364]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0xc0>
 800398a:	e014      	b.n	80039b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398c:	f7fd fb80 	bl	8001090 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003994:	f7fd fb7c 	bl	8001090 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b64      	cmp	r3, #100	; 0x64
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e1f3      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a6:	4b51      	ldr	r3, [pc, #324]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0xe8>
 80039b2:	e000      	b.n	80039b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d063      	beq.n	8003a8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039c2:	4b4a      	ldr	r3, [pc, #296]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 030c 	and.w	r3, r3, #12
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00b      	beq.n	80039e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ce:	4b47      	ldr	r3, [pc, #284]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d11c      	bne.n	8003a14 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039da:	4b44      	ldr	r3, [pc, #272]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d116      	bne.n	8003a14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039e6:	4b41      	ldr	r3, [pc, #260]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d005      	beq.n	80039fe <HAL_RCC_OscConfig+0x152>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d001      	beq.n	80039fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e1c7      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fe:	4b3b      	ldr	r3, [pc, #236]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	4937      	ldr	r1, [pc, #220]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a12:	e03a      	b.n	8003a8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d020      	beq.n	8003a5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a1c:	4b34      	ldr	r3, [pc, #208]	; (8003af0 <HAL_RCC_OscConfig+0x244>)
 8003a1e:	2201      	movs	r2, #1
 8003a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a22:	f7fd fb35 	bl	8001090 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a2a:	f7fd fb31 	bl	8001090 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e1a8      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a3c:	4b2b      	ldr	r3, [pc, #172]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0f0      	beq.n	8003a2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a48:	4b28      	ldr	r3, [pc, #160]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	4925      	ldr	r1, [pc, #148]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	600b      	str	r3, [r1, #0]
 8003a5c:	e015      	b.n	8003a8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a5e:	4b24      	ldr	r3, [pc, #144]	; (8003af0 <HAL_RCC_OscConfig+0x244>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a64:	f7fd fb14 	bl	8001090 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a6c:	f7fd fb10 	bl	8001090 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e187      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a7e:	4b1b      	ldr	r3, [pc, #108]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f0      	bne.n	8003a6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d036      	beq.n	8003b04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d016      	beq.n	8003acc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a9e:	4b15      	ldr	r3, [pc, #84]	; (8003af4 <HAL_RCC_OscConfig+0x248>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa4:	f7fd faf4 	bl	8001090 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aac:	f7fd faf0 	bl	8001090 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e167      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003abe:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCC_OscConfig+0x200>
 8003aca:	e01b      	b.n	8003b04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003acc:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <HAL_RCC_OscConfig+0x248>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad2:	f7fd fadd 	bl	8001090 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad8:	e00e      	b.n	8003af8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ada:	f7fd fad9 	bl	8001090 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d907      	bls.n	8003af8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e150      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
 8003aec:	40023800 	.word	0x40023800
 8003af0:	42470000 	.word	0x42470000
 8003af4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af8:	4b88      	ldr	r3, [pc, #544]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1ea      	bne.n	8003ada <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 8097 	beq.w	8003c40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b12:	2300      	movs	r3, #0
 8003b14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b16:	4b81      	ldr	r3, [pc, #516]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10f      	bne.n	8003b42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b22:	2300      	movs	r3, #0
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	4b7d      	ldr	r3, [pc, #500]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	4a7c      	ldr	r2, [pc, #496]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b30:	6413      	str	r3, [r2, #64]	; 0x40
 8003b32:	4b7a      	ldr	r3, [pc, #488]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	60bb      	str	r3, [r7, #8]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b42:	4b77      	ldr	r3, [pc, #476]	; (8003d20 <HAL_RCC_OscConfig+0x474>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d118      	bne.n	8003b80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b4e:	4b74      	ldr	r3, [pc, #464]	; (8003d20 <HAL_RCC_OscConfig+0x474>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a73      	ldr	r2, [pc, #460]	; (8003d20 <HAL_RCC_OscConfig+0x474>)
 8003b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b5a:	f7fd fa99 	bl	8001090 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b62:	f7fd fa95 	bl	8001090 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e10c      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b74:	4b6a      	ldr	r3, [pc, #424]	; (8003d20 <HAL_RCC_OscConfig+0x474>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d106      	bne.n	8003b96 <HAL_RCC_OscConfig+0x2ea>
 8003b88:	4b64      	ldr	r3, [pc, #400]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8c:	4a63      	ldr	r2, [pc, #396]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	6713      	str	r3, [r2, #112]	; 0x70
 8003b94:	e01c      	b.n	8003bd0 <HAL_RCC_OscConfig+0x324>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	2b05      	cmp	r3, #5
 8003b9c:	d10c      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x30c>
 8003b9e:	4b5f      	ldr	r3, [pc, #380]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba2:	4a5e      	ldr	r2, [pc, #376]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003ba4:	f043 0304 	orr.w	r3, r3, #4
 8003ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8003baa:	4b5c      	ldr	r3, [pc, #368]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bae:	4a5b      	ldr	r2, [pc, #364]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb6:	e00b      	b.n	8003bd0 <HAL_RCC_OscConfig+0x324>
 8003bb8:	4b58      	ldr	r3, [pc, #352]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbc:	4a57      	ldr	r2, [pc, #348]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003bbe:	f023 0301 	bic.w	r3, r3, #1
 8003bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc4:	4b55      	ldr	r3, [pc, #340]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc8:	4a54      	ldr	r2, [pc, #336]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003bca:	f023 0304 	bic.w	r3, r3, #4
 8003bce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d015      	beq.n	8003c04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd8:	f7fd fa5a 	bl	8001090 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bde:	e00a      	b.n	8003bf6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be0:	f7fd fa56 	bl	8001090 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e0cb      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf6:	4b49      	ldr	r3, [pc, #292]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0ee      	beq.n	8003be0 <HAL_RCC_OscConfig+0x334>
 8003c02:	e014      	b.n	8003c2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c04:	f7fd fa44 	bl	8001090 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c0a:	e00a      	b.n	8003c22 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0c:	f7fd fa40 	bl	8001090 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e0b5      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c22:	4b3e      	ldr	r3, [pc, #248]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1ee      	bne.n	8003c0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c2e:	7dfb      	ldrb	r3, [r7, #23]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d105      	bne.n	8003c40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c34:	4b39      	ldr	r3, [pc, #228]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	4a38      	ldr	r2, [pc, #224]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80a1 	beq.w	8003d8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c4a:	4b34      	ldr	r3, [pc, #208]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 030c 	and.w	r3, r3, #12
 8003c52:	2b08      	cmp	r3, #8
 8003c54:	d05c      	beq.n	8003d10 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d141      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c5e:	4b31      	ldr	r3, [pc, #196]	; (8003d24 <HAL_RCC_OscConfig+0x478>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c64:	f7fd fa14 	bl	8001090 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c6c:	f7fd fa10 	bl	8001090 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e087      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7e:	4b27      	ldr	r3, [pc, #156]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69da      	ldr	r2, [r3, #28]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	019b      	lsls	r3, r3, #6
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	085b      	lsrs	r3, r3, #1
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	041b      	lsls	r3, r3, #16
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	061b      	lsls	r3, r3, #24
 8003cae:	491b      	ldr	r1, [pc, #108]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cb4:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <HAL_RCC_OscConfig+0x478>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cba:	f7fd f9e9 	bl	8001090 <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc2:	f7fd f9e5 	bl	8001090 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e05c      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd4:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0f0      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x416>
 8003ce0:	e054      	b.n	8003d8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce2:	4b10      	ldr	r3, [pc, #64]	; (8003d24 <HAL_RCC_OscConfig+0x478>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce8:	f7fd f9d2 	bl	8001090 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf0:	f7fd f9ce 	bl	8001090 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e045      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d02:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f0      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x444>
 8003d0e:	e03d      	b.n	8003d8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d107      	bne.n	8003d28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e038      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	40007000 	.word	0x40007000
 8003d24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d28:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <HAL_RCC_OscConfig+0x4ec>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d028      	beq.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d121      	bne.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d11a      	bne.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d58:	4013      	ands	r3, r2
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d111      	bne.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6e:	085b      	lsrs	r3, r3, #1
 8003d70:	3b01      	subs	r3, #1
 8003d72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d107      	bne.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d001      	beq.n	8003d8c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e000      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3718      	adds	r7, #24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40023800 	.word	0x40023800

08003d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0cc      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003db0:	4b68      	ldr	r3, [pc, #416]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d90c      	bls.n	8003dd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dbe:	4b65      	ldr	r3, [pc, #404]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc6:	4b63      	ldr	r3, [pc, #396]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0b8      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d020      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003df0:	4b59      	ldr	r3, [pc, #356]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	4a58      	ldr	r2, [pc, #352]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dfa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e08:	4b53      	ldr	r3, [pc, #332]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	4a52      	ldr	r2, [pc, #328]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e14:	4b50      	ldr	r3, [pc, #320]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	494d      	ldr	r1, [pc, #308]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d044      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d107      	bne.n	8003e4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3a:	4b47      	ldr	r3, [pc, #284]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d119      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e07f      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d003      	beq.n	8003e5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d107      	bne.n	8003e6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e5a:	4b3f      	ldr	r3, [pc, #252]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e06f      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6a:	4b3b      	ldr	r3, [pc, #236]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e067      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e7a:	4b37      	ldr	r3, [pc, #220]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f023 0203 	bic.w	r2, r3, #3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	4934      	ldr	r1, [pc, #208]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e8c:	f7fd f900 	bl	8001090 <HAL_GetTick>
 8003e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e92:	e00a      	b.n	8003eaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e94:	f7fd f8fc 	bl	8001090 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e04f      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eaa:	4b2b      	ldr	r3, [pc, #172]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 020c 	and.w	r2, r3, #12
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d1eb      	bne.n	8003e94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ebc:	4b25      	ldr	r3, [pc, #148]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d20c      	bcs.n	8003ee4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eca:	4b22      	ldr	r3, [pc, #136]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed2:	4b20      	ldr	r3, [pc, #128]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e032      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d008      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ef0:	4b19      	ldr	r3, [pc, #100]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4916      	ldr	r1, [pc, #88]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d009      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f0e:	4b12      	ldr	r3, [pc, #72]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	490e      	ldr	r1, [pc, #56]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f22:	f000 f821 	bl	8003f68 <HAL_RCC_GetSysClockFreq>
 8003f26:	4602      	mov	r2, r0
 8003f28:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	091b      	lsrs	r3, r3, #4
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	490a      	ldr	r1, [pc, #40]	; (8003f5c <HAL_RCC_ClockConfig+0x1c0>)
 8003f34:	5ccb      	ldrb	r3, [r1, r3]
 8003f36:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3a:	4a09      	ldr	r2, [pc, #36]	; (8003f60 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003f3e:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <HAL_RCC_ClockConfig+0x1c8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fc ff8c 	bl	8000e60 <HAL_InitTick>

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40023c00 	.word	0x40023c00
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	080089f8 	.word	0x080089f8
 8003f60:	20000000 	.word	0x20000000
 8003f64:	20000004 	.word	0x20000004

08003f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f6c:	b090      	sub	sp, #64	; 0x40
 8003f6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f80:	4b59      	ldr	r3, [pc, #356]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 030c 	and.w	r3, r3, #12
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d00d      	beq.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x40>
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	f200 80a1 	bhi.w	80040d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <HAL_RCC_GetSysClockFreq+0x34>
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d003      	beq.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f9a:	e09b      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f9c:	4b53      	ldr	r3, [pc, #332]	; (80040ec <HAL_RCC_GetSysClockFreq+0x184>)
 8003f9e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fa0:	e09b      	b.n	80040da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fa2:	4b53      	ldr	r3, [pc, #332]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fa4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fa6:	e098      	b.n	80040da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fa8:	4b4f      	ldr	r3, [pc, #316]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fb0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fb2:	4b4d      	ldr	r3, [pc, #308]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d028      	beq.n	8004010 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fbe:	4b4a      	ldr	r3, [pc, #296]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	099b      	lsrs	r3, r3, #6
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	623b      	str	r3, [r7, #32]
 8003fc8:	627a      	str	r2, [r7, #36]	; 0x24
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	4b47      	ldr	r3, [pc, #284]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fd4:	fb03 f201 	mul.w	r2, r3, r1
 8003fd8:	2300      	movs	r3, #0
 8003fda:	fb00 f303 	mul.w	r3, r0, r3
 8003fde:	4413      	add	r3, r2
 8003fe0:	4a43      	ldr	r2, [pc, #268]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fe2:	fba0 1202 	umull	r1, r2, r0, r2
 8003fe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fe8:	460a      	mov	r2, r1
 8003fea:	62ba      	str	r2, [r7, #40]	; 0x28
 8003fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fee:	4413      	add	r3, r2
 8003ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	61bb      	str	r3, [r7, #24]
 8003ff8:	61fa      	str	r2, [r7, #28]
 8003ffa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ffe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004002:	f7fc f8e5 	bl	80001d0 <__aeabi_uldivmod>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4613      	mov	r3, r2
 800400c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800400e:	e053      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004010:	4b35      	ldr	r3, [pc, #212]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	099b      	lsrs	r3, r3, #6
 8004016:	2200      	movs	r2, #0
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	617a      	str	r2, [r7, #20]
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004022:	f04f 0b00 	mov.w	fp, #0
 8004026:	4652      	mov	r2, sl
 8004028:	465b      	mov	r3, fp
 800402a:	f04f 0000 	mov.w	r0, #0
 800402e:	f04f 0100 	mov.w	r1, #0
 8004032:	0159      	lsls	r1, r3, #5
 8004034:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004038:	0150      	lsls	r0, r2, #5
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	ebb2 080a 	subs.w	r8, r2, sl
 8004042:	eb63 090b 	sbc.w	r9, r3, fp
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004052:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004056:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800405a:	ebb2 0408 	subs.w	r4, r2, r8
 800405e:	eb63 0509 	sbc.w	r5, r3, r9
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	f04f 0300 	mov.w	r3, #0
 800406a:	00eb      	lsls	r3, r5, #3
 800406c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004070:	00e2      	lsls	r2, r4, #3
 8004072:	4614      	mov	r4, r2
 8004074:	461d      	mov	r5, r3
 8004076:	eb14 030a 	adds.w	r3, r4, sl
 800407a:	603b      	str	r3, [r7, #0]
 800407c:	eb45 030b 	adc.w	r3, r5, fp
 8004080:	607b      	str	r3, [r7, #4]
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800408e:	4629      	mov	r1, r5
 8004090:	028b      	lsls	r3, r1, #10
 8004092:	4621      	mov	r1, r4
 8004094:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004098:	4621      	mov	r1, r4
 800409a:	028a      	lsls	r2, r1, #10
 800409c:	4610      	mov	r0, r2
 800409e:	4619      	mov	r1, r3
 80040a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a2:	2200      	movs	r2, #0
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	60fa      	str	r2, [r7, #12]
 80040a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040ac:	f7fc f890 	bl	80001d0 <__aeabi_uldivmod>
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	4613      	mov	r3, r2
 80040b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80040b8:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	0c1b      	lsrs	r3, r3, #16
 80040be:	f003 0303 	and.w	r3, r3, #3
 80040c2:	3301      	adds	r3, #1
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80040c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040d2:	e002      	b.n	80040da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040d4:	4b05      	ldr	r3, [pc, #20]	; (80040ec <HAL_RCC_GetSysClockFreq+0x184>)
 80040d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3740      	adds	r7, #64	; 0x40
 80040e0:	46bd      	mov	sp, r7
 80040e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040e6:	bf00      	nop
 80040e8:	40023800 	.word	0x40023800
 80040ec:	00f42400 	.word	0x00f42400
 80040f0:	017d7840 	.word	0x017d7840

080040f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040f8:	4b03      	ldr	r3, [pc, #12]	; (8004108 <HAL_RCC_GetHCLKFreq+0x14>)
 80040fa:	681b      	ldr	r3, [r3, #0]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	20000000 	.word	0x20000000

0800410c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004110:	f7ff fff0 	bl	80040f4 <HAL_RCC_GetHCLKFreq>
 8004114:	4602      	mov	r2, r0
 8004116:	4b05      	ldr	r3, [pc, #20]	; (800412c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	0a9b      	lsrs	r3, r3, #10
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	4903      	ldr	r1, [pc, #12]	; (8004130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004122:	5ccb      	ldrb	r3, [r1, r3]
 8004124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004128:	4618      	mov	r0, r3
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40023800 	.word	0x40023800
 8004130:	08008a08 	.word	0x08008a08

08004134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004138:	f7ff ffdc 	bl	80040f4 <HAL_RCC_GetHCLKFreq>
 800413c:	4602      	mov	r2, r0
 800413e:	4b05      	ldr	r3, [pc, #20]	; (8004154 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	0b5b      	lsrs	r3, r3, #13
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	4903      	ldr	r1, [pc, #12]	; (8004158 <HAL_RCC_GetPCLK2Freq+0x24>)
 800414a:	5ccb      	ldrb	r3, [r1, r3]
 800414c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004150:	4618      	mov	r0, r3
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40023800 	.word	0x40023800
 8004158:	08008a08 	.word	0x08008a08

0800415c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	220f      	movs	r2, #15
 800416a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800416c:	4b12      	ldr	r3, [pc, #72]	; (80041b8 <HAL_RCC_GetClockConfig+0x5c>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 0203 	and.w	r2, r3, #3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004178:	4b0f      	ldr	r3, [pc, #60]	; (80041b8 <HAL_RCC_GetClockConfig+0x5c>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004184:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <HAL_RCC_GetClockConfig+0x5c>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004190:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <HAL_RCC_GetClockConfig+0x5c>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	08db      	lsrs	r3, r3, #3
 8004196:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800419e:	4b07      	ldr	r3, [pc, #28]	; (80041bc <HAL_RCC_GetClockConfig+0x60>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0207 	and.w	r2, r3, #7
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	601a      	str	r2, [r3, #0]
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40023800 	.word	0x40023800
 80041bc:	40023c00 	.word	0x40023c00

080041c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e041      	b.n	8004256 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d106      	bne.n	80041ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f839 	bl	800425e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3304      	adds	r3, #4
 80041fc:	4619      	mov	r1, r3
 80041fe:	4610      	mov	r0, r2
 8004200:	f000 f9c0 	bl	8004584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
	...

08004274 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b01      	cmp	r3, #1
 8004286:	d001      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e04e      	b.n	800432a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2202      	movs	r2, #2
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a23      	ldr	r2, [pc, #140]	; (8004338 <HAL_TIM_Base_Start_IT+0xc4>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d022      	beq.n	80042f4 <HAL_TIM_Base_Start_IT+0x80>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b6:	d01d      	beq.n	80042f4 <HAL_TIM_Base_Start_IT+0x80>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a1f      	ldr	r2, [pc, #124]	; (800433c <HAL_TIM_Base_Start_IT+0xc8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d018      	beq.n	80042f4 <HAL_TIM_Base_Start_IT+0x80>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a1e      	ldr	r2, [pc, #120]	; (8004340 <HAL_TIM_Base_Start_IT+0xcc>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d013      	beq.n	80042f4 <HAL_TIM_Base_Start_IT+0x80>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a1c      	ldr	r2, [pc, #112]	; (8004344 <HAL_TIM_Base_Start_IT+0xd0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00e      	beq.n	80042f4 <HAL_TIM_Base_Start_IT+0x80>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a1b      	ldr	r2, [pc, #108]	; (8004348 <HAL_TIM_Base_Start_IT+0xd4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d009      	beq.n	80042f4 <HAL_TIM_Base_Start_IT+0x80>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a19      	ldr	r2, [pc, #100]	; (800434c <HAL_TIM_Base_Start_IT+0xd8>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d004      	beq.n	80042f4 <HAL_TIM_Base_Start_IT+0x80>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a18      	ldr	r2, [pc, #96]	; (8004350 <HAL_TIM_Base_Start_IT+0xdc>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d111      	bne.n	8004318 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2b06      	cmp	r3, #6
 8004304:	d010      	beq.n	8004328 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f042 0201 	orr.w	r2, r2, #1
 8004314:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004316:	e007      	b.n	8004328 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0201 	orr.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	40010000 	.word	0x40010000
 800433c:	40000400 	.word	0x40000400
 8004340:	40000800 	.word	0x40000800
 8004344:	40000c00 	.word	0x40000c00
 8004348:	40010400 	.word	0x40010400
 800434c:	40014000 	.word	0x40014000
 8004350:	40001800 	.word	0x40001800

08004354 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d020      	beq.n	80043b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d01b      	beq.n	80043b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f06f 0202 	mvn.w	r2, #2
 8004388:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f8d2 	bl	8004548 <HAL_TIM_IC_CaptureCallback>
 80043a4:	e005      	b.n	80043b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f8c4 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f8d5 	bl	800455c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d020      	beq.n	8004404 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d01b      	beq.n	8004404 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f06f 0204 	mvn.w	r2, #4
 80043d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2202      	movs	r2, #2
 80043da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f8ac 	bl	8004548 <HAL_TIM_IC_CaptureCallback>
 80043f0:	e005      	b.n	80043fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f89e 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f8af 	bl	800455c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b00      	cmp	r3, #0
 800440c:	d020      	beq.n	8004450 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d01b      	beq.n	8004450 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f06f 0208 	mvn.w	r2, #8
 8004420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2204      	movs	r2, #4
 8004426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f886 	bl	8004548 <HAL_TIM_IC_CaptureCallback>
 800443c:	e005      	b.n	800444a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f878 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f889 	bl	800455c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f003 0310 	and.w	r3, r3, #16
 8004456:	2b00      	cmp	r3, #0
 8004458:	d020      	beq.n	800449c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f003 0310 	and.w	r3, r3, #16
 8004460:	2b00      	cmp	r3, #0
 8004462:	d01b      	beq.n	800449c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0210 	mvn.w	r2, #16
 800446c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2208      	movs	r2, #8
 8004472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f860 	bl	8004548 <HAL_TIM_IC_CaptureCallback>
 8004488:	e005      	b.n	8004496 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f852 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f863 	bl	800455c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00c      	beq.n	80044c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d007      	beq.n	80044c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f06f 0201 	mvn.w	r2, #1
 80044b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fc fbec 	bl	8000c98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00c      	beq.n	80044e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d007      	beq.n	80044e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f906 	bl	80046f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00c      	beq.n	8004508 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d007      	beq.n	8004508 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f834 	bl	8004570 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00c      	beq.n	800452c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d007      	beq.n	800452c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f06f 0220 	mvn.w	r2, #32
 8004524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f8d8 	bl	80046dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800452c:	bf00      	nop
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a46      	ldr	r2, [pc, #280]	; (80046b0 <TIM_Base_SetConfig+0x12c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d013      	beq.n	80045c4 <TIM_Base_SetConfig+0x40>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a2:	d00f      	beq.n	80045c4 <TIM_Base_SetConfig+0x40>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a43      	ldr	r2, [pc, #268]	; (80046b4 <TIM_Base_SetConfig+0x130>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00b      	beq.n	80045c4 <TIM_Base_SetConfig+0x40>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a42      	ldr	r2, [pc, #264]	; (80046b8 <TIM_Base_SetConfig+0x134>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d007      	beq.n	80045c4 <TIM_Base_SetConfig+0x40>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a41      	ldr	r2, [pc, #260]	; (80046bc <TIM_Base_SetConfig+0x138>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d003      	beq.n	80045c4 <TIM_Base_SetConfig+0x40>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a40      	ldr	r2, [pc, #256]	; (80046c0 <TIM_Base_SetConfig+0x13c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d108      	bne.n	80045d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a35      	ldr	r2, [pc, #212]	; (80046b0 <TIM_Base_SetConfig+0x12c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d02b      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e4:	d027      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a32      	ldr	r2, [pc, #200]	; (80046b4 <TIM_Base_SetConfig+0x130>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d023      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a31      	ldr	r2, [pc, #196]	; (80046b8 <TIM_Base_SetConfig+0x134>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d01f      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a30      	ldr	r2, [pc, #192]	; (80046bc <TIM_Base_SetConfig+0x138>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d01b      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a2f      	ldr	r2, [pc, #188]	; (80046c0 <TIM_Base_SetConfig+0x13c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d017      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a2e      	ldr	r2, [pc, #184]	; (80046c4 <TIM_Base_SetConfig+0x140>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d013      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a2d      	ldr	r2, [pc, #180]	; (80046c8 <TIM_Base_SetConfig+0x144>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00f      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a2c      	ldr	r2, [pc, #176]	; (80046cc <TIM_Base_SetConfig+0x148>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d00b      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a2b      	ldr	r2, [pc, #172]	; (80046d0 <TIM_Base_SetConfig+0x14c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d007      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a2a      	ldr	r2, [pc, #168]	; (80046d4 <TIM_Base_SetConfig+0x150>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d003      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a29      	ldr	r2, [pc, #164]	; (80046d8 <TIM_Base_SetConfig+0x154>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d108      	bne.n	8004648 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800463c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4313      	orrs	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a10      	ldr	r2, [pc, #64]	; (80046b0 <TIM_Base_SetConfig+0x12c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d003      	beq.n	800467c <TIM_Base_SetConfig+0xf8>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a12      	ldr	r2, [pc, #72]	; (80046c0 <TIM_Base_SetConfig+0x13c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d103      	bne.n	8004684 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b01      	cmp	r3, #1
 8004694:	d105      	bne.n	80046a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f023 0201 	bic.w	r2, r3, #1
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	611a      	str	r2, [r3, #16]
  }
}
 80046a2:	bf00      	nop
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40010000 	.word	0x40010000
 80046b4:	40000400 	.word	0x40000400
 80046b8:	40000800 	.word	0x40000800
 80046bc:	40000c00 	.word	0x40000c00
 80046c0:	40010400 	.word	0x40010400
 80046c4:	40014000 	.word	0x40014000
 80046c8:	40014400 	.word	0x40014400
 80046cc:	40014800 	.word	0x40014800
 80046d0:	40001800 	.word	0x40001800
 80046d4:	40001c00 	.word	0x40001c00
 80046d8:	40002000 	.word	0x40002000

080046dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e042      	b.n	800479c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d106      	bne.n	8004730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7fc fb48 	bl	8000dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2224      	movs	r2, #36	; 0x24
 8004734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004746:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fc85 	bl	8005058 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800475c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695a      	ldr	r2, [r3, #20]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800476c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800477c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b0ba      	sub	sp, #232	; 0xe8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80047e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10f      	bne.n	800480a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d009      	beq.n	800480a <HAL_UART_IRQHandler+0x66>
 80047f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fb69 	bl	8004eda <UART_Receive_IT>
      return;
 8004808:	e25b      	b.n	8004cc2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800480a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 80de 	beq.w	80049d0 <HAL_UART_IRQHandler+0x22c>
 8004814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d106      	bne.n	800482e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004824:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 80d1 	beq.w	80049d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800482e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00b      	beq.n	8004852 <HAL_UART_IRQHandler+0xae>
 800483a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800483e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484a:	f043 0201 	orr.w	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004856:	f003 0304 	and.w	r3, r3, #4
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00b      	beq.n	8004876 <HAL_UART_IRQHandler+0xd2>
 800485e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d005      	beq.n	8004876 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486e:	f043 0202 	orr.w	r2, r3, #2
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00b      	beq.n	800489a <HAL_UART_IRQHandler+0xf6>
 8004882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004892:	f043 0204 	orr.w	r2, r3, #4
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800489a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d011      	beq.n	80048ca <HAL_UART_IRQHandler+0x126>
 80048a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d105      	bne.n	80048be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80048b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d005      	beq.n	80048ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c2:	f043 0208 	orr.w	r2, r3, #8
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 81f2 	beq.w	8004cb8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d8:	f003 0320 	and.w	r3, r3, #32
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d008      	beq.n	80048f2 <HAL_UART_IRQHandler+0x14e>
 80048e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048e4:	f003 0320 	and.w	r3, r3, #32
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 faf4 	bl	8004eda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fc:	2b40      	cmp	r3, #64	; 0x40
 80048fe:	bf0c      	ite	eq
 8004900:	2301      	moveq	r3, #1
 8004902:	2300      	movne	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d103      	bne.n	800491e <HAL_UART_IRQHandler+0x17a>
 8004916:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800491a:	2b00      	cmp	r3, #0
 800491c:	d04f      	beq.n	80049be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f9fc 	bl	8004d1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492e:	2b40      	cmp	r3, #64	; 0x40
 8004930:	d141      	bne.n	80049b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3314      	adds	r3, #20
 8004938:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004940:	e853 3f00 	ldrex	r3, [r3]
 8004944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004948:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800494c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004950:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3314      	adds	r3, #20
 800495a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800495e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004962:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800496a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800496e:	e841 2300 	strex	r3, r2, [r1]
 8004972:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004976:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1d9      	bne.n	8004932 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004982:	2b00      	cmp	r3, #0
 8004984:	d013      	beq.n	80049ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498a:	4a7e      	ldr	r2, [pc, #504]	; (8004b84 <HAL_UART_IRQHandler+0x3e0>)
 800498c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004992:	4618      	mov	r0, r3
 8004994:	f7fc fcfe 	bl	8001394 <HAL_DMA_Abort_IT>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d016      	beq.n	80049cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80049a8:	4610      	mov	r0, r2
 80049aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ac:	e00e      	b.n	80049cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f99e 	bl	8004cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b4:	e00a      	b.n	80049cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f99a 	bl	8004cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049bc:	e006      	b.n	80049cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f996 	bl	8004cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80049ca:	e175      	b.n	8004cb8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049cc:	bf00      	nop
    return;
 80049ce:	e173      	b.n	8004cb8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	f040 814f 	bne.w	8004c78 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80049da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049de:	f003 0310 	and.w	r3, r3, #16
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 8148 	beq.w	8004c78 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80049e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ec:	f003 0310 	and.w	r3, r3, #16
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 8141 	beq.w	8004c78 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049f6:	2300      	movs	r3, #0
 80049f8:	60bb      	str	r3, [r7, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	60bb      	str	r3, [r7, #8]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	60bb      	str	r3, [r7, #8]
 8004a0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a16:	2b40      	cmp	r3, #64	; 0x40
 8004a18:	f040 80b6 	bne.w	8004b88 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 8145 	beq.w	8004cbc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	f080 813e 	bcs.w	8004cbc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a52:	f000 8088 	beq.w	8004b66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	330c      	adds	r3, #12
 8004a5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	330c      	adds	r3, #12
 8004a7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a92:	e841 2300 	strex	r3, r2, [r1]
 8004a96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1d9      	bne.n	8004a56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3314      	adds	r3, #20
 8004aa8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ab2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ab4:	f023 0301 	bic.w	r3, r3, #1
 8004ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3314      	adds	r3, #20
 8004ac2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ac6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004aca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ace:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ad2:	e841 2300 	strex	r3, r2, [r1]
 8004ad6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ad8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1e1      	bne.n	8004aa2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	3314      	adds	r3, #20
 8004ae4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ae8:	e853 3f00 	ldrex	r3, [r3]
 8004aec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004aee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3314      	adds	r3, #20
 8004afe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b0a:	e841 2300 	strex	r3, r2, [r1]
 8004b0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1e3      	bne.n	8004ade <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	330c      	adds	r3, #12
 8004b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b2e:	e853 3f00 	ldrex	r3, [r3]
 8004b32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b36:	f023 0310 	bic.w	r3, r3, #16
 8004b3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	330c      	adds	r3, #12
 8004b44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004b48:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b50:	e841 2300 	strex	r3, r2, [r1]
 8004b54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1e3      	bne.n	8004b24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7fc fba7 	bl	80012b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f8c1 	bl	8004d04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b82:	e09b      	b.n	8004cbc <HAL_UART_IRQHandler+0x518>
 8004b84:	08004de3 	.word	0x08004de3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 808e 	beq.w	8004cc0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ba4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 8089 	beq.w	8004cc0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	330c      	adds	r3, #12
 8004bb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb8:	e853 3f00 	ldrex	r3, [r3]
 8004bbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	330c      	adds	r3, #12
 8004bce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004bd2:	647a      	str	r2, [r7, #68]	; 0x44
 8004bd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bda:	e841 2300 	strex	r3, r2, [r1]
 8004bde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1e3      	bne.n	8004bae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3314      	adds	r3, #20
 8004bec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	e853 3f00 	ldrex	r3, [r3]
 8004bf4:	623b      	str	r3, [r7, #32]
   return(result);
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	f023 0301 	bic.w	r3, r3, #1
 8004bfc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3314      	adds	r3, #20
 8004c06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c0a:	633a      	str	r2, [r7, #48]	; 0x30
 8004c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c12:	e841 2300 	strex	r3, r2, [r1]
 8004c16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1e3      	bne.n	8004be6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	330c      	adds	r3, #12
 8004c32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	e853 3f00 	ldrex	r3, [r3]
 8004c3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 0310 	bic.w	r3, r3, #16
 8004c42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	330c      	adds	r3, #12
 8004c4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004c50:	61fa      	str	r2, [r7, #28]
 8004c52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c54:	69b9      	ldr	r1, [r7, #24]
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	e841 2300 	strex	r3, r2, [r1]
 8004c5c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1e3      	bne.n	8004c2c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c6e:	4619      	mov	r1, r3
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f847 	bl	8004d04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c76:	e023      	b.n	8004cc0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d009      	beq.n	8004c98 <HAL_UART_IRQHandler+0x4f4>
 8004c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f8ba 	bl	8004e0a <UART_Transmit_IT>
    return;
 8004c96:	e014      	b.n	8004cc2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00e      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x51e>
 8004ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d008      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f8fa 	bl	8004eaa <UART_EndTransmit_IT>
    return;
 8004cb6:	e004      	b.n	8004cc2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004cb8:	bf00      	nop
 8004cba:	e002      	b.n	8004cc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004cbc:	bf00      	nop
 8004cbe:	e000      	b.n	8004cc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004cc0:	bf00      	nop
  }
}
 8004cc2:	37e8      	adds	r7, #232	; 0xe8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b095      	sub	sp, #84	; 0x54
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	330c      	adds	r3, #12
 8004d2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2e:	e853 3f00 	ldrex	r3, [r3]
 8004d32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	330c      	adds	r3, #12
 8004d42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d44:	643a      	str	r2, [r7, #64]	; 0x40
 8004d46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d4c:	e841 2300 	strex	r3, r2, [r1]
 8004d50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1e5      	bne.n	8004d24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3314      	adds	r3, #20
 8004d5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	f023 0301 	bic.w	r3, r3, #1
 8004d6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3314      	adds	r3, #20
 8004d76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d80:	e841 2300 	strex	r3, r2, [r1]
 8004d84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e5      	bne.n	8004d58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d119      	bne.n	8004dc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	330c      	adds	r3, #12
 8004d9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	e853 3f00 	ldrex	r3, [r3]
 8004da2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f023 0310 	bic.w	r3, r3, #16
 8004daa:	647b      	str	r3, [r7, #68]	; 0x44
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	330c      	adds	r3, #12
 8004db2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004db4:	61ba      	str	r2, [r7, #24]
 8004db6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db8:	6979      	ldr	r1, [r7, #20]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	e841 2300 	strex	r3, r2, [r1]
 8004dc0:	613b      	str	r3, [r7, #16]
   return(result);
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1e5      	bne.n	8004d94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004dd6:	bf00      	nop
 8004dd8:	3754      	adds	r7, #84	; 0x54
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f7ff ff77 	bl	8004cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e02:	bf00      	nop
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b085      	sub	sp, #20
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b21      	cmp	r3, #33	; 0x21
 8004e1c:	d13e      	bne.n	8004e9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e26:	d114      	bne.n	8004e52 <UART_Transmit_IT+0x48>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d110      	bne.n	8004e52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	1c9a      	adds	r2, r3, #2
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	621a      	str	r2, [r3, #32]
 8004e50:	e008      	b.n	8004e64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	1c59      	adds	r1, r3, #1
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6211      	str	r1, [r2, #32]
 8004e5c:	781a      	ldrb	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	4619      	mov	r1, r3
 8004e72:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10f      	bne.n	8004e98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68da      	ldr	r2, [r3, #12]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e000      	b.n	8004e9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e9c:	2302      	movs	r3, #2
  }
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b082      	sub	sp, #8
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ec0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7ff fefc 	bl	8004cc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b08c      	sub	sp, #48	; 0x30
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b22      	cmp	r3, #34	; 0x22
 8004eec:	f040 80ae 	bne.w	800504c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef8:	d117      	bne.n	8004f2a <UART_Receive_IT+0x50>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d113      	bne.n	8004f2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f02:	2300      	movs	r3, #0
 8004f04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f22:	1c9a      	adds	r2, r3, #2
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	629a      	str	r2, [r3, #40]	; 0x28
 8004f28:	e026      	b.n	8004f78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004f30:	2300      	movs	r3, #0
 8004f32:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f3c:	d007      	beq.n	8004f4e <UART_Receive_IT+0x74>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10a      	bne.n	8004f5c <UART_Receive_IT+0x82>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d106      	bne.n	8004f5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f58:	701a      	strb	r2, [r3, #0]
 8004f5a:	e008      	b.n	8004f6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	4619      	mov	r1, r3
 8004f86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d15d      	bne.n	8005048 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0220 	bic.w	r2, r2, #32
 8004f9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004faa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695a      	ldr	r2, [r3, #20]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 0201 	bic.w	r2, r2, #1
 8004fba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d135      	bne.n	800503e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	330c      	adds	r3, #12
 8004fde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	e853 3f00 	ldrex	r3, [r3]
 8004fe6:	613b      	str	r3, [r7, #16]
   return(result);
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	f023 0310 	bic.w	r3, r3, #16
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	330c      	adds	r3, #12
 8004ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff8:	623a      	str	r2, [r7, #32]
 8004ffa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffc:	69f9      	ldr	r1, [r7, #28]
 8004ffe:	6a3a      	ldr	r2, [r7, #32]
 8005000:	e841 2300 	strex	r3, r2, [r1]
 8005004:	61bb      	str	r3, [r7, #24]
   return(result);
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1e5      	bne.n	8004fd8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0310 	and.w	r3, r3, #16
 8005016:	2b10      	cmp	r3, #16
 8005018:	d10a      	bne.n	8005030 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800501a:	2300      	movs	r3, #0
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005034:	4619      	mov	r1, r3
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff fe64 	bl	8004d04 <HAL_UARTEx_RxEventCallback>
 800503c:	e002      	b.n	8005044 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7ff fe4c 	bl	8004cdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	e002      	b.n	800504e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	e000      	b.n	800504e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800504c:	2302      	movs	r3, #2
  }
}
 800504e:	4618      	mov	r0, r3
 8005050:	3730      	adds	r7, #48	; 0x30
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800505c:	b0c0      	sub	sp, #256	; 0x100
 800505e:	af00      	add	r7, sp, #0
 8005060:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005074:	68d9      	ldr	r1, [r3, #12]
 8005076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	ea40 0301 	orr.w	r3, r0, r1
 8005080:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	431a      	orrs	r2, r3
 8005090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	431a      	orrs	r2, r3
 8005098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050b0:	f021 010c 	bic.w	r1, r1, #12
 80050b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050be:	430b      	orrs	r3, r1
 80050c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d2:	6999      	ldr	r1, [r3, #24]
 80050d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	ea40 0301 	orr.w	r3, r0, r1
 80050de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	4b8f      	ldr	r3, [pc, #572]	; (8005324 <UART_SetConfig+0x2cc>)
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d005      	beq.n	80050f8 <UART_SetConfig+0xa0>
 80050ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	4b8d      	ldr	r3, [pc, #564]	; (8005328 <UART_SetConfig+0x2d0>)
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d104      	bne.n	8005102 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050f8:	f7ff f81c 	bl	8004134 <HAL_RCC_GetPCLK2Freq>
 80050fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005100:	e003      	b.n	800510a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005102:	f7ff f803 	bl	800410c <HAL_RCC_GetPCLK1Freq>
 8005106:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800510a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005114:	f040 810c 	bne.w	8005330 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800511c:	2200      	movs	r2, #0
 800511e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005122:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005126:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800512a:	4622      	mov	r2, r4
 800512c:	462b      	mov	r3, r5
 800512e:	1891      	adds	r1, r2, r2
 8005130:	65b9      	str	r1, [r7, #88]	; 0x58
 8005132:	415b      	adcs	r3, r3
 8005134:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005136:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800513a:	4621      	mov	r1, r4
 800513c:	eb12 0801 	adds.w	r8, r2, r1
 8005140:	4629      	mov	r1, r5
 8005142:	eb43 0901 	adc.w	r9, r3, r1
 8005146:	f04f 0200 	mov.w	r2, #0
 800514a:	f04f 0300 	mov.w	r3, #0
 800514e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800515a:	4690      	mov	r8, r2
 800515c:	4699      	mov	r9, r3
 800515e:	4623      	mov	r3, r4
 8005160:	eb18 0303 	adds.w	r3, r8, r3
 8005164:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005168:	462b      	mov	r3, r5
 800516a:	eb49 0303 	adc.w	r3, r9, r3
 800516e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800517e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005182:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005186:	460b      	mov	r3, r1
 8005188:	18db      	adds	r3, r3, r3
 800518a:	653b      	str	r3, [r7, #80]	; 0x50
 800518c:	4613      	mov	r3, r2
 800518e:	eb42 0303 	adc.w	r3, r2, r3
 8005192:	657b      	str	r3, [r7, #84]	; 0x54
 8005194:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005198:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800519c:	f7fb f818 	bl	80001d0 <__aeabi_uldivmod>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4b61      	ldr	r3, [pc, #388]	; (800532c <UART_SetConfig+0x2d4>)
 80051a6:	fba3 2302 	umull	r2, r3, r3, r2
 80051aa:	095b      	lsrs	r3, r3, #5
 80051ac:	011c      	lsls	r4, r3, #4
 80051ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051b2:	2200      	movs	r2, #0
 80051b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80051bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80051c0:	4642      	mov	r2, r8
 80051c2:	464b      	mov	r3, r9
 80051c4:	1891      	adds	r1, r2, r2
 80051c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80051c8:	415b      	adcs	r3, r3
 80051ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051d0:	4641      	mov	r1, r8
 80051d2:	eb12 0a01 	adds.w	sl, r2, r1
 80051d6:	4649      	mov	r1, r9
 80051d8:	eb43 0b01 	adc.w	fp, r3, r1
 80051dc:	f04f 0200 	mov.w	r2, #0
 80051e0:	f04f 0300 	mov.w	r3, #0
 80051e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051f0:	4692      	mov	sl, r2
 80051f2:	469b      	mov	fp, r3
 80051f4:	4643      	mov	r3, r8
 80051f6:	eb1a 0303 	adds.w	r3, sl, r3
 80051fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051fe:	464b      	mov	r3, r9
 8005200:	eb4b 0303 	adc.w	r3, fp, r3
 8005204:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005214:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005218:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800521c:	460b      	mov	r3, r1
 800521e:	18db      	adds	r3, r3, r3
 8005220:	643b      	str	r3, [r7, #64]	; 0x40
 8005222:	4613      	mov	r3, r2
 8005224:	eb42 0303 	adc.w	r3, r2, r3
 8005228:	647b      	str	r3, [r7, #68]	; 0x44
 800522a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800522e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005232:	f7fa ffcd 	bl	80001d0 <__aeabi_uldivmod>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4611      	mov	r1, r2
 800523c:	4b3b      	ldr	r3, [pc, #236]	; (800532c <UART_SetConfig+0x2d4>)
 800523e:	fba3 2301 	umull	r2, r3, r3, r1
 8005242:	095b      	lsrs	r3, r3, #5
 8005244:	2264      	movs	r2, #100	; 0x64
 8005246:	fb02 f303 	mul.w	r3, r2, r3
 800524a:	1acb      	subs	r3, r1, r3
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005252:	4b36      	ldr	r3, [pc, #216]	; (800532c <UART_SetConfig+0x2d4>)
 8005254:	fba3 2302 	umull	r2, r3, r3, r2
 8005258:	095b      	lsrs	r3, r3, #5
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005260:	441c      	add	r4, r3
 8005262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005266:	2200      	movs	r2, #0
 8005268:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800526c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005270:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005274:	4642      	mov	r2, r8
 8005276:	464b      	mov	r3, r9
 8005278:	1891      	adds	r1, r2, r2
 800527a:	63b9      	str	r1, [r7, #56]	; 0x38
 800527c:	415b      	adcs	r3, r3
 800527e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005280:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005284:	4641      	mov	r1, r8
 8005286:	1851      	adds	r1, r2, r1
 8005288:	6339      	str	r1, [r7, #48]	; 0x30
 800528a:	4649      	mov	r1, r9
 800528c:	414b      	adcs	r3, r1
 800528e:	637b      	str	r3, [r7, #52]	; 0x34
 8005290:	f04f 0200 	mov.w	r2, #0
 8005294:	f04f 0300 	mov.w	r3, #0
 8005298:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800529c:	4659      	mov	r1, fp
 800529e:	00cb      	lsls	r3, r1, #3
 80052a0:	4651      	mov	r1, sl
 80052a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052a6:	4651      	mov	r1, sl
 80052a8:	00ca      	lsls	r2, r1, #3
 80052aa:	4610      	mov	r0, r2
 80052ac:	4619      	mov	r1, r3
 80052ae:	4603      	mov	r3, r0
 80052b0:	4642      	mov	r2, r8
 80052b2:	189b      	adds	r3, r3, r2
 80052b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052b8:	464b      	mov	r3, r9
 80052ba:	460a      	mov	r2, r1
 80052bc:	eb42 0303 	adc.w	r3, r2, r3
 80052c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80052d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80052d8:	460b      	mov	r3, r1
 80052da:	18db      	adds	r3, r3, r3
 80052dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80052de:	4613      	mov	r3, r2
 80052e0:	eb42 0303 	adc.w	r3, r2, r3
 80052e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80052ee:	f7fa ff6f 	bl	80001d0 <__aeabi_uldivmod>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4b0d      	ldr	r3, [pc, #52]	; (800532c <UART_SetConfig+0x2d4>)
 80052f8:	fba3 1302 	umull	r1, r3, r3, r2
 80052fc:	095b      	lsrs	r3, r3, #5
 80052fe:	2164      	movs	r1, #100	; 0x64
 8005300:	fb01 f303 	mul.w	r3, r1, r3
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	3332      	adds	r3, #50	; 0x32
 800530a:	4a08      	ldr	r2, [pc, #32]	; (800532c <UART_SetConfig+0x2d4>)
 800530c:	fba2 2303 	umull	r2, r3, r2, r3
 8005310:	095b      	lsrs	r3, r3, #5
 8005312:	f003 0207 	and.w	r2, r3, #7
 8005316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4422      	add	r2, r4
 800531e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005320:	e106      	b.n	8005530 <UART_SetConfig+0x4d8>
 8005322:	bf00      	nop
 8005324:	40011000 	.word	0x40011000
 8005328:	40011400 	.word	0x40011400
 800532c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005334:	2200      	movs	r2, #0
 8005336:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800533a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800533e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005342:	4642      	mov	r2, r8
 8005344:	464b      	mov	r3, r9
 8005346:	1891      	adds	r1, r2, r2
 8005348:	6239      	str	r1, [r7, #32]
 800534a:	415b      	adcs	r3, r3
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
 800534e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005352:	4641      	mov	r1, r8
 8005354:	1854      	adds	r4, r2, r1
 8005356:	4649      	mov	r1, r9
 8005358:	eb43 0501 	adc.w	r5, r3, r1
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	00eb      	lsls	r3, r5, #3
 8005366:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800536a:	00e2      	lsls	r2, r4, #3
 800536c:	4614      	mov	r4, r2
 800536e:	461d      	mov	r5, r3
 8005370:	4643      	mov	r3, r8
 8005372:	18e3      	adds	r3, r4, r3
 8005374:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005378:	464b      	mov	r3, r9
 800537a:	eb45 0303 	adc.w	r3, r5, r3
 800537e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800538e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005392:	f04f 0200 	mov.w	r2, #0
 8005396:	f04f 0300 	mov.w	r3, #0
 800539a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800539e:	4629      	mov	r1, r5
 80053a0:	008b      	lsls	r3, r1, #2
 80053a2:	4621      	mov	r1, r4
 80053a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053a8:	4621      	mov	r1, r4
 80053aa:	008a      	lsls	r2, r1, #2
 80053ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80053b0:	f7fa ff0e 	bl	80001d0 <__aeabi_uldivmod>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	4b60      	ldr	r3, [pc, #384]	; (800553c <UART_SetConfig+0x4e4>)
 80053ba:	fba3 2302 	umull	r2, r3, r3, r2
 80053be:	095b      	lsrs	r3, r3, #5
 80053c0:	011c      	lsls	r4, r3, #4
 80053c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053c6:	2200      	movs	r2, #0
 80053c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80053d4:	4642      	mov	r2, r8
 80053d6:	464b      	mov	r3, r9
 80053d8:	1891      	adds	r1, r2, r2
 80053da:	61b9      	str	r1, [r7, #24]
 80053dc:	415b      	adcs	r3, r3
 80053de:	61fb      	str	r3, [r7, #28]
 80053e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053e4:	4641      	mov	r1, r8
 80053e6:	1851      	adds	r1, r2, r1
 80053e8:	6139      	str	r1, [r7, #16]
 80053ea:	4649      	mov	r1, r9
 80053ec:	414b      	adcs	r3, r1
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	f04f 0300 	mov.w	r3, #0
 80053f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053fc:	4659      	mov	r1, fp
 80053fe:	00cb      	lsls	r3, r1, #3
 8005400:	4651      	mov	r1, sl
 8005402:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005406:	4651      	mov	r1, sl
 8005408:	00ca      	lsls	r2, r1, #3
 800540a:	4610      	mov	r0, r2
 800540c:	4619      	mov	r1, r3
 800540e:	4603      	mov	r3, r0
 8005410:	4642      	mov	r2, r8
 8005412:	189b      	adds	r3, r3, r2
 8005414:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005418:	464b      	mov	r3, r9
 800541a:	460a      	mov	r2, r1
 800541c:	eb42 0303 	adc.w	r3, r2, r3
 8005420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	67bb      	str	r3, [r7, #120]	; 0x78
 800542e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005430:	f04f 0200 	mov.w	r2, #0
 8005434:	f04f 0300 	mov.w	r3, #0
 8005438:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800543c:	4649      	mov	r1, r9
 800543e:	008b      	lsls	r3, r1, #2
 8005440:	4641      	mov	r1, r8
 8005442:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005446:	4641      	mov	r1, r8
 8005448:	008a      	lsls	r2, r1, #2
 800544a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800544e:	f7fa febf 	bl	80001d0 <__aeabi_uldivmod>
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	4611      	mov	r1, r2
 8005458:	4b38      	ldr	r3, [pc, #224]	; (800553c <UART_SetConfig+0x4e4>)
 800545a:	fba3 2301 	umull	r2, r3, r3, r1
 800545e:	095b      	lsrs	r3, r3, #5
 8005460:	2264      	movs	r2, #100	; 0x64
 8005462:	fb02 f303 	mul.w	r3, r2, r3
 8005466:	1acb      	subs	r3, r1, r3
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	3332      	adds	r3, #50	; 0x32
 800546c:	4a33      	ldr	r2, [pc, #204]	; (800553c <UART_SetConfig+0x4e4>)
 800546e:	fba2 2303 	umull	r2, r3, r2, r3
 8005472:	095b      	lsrs	r3, r3, #5
 8005474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005478:	441c      	add	r4, r3
 800547a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800547e:	2200      	movs	r2, #0
 8005480:	673b      	str	r3, [r7, #112]	; 0x70
 8005482:	677a      	str	r2, [r7, #116]	; 0x74
 8005484:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005488:	4642      	mov	r2, r8
 800548a:	464b      	mov	r3, r9
 800548c:	1891      	adds	r1, r2, r2
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	415b      	adcs	r3, r3
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005498:	4641      	mov	r1, r8
 800549a:	1851      	adds	r1, r2, r1
 800549c:	6039      	str	r1, [r7, #0]
 800549e:	4649      	mov	r1, r9
 80054a0:	414b      	adcs	r3, r1
 80054a2:	607b      	str	r3, [r7, #4]
 80054a4:	f04f 0200 	mov.w	r2, #0
 80054a8:	f04f 0300 	mov.w	r3, #0
 80054ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054b0:	4659      	mov	r1, fp
 80054b2:	00cb      	lsls	r3, r1, #3
 80054b4:	4651      	mov	r1, sl
 80054b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054ba:	4651      	mov	r1, sl
 80054bc:	00ca      	lsls	r2, r1, #3
 80054be:	4610      	mov	r0, r2
 80054c0:	4619      	mov	r1, r3
 80054c2:	4603      	mov	r3, r0
 80054c4:	4642      	mov	r2, r8
 80054c6:	189b      	adds	r3, r3, r2
 80054c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80054ca:	464b      	mov	r3, r9
 80054cc:	460a      	mov	r2, r1
 80054ce:	eb42 0303 	adc.w	r3, r2, r3
 80054d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	663b      	str	r3, [r7, #96]	; 0x60
 80054de:	667a      	str	r2, [r7, #100]	; 0x64
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	f04f 0300 	mov.w	r3, #0
 80054e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80054ec:	4649      	mov	r1, r9
 80054ee:	008b      	lsls	r3, r1, #2
 80054f0:	4641      	mov	r1, r8
 80054f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054f6:	4641      	mov	r1, r8
 80054f8:	008a      	lsls	r2, r1, #2
 80054fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80054fe:	f7fa fe67 	bl	80001d0 <__aeabi_uldivmod>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4b0d      	ldr	r3, [pc, #52]	; (800553c <UART_SetConfig+0x4e4>)
 8005508:	fba3 1302 	umull	r1, r3, r3, r2
 800550c:	095b      	lsrs	r3, r3, #5
 800550e:	2164      	movs	r1, #100	; 0x64
 8005510:	fb01 f303 	mul.w	r3, r1, r3
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	3332      	adds	r3, #50	; 0x32
 800551a:	4a08      	ldr	r2, [pc, #32]	; (800553c <UART_SetConfig+0x4e4>)
 800551c:	fba2 2303 	umull	r2, r3, r2, r3
 8005520:	095b      	lsrs	r3, r3, #5
 8005522:	f003 020f 	and.w	r2, r3, #15
 8005526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4422      	add	r2, r4
 800552e:	609a      	str	r2, [r3, #8]
}
 8005530:	bf00      	nop
 8005532:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005536:	46bd      	mov	sp, r7
 8005538:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800553c:	51eb851f 	.word	0x51eb851f

08005540 <__NVIC_SetPriority>:
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	4603      	mov	r3, r0
 8005548:	6039      	str	r1, [r7, #0]
 800554a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800554c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005550:	2b00      	cmp	r3, #0
 8005552:	db0a      	blt.n	800556a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	b2da      	uxtb	r2, r3
 8005558:	490c      	ldr	r1, [pc, #48]	; (800558c <__NVIC_SetPriority+0x4c>)
 800555a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800555e:	0112      	lsls	r2, r2, #4
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	440b      	add	r3, r1
 8005564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005568:	e00a      	b.n	8005580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	b2da      	uxtb	r2, r3
 800556e:	4908      	ldr	r1, [pc, #32]	; (8005590 <__NVIC_SetPriority+0x50>)
 8005570:	79fb      	ldrb	r3, [r7, #7]
 8005572:	f003 030f 	and.w	r3, r3, #15
 8005576:	3b04      	subs	r3, #4
 8005578:	0112      	lsls	r2, r2, #4
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	440b      	add	r3, r1
 800557e:	761a      	strb	r2, [r3, #24]
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	e000e100 	.word	0xe000e100
 8005590:	e000ed00 	.word	0xe000ed00

08005594 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005598:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <SysTick_Handler+0x1c>)
 800559a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800559c:	f001 ff4c 	bl	8007438 <xTaskGetSchedulerState>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d001      	beq.n	80055aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80055a6:	f002 feef 	bl	8008388 <xPortSysTickHandler>
  }
}
 80055aa:	bf00      	nop
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	e000e010 	.word	0xe000e010

080055b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80055b8:	2100      	movs	r1, #0
 80055ba:	f06f 0004 	mvn.w	r0, #4
 80055be:	f7ff ffbf 	bl	8005540 <__NVIC_SetPriority>
#endif
}
 80055c2:	bf00      	nop
 80055c4:	bd80      	pop	{r7, pc}
	...

080055c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055ce:	f3ef 8305 	mrs	r3, IPSR
 80055d2:	603b      	str	r3, [r7, #0]
  return(result);
 80055d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80055da:	f06f 0305 	mvn.w	r3, #5
 80055de:	607b      	str	r3, [r7, #4]
 80055e0:	e00c      	b.n	80055fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80055e2:	4b0a      	ldr	r3, [pc, #40]	; (800560c <osKernelInitialize+0x44>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d105      	bne.n	80055f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80055ea:	4b08      	ldr	r3, [pc, #32]	; (800560c <osKernelInitialize+0x44>)
 80055ec:	2201      	movs	r2, #1
 80055ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80055f0:	2300      	movs	r3, #0
 80055f2:	607b      	str	r3, [r7, #4]
 80055f4:	e002      	b.n	80055fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80055f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80055fc:	687b      	ldr	r3, [r7, #4]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	2000012c 	.word	0x2000012c

08005610 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005616:	f3ef 8305 	mrs	r3, IPSR
 800561a:	603b      	str	r3, [r7, #0]
  return(result);
 800561c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005622:	f06f 0305 	mvn.w	r3, #5
 8005626:	607b      	str	r3, [r7, #4]
 8005628:	e010      	b.n	800564c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800562a:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <osKernelStart+0x48>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d109      	bne.n	8005646 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005632:	f7ff ffbf 	bl	80055b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005636:	4b08      	ldr	r3, [pc, #32]	; (8005658 <osKernelStart+0x48>)
 8005638:	2202      	movs	r2, #2
 800563a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800563c:	f001 fab4 	bl	8006ba8 <vTaskStartScheduler>
      stat = osOK;
 8005640:	2300      	movs	r3, #0
 8005642:	607b      	str	r3, [r7, #4]
 8005644:	e002      	b.n	800564c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800564a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800564c:	687b      	ldr	r3, [r7, #4]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	2000012c 	.word	0x2000012c

0800565c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800565c:	b580      	push	{r7, lr}
 800565e:	b08e      	sub	sp, #56	; 0x38
 8005660:	af04      	add	r7, sp, #16
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005668:	2300      	movs	r3, #0
 800566a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800566c:	f3ef 8305 	mrs	r3, IPSR
 8005670:	617b      	str	r3, [r7, #20]
  return(result);
 8005672:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005674:	2b00      	cmp	r3, #0
 8005676:	d17e      	bne.n	8005776 <osThreadNew+0x11a>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d07b      	beq.n	8005776 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800567e:	2380      	movs	r3, #128	; 0x80
 8005680:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005682:	2318      	movs	r3, #24
 8005684:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005686:	2300      	movs	r3, #0
 8005688:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800568a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800568e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d045      	beq.n	8005722 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d002      	beq.n	80056a4 <osThreadNew+0x48>
        name = attr->name;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d008      	beq.n	80056ca <osThreadNew+0x6e>
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	2b38      	cmp	r3, #56	; 0x38
 80056bc:	d805      	bhi.n	80056ca <osThreadNew+0x6e>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <osThreadNew+0x72>
        return (NULL);
 80056ca:	2300      	movs	r3, #0
 80056cc:	e054      	b.n	8005778 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	089b      	lsrs	r3, r3, #2
 80056dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00e      	beq.n	8005704 <osThreadNew+0xa8>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	2b5b      	cmp	r3, #91	; 0x5b
 80056ec:	d90a      	bls.n	8005704 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d006      	beq.n	8005704 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <osThreadNew+0xa8>
        mem = 1;
 80056fe:	2301      	movs	r3, #1
 8005700:	61bb      	str	r3, [r7, #24]
 8005702:	e010      	b.n	8005726 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10c      	bne.n	8005726 <osThreadNew+0xca>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d108      	bne.n	8005726 <osThreadNew+0xca>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d104      	bne.n	8005726 <osThreadNew+0xca>
          mem = 0;
 800571c:	2300      	movs	r3, #0
 800571e:	61bb      	str	r3, [r7, #24]
 8005720:	e001      	b.n	8005726 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005722:	2300      	movs	r3, #0
 8005724:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d110      	bne.n	800574e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005734:	9202      	str	r2, [sp, #8]
 8005736:	9301      	str	r3, [sp, #4]
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	9300      	str	r3, [sp, #0]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	6a3a      	ldr	r2, [r7, #32]
 8005740:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f001 f85a 	bl	80067fc <xTaskCreateStatic>
 8005748:	4603      	mov	r3, r0
 800574a:	613b      	str	r3, [r7, #16]
 800574c:	e013      	b.n	8005776 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d110      	bne.n	8005776 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	b29a      	uxth	r2, r3
 8005758:	f107 0310 	add.w	r3, r7, #16
 800575c:	9301      	str	r3, [sp, #4]
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f001 f8a5 	bl	80068b6 <xTaskCreate>
 800576c:	4603      	mov	r3, r0
 800576e:	2b01      	cmp	r3, #1
 8005770:	d001      	beq.n	8005776 <osThreadNew+0x11a>
            hTask = NULL;
 8005772:	2300      	movs	r3, #0
 8005774:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005776:	693b      	ldr	r3, [r7, #16]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3728      	adds	r7, #40	; 0x28
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005788:	f3ef 8305 	mrs	r3, IPSR
 800578c:	60bb      	str	r3, [r7, #8]
  return(result);
 800578e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <osDelay+0x1c>
    stat = osErrorISR;
 8005794:	f06f 0305 	mvn.w	r3, #5
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	e007      	b.n	80057ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800579c:	2300      	movs	r3, #0
 800579e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d002      	beq.n	80057ac <osDelay+0x2c>
      vTaskDelay(ticks);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f001 f9ca 	bl	8006b40 <vTaskDelay>
    }
  }

  return (stat);
 80057ac:	68fb      	ldr	r3, [r7, #12]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b084      	sub	sp, #16
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f002 fc00 	bl	8007fc4 <pvTimerGetTimerID>
 80057c4:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <TimerCallback+0x22>
    callb->func (callb->arg);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	6852      	ldr	r2, [r2, #4]
 80057d4:	4610      	mov	r0, r2
 80057d6:	4798      	blx	r3
  }
}
 80057d8:	bf00      	nop
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08c      	sub	sp, #48	; 0x30
 80057e4:	af02      	add	r7, sp, #8
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	607a      	str	r2, [r7, #4]
 80057ea:	603b      	str	r3, [r7, #0]
 80057ec:	460b      	mov	r3, r1
 80057ee:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80057f0:	2300      	movs	r3, #0
 80057f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057f4:	f3ef 8305 	mrs	r3, IPSR
 80057f8:	613b      	str	r3, [r7, #16]
  return(result);
 80057fa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d163      	bne.n	80058c8 <osTimerNew+0xe8>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d060      	beq.n	80058c8 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8005806:	2008      	movs	r0, #8
 8005808:	f002 fe4e 	bl	80084a8 <pvPortMalloc>
 800580c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d059      	beq.n	80058c8 <osTimerNew+0xe8>
      callb->func = func;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005820:	7afb      	ldrb	r3, [r7, #11]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d102      	bne.n	800582c <osTimerNew+0x4c>
        reload = pdFALSE;
 8005826:	2300      	movs	r3, #0
 8005828:	61fb      	str	r3, [r7, #28]
 800582a:	e001      	b.n	8005830 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800582c:	2301      	movs	r3, #1
 800582e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8005830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005834:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8005836:	2300      	movs	r3, #0
 8005838:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d01c      	beq.n	800587a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <osTimerNew+0x6e>
          name = attr->name;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d006      	beq.n	8005864 <osTimerNew+0x84>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	2b2b      	cmp	r3, #43	; 0x2b
 800585c:	d902      	bls.n	8005864 <osTimerNew+0x84>
          mem = 1;
 800585e:	2301      	movs	r3, #1
 8005860:	61bb      	str	r3, [r7, #24]
 8005862:	e00c      	b.n	800587e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d108      	bne.n	800587e <osTimerNew+0x9e>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d104      	bne.n	800587e <osTimerNew+0x9e>
            mem = 0;
 8005874:	2300      	movs	r3, #0
 8005876:	61bb      	str	r3, [r7, #24]
 8005878:	e001      	b.n	800587e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800587a:	2300      	movs	r3, #0
 800587c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d10c      	bne.n	800589e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	9301      	str	r3, [sp, #4]
 800588a:	4b12      	ldr	r3, [pc, #72]	; (80058d4 <osTimerNew+0xf4>)
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	69fa      	ldr	r2, [r7, #28]
 8005892:	2101      	movs	r1, #1
 8005894:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005896:	f002 f816 	bl	80078c6 <xTimerCreateStatic>
 800589a:	6238      	str	r0, [r7, #32]
 800589c:	e00b      	b.n	80058b6 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d108      	bne.n	80058b6 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80058a4:	4b0b      	ldr	r3, [pc, #44]	; (80058d4 <osTimerNew+0xf4>)
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	69fa      	ldr	r2, [r7, #28]
 80058ac:	2101      	movs	r1, #1
 80058ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058b0:	f001 ffe8 	bl	8007884 <xTimerCreate>
 80058b4:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d105      	bne.n	80058c8 <osTimerNew+0xe8>
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <osTimerNew+0xe8>
        vPortFree (callb);
 80058c2:	6978      	ldr	r0, [r7, #20]
 80058c4:	f002 febc 	bl	8008640 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80058c8:	6a3b      	ldr	r3, [r7, #32]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3728      	adds	r7, #40	; 0x28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	080057b7 	.word	0x080057b7

080058d8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80058d8:	b580      	push	{r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af02      	add	r7, sp, #8
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058e6:	f3ef 8305 	mrs	r3, IPSR
 80058ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80058ec:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <osTimerStart+0x22>
    stat = osErrorISR;
 80058f2:	f06f 0305 	mvn.w	r3, #5
 80058f6:	617b      	str	r3, [r7, #20]
 80058f8:	e017      	b.n	800592a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d103      	bne.n	8005908 <osTimerStart+0x30>
    stat = osErrorParameter;
 8005900:	f06f 0303 	mvn.w	r3, #3
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	e010      	b.n	800592a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8005908:	2300      	movs	r3, #0
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	2300      	movs	r3, #0
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	2104      	movs	r1, #4
 8005912:	6938      	ldr	r0, [r7, #16]
 8005914:	f002 f850 	bl	80079b8 <xTimerGenericCommand>
 8005918:	4603      	mov	r3, r0
 800591a:	2b01      	cmp	r3, #1
 800591c:	d102      	bne.n	8005924 <osTimerStart+0x4c>
      stat = osOK;
 800591e:	2300      	movs	r3, #0
 8005920:	617b      	str	r3, [r7, #20]
 8005922:	e002      	b.n	800592a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8005924:	f06f 0302 	mvn.w	r3, #2
 8005928:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800592a:	697b      	ldr	r3, [r7, #20]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3718      	adds	r7, #24
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4a07      	ldr	r2, [pc, #28]	; (8005960 <vApplicationGetIdleTaskMemory+0x2c>)
 8005944:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	4a06      	ldr	r2, [pc, #24]	; (8005964 <vApplicationGetIdleTaskMemory+0x30>)
 800594a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2280      	movs	r2, #128	; 0x80
 8005950:	601a      	str	r2, [r3, #0]
}
 8005952:	bf00      	nop
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	20000130 	.word	0x20000130
 8005964:	2000018c 	.word	0x2000018c

08005968 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4a07      	ldr	r2, [pc, #28]	; (8005994 <vApplicationGetTimerTaskMemory+0x2c>)
 8005978:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	4a06      	ldr	r2, [pc, #24]	; (8005998 <vApplicationGetTimerTaskMemory+0x30>)
 800597e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005986:	601a      	str	r2, [r3, #0]
}
 8005988:	bf00      	nop
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	2000038c 	.word	0x2000038c
 8005998:	200003e8 	.word	0x200003e8

0800599c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f103 0208 	add.w	r2, r3, #8
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f103 0208 	add.w	r2, r3, #8
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f103 0208 	add.w	r2, r3, #8
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059f6:	b480      	push	{r7}
 80059f8:	b085      	sub	sp, #20
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	601a      	str	r2, [r3, #0]
}
 8005a32:	bf00      	nop
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b085      	sub	sp, #20
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a54:	d103      	bne.n	8005a5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	e00c      	b.n	8005a78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	3308      	adds	r3, #8
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	e002      	b.n	8005a6c <vListInsert+0x2e>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d2f6      	bcs.n	8005a66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	1c5a      	adds	r2, r3, #1
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	601a      	str	r2, [r3, #0]
}
 8005aa4:	bf00      	nop
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6892      	ldr	r2, [r2, #8]
 8005ac6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6852      	ldr	r2, [r2, #4]
 8005ad0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d103      	bne.n	8005ae4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689a      	ldr	r2, [r3, #8]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	1e5a      	subs	r2, r3, #1
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10a      	bne.n	8005b2e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b2a:	bf00      	nop
 8005b2c:	e7fe      	b.n	8005b2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b2e:	f002 fb99 	bl	8008264 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3a:	68f9      	ldr	r1, [r7, #12]
 8005b3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b3e:	fb01 f303 	mul.w	r3, r1, r3
 8005b42:	441a      	add	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	68f9      	ldr	r1, [r7, #12]
 8005b62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b64:	fb01 f303 	mul.w	r3, r1, r3
 8005b68:	441a      	add	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	22ff      	movs	r2, #255	; 0xff
 8005b72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	22ff      	movs	r2, #255	; 0xff
 8005b7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d114      	bne.n	8005bae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01a      	beq.n	8005bc2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	3310      	adds	r3, #16
 8005b90:	4618      	mov	r0, r3
 8005b92:	f001 fa93 	bl	80070bc <xTaskRemoveFromEventList>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d012      	beq.n	8005bc2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b9c:	4b0c      	ldr	r3, [pc, #48]	; (8005bd0 <xQueueGenericReset+0xcc>)
 8005b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	e009      	b.n	8005bc2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3310      	adds	r3, #16
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7ff fef2 	bl	800599c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	3324      	adds	r3, #36	; 0x24
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7ff feed 	bl	800599c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005bc2:	f002 fb7f 	bl	80082c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005bc6:	2301      	movs	r3, #1
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	e000ed04 	.word	0xe000ed04

08005bd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08e      	sub	sp, #56	; 0x38
 8005bd8:	af02      	add	r7, sp, #8
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10a      	bne.n	8005bfe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bec:	f383 8811 	msr	BASEPRI, r3
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005bfa:	bf00      	nop
 8005bfc:	e7fe      	b.n	8005bfc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10a      	bne.n	8005c1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c08:	f383 8811 	msr	BASEPRI, r3
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c16:	bf00      	nop
 8005c18:	e7fe      	b.n	8005c18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <xQueueGenericCreateStatic+0x52>
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <xQueueGenericCreateStatic+0x56>
 8005c26:	2301      	movs	r3, #1
 8005c28:	e000      	b.n	8005c2c <xQueueGenericCreateStatic+0x58>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10a      	bne.n	8005c46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	623b      	str	r3, [r7, #32]
}
 8005c42:	bf00      	nop
 8005c44:	e7fe      	b.n	8005c44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d102      	bne.n	8005c52 <xQueueGenericCreateStatic+0x7e>
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <xQueueGenericCreateStatic+0x82>
 8005c52:	2301      	movs	r3, #1
 8005c54:	e000      	b.n	8005c58 <xQueueGenericCreateStatic+0x84>
 8005c56:	2300      	movs	r3, #0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10a      	bne.n	8005c72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	61fb      	str	r3, [r7, #28]
}
 8005c6e:	bf00      	nop
 8005c70:	e7fe      	b.n	8005c70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c72:	2350      	movs	r3, #80	; 0x50
 8005c74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2b50      	cmp	r3, #80	; 0x50
 8005c7a:	d00a      	beq.n	8005c92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	61bb      	str	r3, [r7, #24]
}
 8005c8e:	bf00      	nop
 8005c90:	e7fe      	b.n	8005c90 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005c92:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00d      	beq.n	8005cba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ca6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	68b9      	ldr	r1, [r7, #8]
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 f83f 	bl	8005d38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3730      	adds	r7, #48	; 0x30
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b08a      	sub	sp, #40	; 0x28
 8005cc8:	af02      	add	r7, sp, #8
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10a      	bne.n	8005cee <xQueueGenericCreate+0x2a>
	__asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	613b      	str	r3, [r7, #16]
}
 8005cea:	bf00      	nop
 8005cec:	e7fe      	b.n	8005cec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	fb02 f303 	mul.w	r3, r2, r3
 8005cf6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	3350      	adds	r3, #80	; 0x50
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f002 fbd3 	bl	80084a8 <pvPortMalloc>
 8005d02:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d011      	beq.n	8005d2e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	3350      	adds	r3, #80	; 0x50
 8005d12:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d1c:	79fa      	ldrb	r2, [r7, #7]
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	4613      	mov	r3, r2
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	68b9      	ldr	r1, [r7, #8]
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 f805 	bl	8005d38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d2e:	69bb      	ldr	r3, [r7, #24]
	}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3720      	adds	r7, #32
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
 8005d44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d103      	bne.n	8005d54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	e002      	b.n	8005d5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d66:	2101      	movs	r1, #1
 8005d68:	69b8      	ldr	r0, [r7, #24]
 8005d6a:	f7ff fecb 	bl	8005b04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	78fa      	ldrb	r2, [r7, #3]
 8005d72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d76:	bf00      	nop
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b082      	sub	sp, #8
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00e      	beq.n	8005daa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005d9e:	2300      	movs	r3, #0
 8005da0:	2200      	movs	r2, #0
 8005da2:	2100      	movs	r1, #0
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f81d 	bl	8005de4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005daa:	bf00      	nop
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b086      	sub	sp, #24
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	4603      	mov	r3, r0
 8005dba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	617b      	str	r3, [r7, #20]
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	6939      	ldr	r1, [r7, #16]
 8005dca:	6978      	ldr	r0, [r7, #20]
 8005dcc:	f7ff ff7a 	bl	8005cc4 <xQueueGenericCreate>
 8005dd0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f7ff ffd3 	bl	8005d7e <prvInitialiseMutex>

		return xNewQueue;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
	}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
	...

08005de4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08e      	sub	sp, #56	; 0x38
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
 8005df0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005df2:	2300      	movs	r3, #0
 8005df4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10a      	bne.n	8005e16 <xQueueGenericSend+0x32>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e12:	bf00      	nop
 8005e14:	e7fe      	b.n	8005e14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d103      	bne.n	8005e24 <xQueueGenericSend+0x40>
 8005e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <xQueueGenericSend+0x44>
 8005e24:	2301      	movs	r3, #1
 8005e26:	e000      	b.n	8005e2a <xQueueGenericSend+0x46>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10a      	bne.n	8005e44 <xQueueGenericSend+0x60>
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e40:	bf00      	nop
 8005e42:	e7fe      	b.n	8005e42 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d103      	bne.n	8005e52 <xQueueGenericSend+0x6e>
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d101      	bne.n	8005e56 <xQueueGenericSend+0x72>
 8005e52:	2301      	movs	r3, #1
 8005e54:	e000      	b.n	8005e58 <xQueueGenericSend+0x74>
 8005e56:	2300      	movs	r3, #0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10a      	bne.n	8005e72 <xQueueGenericSend+0x8e>
	__asm volatile
 8005e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e60:	f383 8811 	msr	BASEPRI, r3
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	623b      	str	r3, [r7, #32]
}
 8005e6e:	bf00      	nop
 8005e70:	e7fe      	b.n	8005e70 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e72:	f001 fae1 	bl	8007438 <xTaskGetSchedulerState>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d102      	bne.n	8005e82 <xQueueGenericSend+0x9e>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <xQueueGenericSend+0xa2>
 8005e82:	2301      	movs	r3, #1
 8005e84:	e000      	b.n	8005e88 <xQueueGenericSend+0xa4>
 8005e86:	2300      	movs	r3, #0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10a      	bne.n	8005ea2 <xQueueGenericSend+0xbe>
	__asm volatile
 8005e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e90:	f383 8811 	msr	BASEPRI, r3
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	61fb      	str	r3, [r7, #28]
}
 8005e9e:	bf00      	nop
 8005ea0:	e7fe      	b.n	8005ea0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ea2:	f002 f9df 	bl	8008264 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d302      	bcc.n	8005eb8 <xQueueGenericSend+0xd4>
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d129      	bne.n	8005f0c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	68b9      	ldr	r1, [r7, #8]
 8005ebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ebe:	f000 fb2f 	bl	8006520 <prvCopyDataToQueue>
 8005ec2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d010      	beq.n	8005eee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ece:	3324      	adds	r3, #36	; 0x24
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f001 f8f3 	bl	80070bc <xTaskRemoveFromEventList>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d013      	beq.n	8005f04 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005edc:	4b3f      	ldr	r3, [pc, #252]	; (8005fdc <xQueueGenericSend+0x1f8>)
 8005ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	e00a      	b.n	8005f04 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d007      	beq.n	8005f04 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ef4:	4b39      	ldr	r3, [pc, #228]	; (8005fdc <xQueueGenericSend+0x1f8>)
 8005ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f04:	f002 f9de 	bl	80082c4 <vPortExitCritical>
				return pdPASS;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e063      	b.n	8005fd4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d103      	bne.n	8005f1a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f12:	f002 f9d7 	bl	80082c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f16:	2300      	movs	r3, #0
 8005f18:	e05c      	b.n	8005fd4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d106      	bne.n	8005f2e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f20:	f107 0314 	add.w	r3, r7, #20
 8005f24:	4618      	mov	r0, r3
 8005f26:	f001 f92d 	bl	8007184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f2e:	f002 f9c9 	bl	80082c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f32:	f000 fe9f 	bl	8006c74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f36:	f002 f995 	bl	8008264 <vPortEnterCritical>
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f40:	b25b      	sxtb	r3, r3
 8005f42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f46:	d103      	bne.n	8005f50 <xQueueGenericSend+0x16c>
 8005f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f56:	b25b      	sxtb	r3, r3
 8005f58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f5c:	d103      	bne.n	8005f66 <xQueueGenericSend+0x182>
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f66:	f002 f9ad 	bl	80082c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f6a:	1d3a      	adds	r2, r7, #4
 8005f6c:	f107 0314 	add.w	r3, r7, #20
 8005f70:	4611      	mov	r1, r2
 8005f72:	4618      	mov	r0, r3
 8005f74:	f001 f91c 	bl	80071b0 <xTaskCheckForTimeOut>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d124      	bne.n	8005fc8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f80:	f000 fbc6 	bl	8006710 <prvIsQueueFull>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d018      	beq.n	8005fbc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8c:	3310      	adds	r3, #16
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	4611      	mov	r1, r2
 8005f92:	4618      	mov	r0, r3
 8005f94:	f001 f842 	bl	800701c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f9a:	f000 fb51 	bl	8006640 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f9e:	f000 fe77 	bl	8006c90 <xTaskResumeAll>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f47f af7c 	bne.w	8005ea2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005faa:	4b0c      	ldr	r3, [pc, #48]	; (8005fdc <xQueueGenericSend+0x1f8>)
 8005fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	e772      	b.n	8005ea2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005fbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fbe:	f000 fb3f 	bl	8006640 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fc2:	f000 fe65 	bl	8006c90 <xTaskResumeAll>
 8005fc6:	e76c      	b.n	8005ea2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fca:	f000 fb39 	bl	8006640 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fce:	f000 fe5f 	bl	8006c90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005fd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3738      	adds	r7, #56	; 0x38
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	e000ed04 	.word	0xe000ed04

08005fe0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b090      	sub	sp, #64	; 0x40
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
 8005fec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10a      	bne.n	800600e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800600a:	bf00      	nop
 800600c:	e7fe      	b.n	800600c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d103      	bne.n	800601c <xQueueGenericSendFromISR+0x3c>
 8006014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006018:	2b00      	cmp	r3, #0
 800601a:	d101      	bne.n	8006020 <xQueueGenericSendFromISR+0x40>
 800601c:	2301      	movs	r3, #1
 800601e:	e000      	b.n	8006022 <xQueueGenericSendFromISR+0x42>
 8006020:	2300      	movs	r3, #0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10a      	bne.n	800603c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006038:	bf00      	nop
 800603a:	e7fe      	b.n	800603a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	2b02      	cmp	r3, #2
 8006040:	d103      	bne.n	800604a <xQueueGenericSendFromISR+0x6a>
 8006042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006046:	2b01      	cmp	r3, #1
 8006048:	d101      	bne.n	800604e <xQueueGenericSendFromISR+0x6e>
 800604a:	2301      	movs	r3, #1
 800604c:	e000      	b.n	8006050 <xQueueGenericSendFromISR+0x70>
 800604e:	2300      	movs	r3, #0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10a      	bne.n	800606a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	623b      	str	r3, [r7, #32]
}
 8006066:	bf00      	nop
 8006068:	e7fe      	b.n	8006068 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800606a:	f002 f9dd 	bl	8008428 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800606e:	f3ef 8211 	mrs	r2, BASEPRI
 8006072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	61fa      	str	r2, [r7, #28]
 8006084:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006086:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006088:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800608a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800608e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006092:	429a      	cmp	r2, r3
 8006094:	d302      	bcc.n	800609c <xQueueGenericSendFromISR+0xbc>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b02      	cmp	r3, #2
 800609a:	d12f      	bne.n	80060fc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800609c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	68b9      	ldr	r1, [r7, #8]
 80060b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80060b2:	f000 fa35 	bl	8006520 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80060b6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80060ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060be:	d112      	bne.n	80060e6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d016      	beq.n	80060f6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	3324      	adds	r3, #36	; 0x24
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 fff5 	bl	80070bc <xTaskRemoveFromEventList>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00e      	beq.n	80060f6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00b      	beq.n	80060f6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	e007      	b.n	80060f6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80060e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80060ea:	3301      	adds	r3, #1
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	b25a      	sxtb	r2, r3
 80060f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80060f6:	2301      	movs	r3, #1
 80060f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80060fa:	e001      	b.n	8006100 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80060fc:	2300      	movs	r3, #0
 80060fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006102:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800610a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800610c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800610e:	4618      	mov	r0, r3
 8006110:	3740      	adds	r7, #64	; 0x40
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
	...

08006118 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b08c      	sub	sp, #48	; 0x30
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006124:	2300      	movs	r3, #0
 8006126:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800612c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10a      	bne.n	8006148 <xQueueReceive+0x30>
	__asm volatile
 8006132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	623b      	str	r3, [r7, #32]
}
 8006144:	bf00      	nop
 8006146:	e7fe      	b.n	8006146 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d103      	bne.n	8006156 <xQueueReceive+0x3e>
 800614e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <xQueueReceive+0x42>
 8006156:	2301      	movs	r3, #1
 8006158:	e000      	b.n	800615c <xQueueReceive+0x44>
 800615a:	2300      	movs	r3, #0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10a      	bne.n	8006176 <xQueueReceive+0x5e>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	61fb      	str	r3, [r7, #28]
}
 8006172:	bf00      	nop
 8006174:	e7fe      	b.n	8006174 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006176:	f001 f95f 	bl	8007438 <xTaskGetSchedulerState>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d102      	bne.n	8006186 <xQueueReceive+0x6e>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <xQueueReceive+0x72>
 8006186:	2301      	movs	r3, #1
 8006188:	e000      	b.n	800618c <xQueueReceive+0x74>
 800618a:	2300      	movs	r3, #0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10a      	bne.n	80061a6 <xQueueReceive+0x8e>
	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	61bb      	str	r3, [r7, #24]
}
 80061a2:	bf00      	nop
 80061a4:	e7fe      	b.n	80061a4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061a6:	f002 f85d 	bl	8008264 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d01f      	beq.n	80061f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80061b6:	68b9      	ldr	r1, [r7, #8]
 80061b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ba:	f000 fa1b 	bl	80065f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	1e5a      	subs	r2, r3, #1
 80061c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00f      	beq.n	80061ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d0:	3310      	adds	r3, #16
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 ff72 	bl	80070bc <xTaskRemoveFromEventList>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d007      	beq.n	80061ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80061de:	4b3d      	ldr	r3, [pc, #244]	; (80062d4 <xQueueReceive+0x1bc>)
 80061e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061e4:	601a      	str	r2, [r3, #0]
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80061ee:	f002 f869 	bl	80082c4 <vPortExitCritical>
				return pdPASS;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e069      	b.n	80062ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d103      	bne.n	8006204 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061fc:	f002 f862 	bl	80082c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006200:	2300      	movs	r3, #0
 8006202:	e062      	b.n	80062ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006206:	2b00      	cmp	r3, #0
 8006208:	d106      	bne.n	8006218 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800620a:	f107 0310 	add.w	r3, r7, #16
 800620e:	4618      	mov	r0, r3
 8006210:	f000 ffb8 	bl	8007184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006214:	2301      	movs	r3, #1
 8006216:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006218:	f002 f854 	bl	80082c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800621c:	f000 fd2a 	bl	8006c74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006220:	f002 f820 	bl	8008264 <vPortEnterCritical>
 8006224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006226:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800622a:	b25b      	sxtb	r3, r3
 800622c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006230:	d103      	bne.n	800623a <xQueueReceive+0x122>
 8006232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800623a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006240:	b25b      	sxtb	r3, r3
 8006242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006246:	d103      	bne.n	8006250 <xQueueReceive+0x138>
 8006248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006250:	f002 f838 	bl	80082c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006254:	1d3a      	adds	r2, r7, #4
 8006256:	f107 0310 	add.w	r3, r7, #16
 800625a:	4611      	mov	r1, r2
 800625c:	4618      	mov	r0, r3
 800625e:	f000 ffa7 	bl	80071b0 <xTaskCheckForTimeOut>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d123      	bne.n	80062b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800626a:	f000 fa3b 	bl	80066e4 <prvIsQueueEmpty>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d017      	beq.n	80062a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	3324      	adds	r3, #36	; 0x24
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	4611      	mov	r1, r2
 800627c:	4618      	mov	r0, r3
 800627e:	f000 fecd 	bl	800701c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006284:	f000 f9dc 	bl	8006640 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006288:	f000 fd02 	bl	8006c90 <xTaskResumeAll>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d189      	bne.n	80061a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006292:	4b10      	ldr	r3, [pc, #64]	; (80062d4 <xQueueReceive+0x1bc>)
 8006294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	e780      	b.n	80061a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80062a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062a6:	f000 f9cb 	bl	8006640 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062aa:	f000 fcf1 	bl	8006c90 <xTaskResumeAll>
 80062ae:	e77a      	b.n	80061a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80062b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062b2:	f000 f9c5 	bl	8006640 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062b6:	f000 fceb 	bl	8006c90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062bc:	f000 fa12 	bl	80066e4 <prvIsQueueEmpty>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f43f af6f 	beq.w	80061a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80062c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3730      	adds	r7, #48	; 0x30
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	e000ed04 	.word	0xe000ed04

080062d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08e      	sub	sp, #56	; 0x38
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80062e2:	2300      	movs	r3, #0
 80062e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80062ea:	2300      	movs	r3, #0
 80062ec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80062ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10a      	bne.n	800630a <xQueueSemaphoreTake+0x32>
	__asm volatile
 80062f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f8:	f383 8811 	msr	BASEPRI, r3
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	623b      	str	r3, [r7, #32]
}
 8006306:	bf00      	nop
 8006308:	e7fe      	b.n	8006308 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800630a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00a      	beq.n	8006328 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	61fb      	str	r3, [r7, #28]
}
 8006324:	bf00      	nop
 8006326:	e7fe      	b.n	8006326 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006328:	f001 f886 	bl	8007438 <xTaskGetSchedulerState>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d102      	bne.n	8006338 <xQueueSemaphoreTake+0x60>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <xQueueSemaphoreTake+0x64>
 8006338:	2301      	movs	r3, #1
 800633a:	e000      	b.n	800633e <xQueueSemaphoreTake+0x66>
 800633c:	2300      	movs	r3, #0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10a      	bne.n	8006358 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	61bb      	str	r3, [r7, #24]
}
 8006354:	bf00      	nop
 8006356:	e7fe      	b.n	8006356 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006358:	f001 ff84 	bl	8008264 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800635c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006360:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006364:	2b00      	cmp	r3, #0
 8006366:	d024      	beq.n	80063b2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636a:	1e5a      	subs	r2, r3, #1
 800636c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d104      	bne.n	8006382 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006378:	f001 f9d4 	bl	8007724 <pvTaskIncrementMutexHeldCount>
 800637c:	4602      	mov	r2, r0
 800637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006380:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00f      	beq.n	80063aa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800638a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638c:	3310      	adds	r3, #16
 800638e:	4618      	mov	r0, r3
 8006390:	f000 fe94 	bl	80070bc <xTaskRemoveFromEventList>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d007      	beq.n	80063aa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800639a:	4b54      	ldr	r3, [pc, #336]	; (80064ec <xQueueSemaphoreTake+0x214>)
 800639c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80063aa:	f001 ff8b 	bl	80082c4 <vPortExitCritical>
				return pdPASS;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e097      	b.n	80064e2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d111      	bne.n	80063dc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80063b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00a      	beq.n	80063d4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80063be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	617b      	str	r3, [r7, #20]
}
 80063d0:	bf00      	nop
 80063d2:	e7fe      	b.n	80063d2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80063d4:	f001 ff76 	bl	80082c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80063d8:	2300      	movs	r3, #0
 80063da:	e082      	b.n	80064e2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d106      	bne.n	80063f0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063e2:	f107 030c 	add.w	r3, r7, #12
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 fecc 	bl	8007184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063ec:	2301      	movs	r3, #1
 80063ee:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063f0:	f001 ff68 	bl	80082c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063f4:	f000 fc3e 	bl	8006c74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063f8:	f001 ff34 	bl	8008264 <vPortEnterCritical>
 80063fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006402:	b25b      	sxtb	r3, r3
 8006404:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006408:	d103      	bne.n	8006412 <xQueueSemaphoreTake+0x13a>
 800640a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006418:	b25b      	sxtb	r3, r3
 800641a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800641e:	d103      	bne.n	8006428 <xQueueSemaphoreTake+0x150>
 8006420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006422:	2200      	movs	r2, #0
 8006424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006428:	f001 ff4c 	bl	80082c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800642c:	463a      	mov	r2, r7
 800642e:	f107 030c 	add.w	r3, r7, #12
 8006432:	4611      	mov	r1, r2
 8006434:	4618      	mov	r0, r3
 8006436:	f000 febb 	bl	80071b0 <xTaskCheckForTimeOut>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d132      	bne.n	80064a6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006440:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006442:	f000 f94f 	bl	80066e4 <prvIsQueueEmpty>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d026      	beq.n	800649a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800644c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d109      	bne.n	8006468 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006454:	f001 ff06 	bl	8008264 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	4618      	mov	r0, r3
 800645e:	f001 f809 	bl	8007474 <xTaskPriorityInherit>
 8006462:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006464:	f001 ff2e 	bl	80082c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646a:	3324      	adds	r3, #36	; 0x24
 800646c:	683a      	ldr	r2, [r7, #0]
 800646e:	4611      	mov	r1, r2
 8006470:	4618      	mov	r0, r3
 8006472:	f000 fdd3 	bl	800701c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006476:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006478:	f000 f8e2 	bl	8006640 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800647c:	f000 fc08 	bl	8006c90 <xTaskResumeAll>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	f47f af68 	bne.w	8006358 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006488:	4b18      	ldr	r3, [pc, #96]	; (80064ec <xQueueSemaphoreTake+0x214>)
 800648a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800648e:	601a      	str	r2, [r3, #0]
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	e75e      	b.n	8006358 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800649a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800649c:	f000 f8d0 	bl	8006640 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064a0:	f000 fbf6 	bl	8006c90 <xTaskResumeAll>
 80064a4:	e758      	b.n	8006358 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80064a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064a8:	f000 f8ca 	bl	8006640 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064ac:	f000 fbf0 	bl	8006c90 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064b2:	f000 f917 	bl	80066e4 <prvIsQueueEmpty>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f43f af4d 	beq.w	8006358 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80064be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00d      	beq.n	80064e0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80064c4:	f001 fece 	bl	8008264 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80064c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064ca:	f000 f811 	bl	80064f0 <prvGetDisinheritPriorityAfterTimeout>
 80064ce:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80064d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064d6:	4618      	mov	r0, r3
 80064d8:	f001 f8a2 	bl	8007620 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80064dc:	f001 fef2 	bl	80082c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80064e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3738      	adds	r7, #56	; 0x38
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	e000ed04 	.word	0xe000ed04

080064f0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d006      	beq.n	800650e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	e001      	b.n	8006512 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800650e:	2300      	movs	r3, #0
 8006510:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006512:	68fb      	ldr	r3, [r7, #12]
	}
 8006514:	4618      	mov	r0, r3
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800652c:	2300      	movs	r3, #0
 800652e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006534:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10d      	bne.n	800655a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d14d      	bne.n	80065e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	4618      	mov	r0, r3
 800654c:	f000 fffa 	bl	8007544 <xTaskPriorityDisinherit>
 8006550:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	609a      	str	r2, [r3, #8]
 8006558:	e043      	b.n	80065e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d119      	bne.n	8006594 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6858      	ldr	r0, [r3, #4]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006568:	461a      	mov	r2, r3
 800656a:	68b9      	ldr	r1, [r7, #8]
 800656c:	f002 f9b2 	bl	80088d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006578:	441a      	add	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	429a      	cmp	r2, r3
 8006588:	d32b      	bcc.n	80065e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	605a      	str	r2, [r3, #4]
 8006592:	e026      	b.n	80065e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	68d8      	ldr	r0, [r3, #12]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659c:	461a      	mov	r2, r3
 800659e:	68b9      	ldr	r1, [r7, #8]
 80065a0:	f002 f998 	bl	80088d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	68da      	ldr	r2, [r3, #12]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ac:	425b      	negs	r3, r3
 80065ae:	441a      	add	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d207      	bcs.n	80065d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	689a      	ldr	r2, [r3, #8]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c8:	425b      	negs	r3, r3
 80065ca:	441a      	add	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d105      	bne.n	80065e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d002      	beq.n	80065e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	3b01      	subs	r3, #1
 80065e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	1c5a      	adds	r2, r3, #1
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80065ea:	697b      	ldr	r3, [r7, #20]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3718      	adds	r7, #24
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006602:	2b00      	cmp	r3, #0
 8006604:	d018      	beq.n	8006638 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660e:	441a      	add	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68da      	ldr	r2, [r3, #12]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	429a      	cmp	r2, r3
 800661e:	d303      	bcc.n	8006628 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68d9      	ldr	r1, [r3, #12]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006630:	461a      	mov	r2, r3
 8006632:	6838      	ldr	r0, [r7, #0]
 8006634:	f002 f94e 	bl	80088d4 <memcpy>
	}
}
 8006638:	bf00      	nop
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006648:	f001 fe0c 	bl	8008264 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006652:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006654:	e011      	b.n	800667a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665a:	2b00      	cmp	r3, #0
 800665c:	d012      	beq.n	8006684 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	3324      	adds	r3, #36	; 0x24
 8006662:	4618      	mov	r0, r3
 8006664:	f000 fd2a 	bl	80070bc <xTaskRemoveFromEventList>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800666e:	f000 fe01 	bl	8007274 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006672:	7bfb      	ldrb	r3, [r7, #15]
 8006674:	3b01      	subs	r3, #1
 8006676:	b2db      	uxtb	r3, r3
 8006678:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800667a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800667e:	2b00      	cmp	r3, #0
 8006680:	dce9      	bgt.n	8006656 <prvUnlockQueue+0x16>
 8006682:	e000      	b.n	8006686 <prvUnlockQueue+0x46>
					break;
 8006684:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	22ff      	movs	r2, #255	; 0xff
 800668a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800668e:	f001 fe19 	bl	80082c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006692:	f001 fde7 	bl	8008264 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800669c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800669e:	e011      	b.n	80066c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d012      	beq.n	80066ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	3310      	adds	r3, #16
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 fd05 	bl	80070bc <xTaskRemoveFromEventList>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80066b8:	f000 fddc 	bl	8007274 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80066bc:	7bbb      	ldrb	r3, [r7, #14]
 80066be:	3b01      	subs	r3, #1
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	dce9      	bgt.n	80066a0 <prvUnlockQueue+0x60>
 80066cc:	e000      	b.n	80066d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80066ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	22ff      	movs	r2, #255	; 0xff
 80066d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80066d8:	f001 fdf4 	bl	80082c4 <vPortExitCritical>
}
 80066dc:	bf00      	nop
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066ec:	f001 fdba 	bl	8008264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d102      	bne.n	80066fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80066f8:	2301      	movs	r3, #1
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	e001      	b.n	8006702 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80066fe:	2300      	movs	r3, #0
 8006700:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006702:	f001 fddf 	bl	80082c4 <vPortExitCritical>

	return xReturn;
 8006706:	68fb      	ldr	r3, [r7, #12]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006718:	f001 fda4 	bl	8008264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006724:	429a      	cmp	r2, r3
 8006726:	d102      	bne.n	800672e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006728:	2301      	movs	r3, #1
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	e001      	b.n	8006732 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800672e:	2300      	movs	r3, #0
 8006730:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006732:	f001 fdc7 	bl	80082c4 <vPortExitCritical>

	return xReturn;
 8006736:	68fb      	ldr	r3, [r7, #12]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800674a:	2300      	movs	r3, #0
 800674c:	60fb      	str	r3, [r7, #12]
 800674e:	e014      	b.n	800677a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006750:	4a0f      	ldr	r2, [pc, #60]	; (8006790 <vQueueAddToRegistry+0x50>)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10b      	bne.n	8006774 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800675c:	490c      	ldr	r1, [pc, #48]	; (8006790 <vQueueAddToRegistry+0x50>)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006766:	4a0a      	ldr	r2, [pc, #40]	; (8006790 <vQueueAddToRegistry+0x50>)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	00db      	lsls	r3, r3, #3
 800676c:	4413      	add	r3, r2
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006772:	e006      	b.n	8006782 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	3301      	adds	r3, #1
 8006778:	60fb      	str	r3, [r7, #12]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2b07      	cmp	r3, #7
 800677e:	d9e7      	bls.n	8006750 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006780:	bf00      	nop
 8006782:	bf00      	nop
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	200007e8 	.word	0x200007e8

08006794 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80067a4:	f001 fd5e 	bl	8008264 <vPortEnterCritical>
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067ae:	b25b      	sxtb	r3, r3
 80067b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067b4:	d103      	bne.n	80067be <vQueueWaitForMessageRestricted+0x2a>
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067c4:	b25b      	sxtb	r3, r3
 80067c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067ca:	d103      	bne.n	80067d4 <vQueueWaitForMessageRestricted+0x40>
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067d4:	f001 fd76 	bl	80082c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d106      	bne.n	80067ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	3324      	adds	r3, #36	; 0x24
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	68b9      	ldr	r1, [r7, #8]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 fc3b 	bl	8007064 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80067ee:	6978      	ldr	r0, [r7, #20]
 80067f0:	f7ff ff26 	bl	8006640 <prvUnlockQueue>
	}
 80067f4:	bf00      	nop
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b08e      	sub	sp, #56	; 0x38
 8006800:	af04      	add	r7, sp, #16
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
 8006808:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800680a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10a      	bne.n	8006826 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	623b      	str	r3, [r7, #32]
}
 8006822:	bf00      	nop
 8006824:	e7fe      	b.n	8006824 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10a      	bne.n	8006842 <xTaskCreateStatic+0x46>
	__asm volatile
 800682c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	61fb      	str	r3, [r7, #28]
}
 800683e:	bf00      	nop
 8006840:	e7fe      	b.n	8006840 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006842:	235c      	movs	r3, #92	; 0x5c
 8006844:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	2b5c      	cmp	r3, #92	; 0x5c
 800684a:	d00a      	beq.n	8006862 <xTaskCreateStatic+0x66>
	__asm volatile
 800684c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006850:	f383 8811 	msr	BASEPRI, r3
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	61bb      	str	r3, [r7, #24]
}
 800685e:	bf00      	nop
 8006860:	e7fe      	b.n	8006860 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006862:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006866:	2b00      	cmp	r3, #0
 8006868:	d01e      	beq.n	80068a8 <xTaskCreateStatic+0xac>
 800686a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686c:	2b00      	cmp	r3, #0
 800686e:	d01b      	beq.n	80068a8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006872:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006878:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	2202      	movs	r2, #2
 800687e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006882:	2300      	movs	r3, #0
 8006884:	9303      	str	r3, [sp, #12]
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	9302      	str	r3, [sp, #8]
 800688a:	f107 0314 	add.w	r3, r7, #20
 800688e:	9301      	str	r3, [sp, #4]
 8006890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	68b9      	ldr	r1, [r7, #8]
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 f850 	bl	8006940 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068a2:	f000 f8dd 	bl	8006a60 <prvAddNewTaskToReadyList>
 80068a6:	e001      	b.n	80068ac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80068a8:	2300      	movs	r3, #0
 80068aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80068ac:	697b      	ldr	r3, [r7, #20]
	}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3728      	adds	r7, #40	; 0x28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b08c      	sub	sp, #48	; 0x30
 80068ba:	af04      	add	r7, sp, #16
 80068bc:	60f8      	str	r0, [r7, #12]
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	603b      	str	r3, [r7, #0]
 80068c2:	4613      	mov	r3, r2
 80068c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80068c6:	88fb      	ldrh	r3, [r7, #6]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4618      	mov	r0, r3
 80068cc:	f001 fdec 	bl	80084a8 <pvPortMalloc>
 80068d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00e      	beq.n	80068f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80068d8:	205c      	movs	r0, #92	; 0x5c
 80068da:	f001 fde5 	bl	80084a8 <pvPortMalloc>
 80068de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	631a      	str	r2, [r3, #48]	; 0x30
 80068ec:	e005      	b.n	80068fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068ee:	6978      	ldr	r0, [r7, #20]
 80068f0:	f001 fea6 	bl	8008640 <vPortFree>
 80068f4:	e001      	b.n	80068fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068f6:	2300      	movs	r3, #0
 80068f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d017      	beq.n	8006930 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006908:	88fa      	ldrh	r2, [r7, #6]
 800690a:	2300      	movs	r3, #0
 800690c:	9303      	str	r3, [sp, #12]
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	9302      	str	r3, [sp, #8]
 8006912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006914:	9301      	str	r3, [sp, #4]
 8006916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	68b9      	ldr	r1, [r7, #8]
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f000 f80e 	bl	8006940 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006924:	69f8      	ldr	r0, [r7, #28]
 8006926:	f000 f89b 	bl	8006a60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800692a:	2301      	movs	r3, #1
 800692c:	61bb      	str	r3, [r7, #24]
 800692e:	e002      	b.n	8006936 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006934:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006936:	69bb      	ldr	r3, [r7, #24]
	}
 8006938:	4618      	mov	r0, r3
 800693a:	3720      	adds	r7, #32
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b088      	sub	sp, #32
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
 800694c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	461a      	mov	r2, r3
 8006958:	21a5      	movs	r1, #165	; 0xa5
 800695a:	f001 ff8f 	bl	800887c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006968:	3b01      	subs	r3, #1
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4413      	add	r3, r2
 800696e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	f023 0307 	bic.w	r3, r3, #7
 8006976:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	f003 0307 	and.w	r3, r3, #7
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00a      	beq.n	8006998 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	617b      	str	r3, [r7, #20]
}
 8006994:	bf00      	nop
 8006996:	e7fe      	b.n	8006996 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d01f      	beq.n	80069de <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800699e:	2300      	movs	r3, #0
 80069a0:	61fb      	str	r3, [r7, #28]
 80069a2:	e012      	b.n	80069ca <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	4413      	add	r3, r2
 80069aa:	7819      	ldrb	r1, [r3, #0]
 80069ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	4413      	add	r3, r2
 80069b2:	3334      	adds	r3, #52	; 0x34
 80069b4:	460a      	mov	r2, r1
 80069b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	4413      	add	r3, r2
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d006      	beq.n	80069d2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	3301      	adds	r3, #1
 80069c8:	61fb      	str	r3, [r7, #28]
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	2b0f      	cmp	r3, #15
 80069ce:	d9e9      	bls.n	80069a4 <prvInitialiseNewTask+0x64>
 80069d0:	e000      	b.n	80069d4 <prvInitialiseNewTask+0x94>
			{
				break;
 80069d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069dc:	e003      	b.n	80069e6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80069de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e8:	2b37      	cmp	r3, #55	; 0x37
 80069ea:	d901      	bls.n	80069f0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069ec:	2337      	movs	r3, #55	; 0x37
 80069ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80069f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80069f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80069fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fe:	2200      	movs	r2, #0
 8006a00:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a04:	3304      	adds	r3, #4
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fe ffe8 	bl	80059dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	3318      	adds	r3, #24
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7fe ffe3 	bl	80059dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2e:	2200      	movs	r2, #0
 8006a30:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a3a:	683a      	ldr	r2, [r7, #0]
 8006a3c:	68f9      	ldr	r1, [r7, #12]
 8006a3e:	69b8      	ldr	r0, [r7, #24]
 8006a40:	f001 fae0 	bl	8008004 <pxPortInitialiseStack>
 8006a44:	4602      	mov	r2, r0
 8006a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a48:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d002      	beq.n	8006a56 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a56:	bf00      	nop
 8006a58:	3720      	adds	r7, #32
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
	...

08006a60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a68:	f001 fbfc 	bl	8008264 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a6c:	4b2d      	ldr	r3, [pc, #180]	; (8006b24 <prvAddNewTaskToReadyList+0xc4>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3301      	adds	r3, #1
 8006a72:	4a2c      	ldr	r2, [pc, #176]	; (8006b24 <prvAddNewTaskToReadyList+0xc4>)
 8006a74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a76:	4b2c      	ldr	r3, [pc, #176]	; (8006b28 <prvAddNewTaskToReadyList+0xc8>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d109      	bne.n	8006a92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a7e:	4a2a      	ldr	r2, [pc, #168]	; (8006b28 <prvAddNewTaskToReadyList+0xc8>)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a84:	4b27      	ldr	r3, [pc, #156]	; (8006b24 <prvAddNewTaskToReadyList+0xc4>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d110      	bne.n	8006aae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a8c:	f000 fc16 	bl	80072bc <prvInitialiseTaskLists>
 8006a90:	e00d      	b.n	8006aae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a92:	4b26      	ldr	r3, [pc, #152]	; (8006b2c <prvAddNewTaskToReadyList+0xcc>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d109      	bne.n	8006aae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a9a:	4b23      	ldr	r3, [pc, #140]	; (8006b28 <prvAddNewTaskToReadyList+0xc8>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d802      	bhi.n	8006aae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006aa8:	4a1f      	ldr	r2, [pc, #124]	; (8006b28 <prvAddNewTaskToReadyList+0xc8>)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006aae:	4b20      	ldr	r3, [pc, #128]	; (8006b30 <prvAddNewTaskToReadyList+0xd0>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	4a1e      	ldr	r2, [pc, #120]	; (8006b30 <prvAddNewTaskToReadyList+0xd0>)
 8006ab6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ab8:	4b1d      	ldr	r3, [pc, #116]	; (8006b30 <prvAddNewTaskToReadyList+0xd0>)
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac4:	4b1b      	ldr	r3, [pc, #108]	; (8006b34 <prvAddNewTaskToReadyList+0xd4>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d903      	bls.n	8006ad4 <prvAddNewTaskToReadyList+0x74>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad0:	4a18      	ldr	r2, [pc, #96]	; (8006b34 <prvAddNewTaskToReadyList+0xd4>)
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad8:	4613      	mov	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4a15      	ldr	r2, [pc, #84]	; (8006b38 <prvAddNewTaskToReadyList+0xd8>)
 8006ae2:	441a      	add	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	3304      	adds	r3, #4
 8006ae8:	4619      	mov	r1, r3
 8006aea:	4610      	mov	r0, r2
 8006aec:	f7fe ff83 	bl	80059f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006af0:	f001 fbe8 	bl	80082c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006af4:	4b0d      	ldr	r3, [pc, #52]	; (8006b2c <prvAddNewTaskToReadyList+0xcc>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00e      	beq.n	8006b1a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006afc:	4b0a      	ldr	r3, [pc, #40]	; (8006b28 <prvAddNewTaskToReadyList+0xc8>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d207      	bcs.n	8006b1a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b0a:	4b0c      	ldr	r3, [pc, #48]	; (8006b3c <prvAddNewTaskToReadyList+0xdc>)
 8006b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b1a:	bf00      	nop
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	20000cfc 	.word	0x20000cfc
 8006b28:	20000828 	.word	0x20000828
 8006b2c:	20000d08 	.word	0x20000d08
 8006b30:	20000d18 	.word	0x20000d18
 8006b34:	20000d04 	.word	0x20000d04
 8006b38:	2000082c 	.word	0x2000082c
 8006b3c:	e000ed04 	.word	0xe000ed04

08006b40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d017      	beq.n	8006b82 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b52:	4b13      	ldr	r3, [pc, #76]	; (8006ba0 <vTaskDelay+0x60>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00a      	beq.n	8006b70 <vTaskDelay+0x30>
	__asm volatile
 8006b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	60bb      	str	r3, [r7, #8]
}
 8006b6c:	bf00      	nop
 8006b6e:	e7fe      	b.n	8006b6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006b70:	f000 f880 	bl	8006c74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b74:	2100      	movs	r1, #0
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fde8 	bl	800774c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b7c:	f000 f888 	bl	8006c90 <xTaskResumeAll>
 8006b80:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d107      	bne.n	8006b98 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006b88:	4b06      	ldr	r3, [pc, #24]	; (8006ba4 <vTaskDelay+0x64>)
 8006b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b8e:	601a      	str	r2, [r3, #0]
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b98:	bf00      	nop
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	20000d24 	.word	0x20000d24
 8006ba4:	e000ed04 	.word	0xe000ed04

08006ba8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08a      	sub	sp, #40	; 0x28
 8006bac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006bb6:	463a      	mov	r2, r7
 8006bb8:	1d39      	adds	r1, r7, #4
 8006bba:	f107 0308 	add.w	r3, r7, #8
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7fe feb8 	bl	8005934 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	9202      	str	r2, [sp, #8]
 8006bcc:	9301      	str	r3, [sp, #4]
 8006bce:	2300      	movs	r3, #0
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	460a      	mov	r2, r1
 8006bd6:	4921      	ldr	r1, [pc, #132]	; (8006c5c <vTaskStartScheduler+0xb4>)
 8006bd8:	4821      	ldr	r0, [pc, #132]	; (8006c60 <vTaskStartScheduler+0xb8>)
 8006bda:	f7ff fe0f 	bl	80067fc <xTaskCreateStatic>
 8006bde:	4603      	mov	r3, r0
 8006be0:	4a20      	ldr	r2, [pc, #128]	; (8006c64 <vTaskStartScheduler+0xbc>)
 8006be2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006be4:	4b1f      	ldr	r3, [pc, #124]	; (8006c64 <vTaskStartScheduler+0xbc>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d002      	beq.n	8006bf2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006bec:	2301      	movs	r3, #1
 8006bee:	617b      	str	r3, [r7, #20]
 8006bf0:	e001      	b.n	8006bf6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d102      	bne.n	8006c02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006bfc:	f000 fdfa 	bl	80077f4 <xTimerCreateTimerTask>
 8006c00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d116      	bne.n	8006c36 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0c:	f383 8811 	msr	BASEPRI, r3
 8006c10:	f3bf 8f6f 	isb	sy
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	613b      	str	r3, [r7, #16]
}
 8006c1a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c1c:	4b12      	ldr	r3, [pc, #72]	; (8006c68 <vTaskStartScheduler+0xc0>)
 8006c1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c22:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c24:	4b11      	ldr	r3, [pc, #68]	; (8006c6c <vTaskStartScheduler+0xc4>)
 8006c26:	2201      	movs	r2, #1
 8006c28:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c2a:	4b11      	ldr	r3, [pc, #68]	; (8006c70 <vTaskStartScheduler+0xc8>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c30:	f001 fa76 	bl	8008120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c34:	e00e      	b.n	8006c54 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c3c:	d10a      	bne.n	8006c54 <vTaskStartScheduler+0xac>
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	60fb      	str	r3, [r7, #12]
}
 8006c50:	bf00      	nop
 8006c52:	e7fe      	b.n	8006c52 <vTaskStartScheduler+0xaa>
}
 8006c54:	bf00      	nop
 8006c56:	3718      	adds	r7, #24
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	08008988 	.word	0x08008988
 8006c60:	0800728d 	.word	0x0800728d
 8006c64:	20000d20 	.word	0x20000d20
 8006c68:	20000d1c 	.word	0x20000d1c
 8006c6c:	20000d08 	.word	0x20000d08
 8006c70:	20000d00 	.word	0x20000d00

08006c74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c74:	b480      	push	{r7}
 8006c76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006c78:	4b04      	ldr	r3, [pc, #16]	; (8006c8c <vTaskSuspendAll+0x18>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	4a03      	ldr	r2, [pc, #12]	; (8006c8c <vTaskSuspendAll+0x18>)
 8006c80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006c82:	bf00      	nop
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr
 8006c8c:	20000d24 	.word	0x20000d24

08006c90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c96:	2300      	movs	r3, #0
 8006c98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c9e:	4b42      	ldr	r3, [pc, #264]	; (8006da8 <xTaskResumeAll+0x118>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10a      	bne.n	8006cbc <xTaskResumeAll+0x2c>
	__asm volatile
 8006ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	603b      	str	r3, [r7, #0]
}
 8006cb8:	bf00      	nop
 8006cba:	e7fe      	b.n	8006cba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006cbc:	f001 fad2 	bl	8008264 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006cc0:	4b39      	ldr	r3, [pc, #228]	; (8006da8 <xTaskResumeAll+0x118>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	4a38      	ldr	r2, [pc, #224]	; (8006da8 <xTaskResumeAll+0x118>)
 8006cc8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cca:	4b37      	ldr	r3, [pc, #220]	; (8006da8 <xTaskResumeAll+0x118>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d162      	bne.n	8006d98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006cd2:	4b36      	ldr	r3, [pc, #216]	; (8006dac <xTaskResumeAll+0x11c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d05e      	beq.n	8006d98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cda:	e02f      	b.n	8006d3c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cdc:	4b34      	ldr	r3, [pc, #208]	; (8006db0 <xTaskResumeAll+0x120>)
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	3318      	adds	r3, #24
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7fe fee1 	bl	8005ab0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fe fedc 	bl	8005ab0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cfc:	4b2d      	ldr	r3, [pc, #180]	; (8006db4 <xTaskResumeAll+0x124>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d903      	bls.n	8006d0c <xTaskResumeAll+0x7c>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d08:	4a2a      	ldr	r2, [pc, #168]	; (8006db4 <xTaskResumeAll+0x124>)
 8006d0a:	6013      	str	r3, [r2, #0]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d10:	4613      	mov	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4a27      	ldr	r2, [pc, #156]	; (8006db8 <xTaskResumeAll+0x128>)
 8006d1a:	441a      	add	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	3304      	adds	r3, #4
 8006d20:	4619      	mov	r1, r3
 8006d22:	4610      	mov	r0, r2
 8006d24:	f7fe fe67 	bl	80059f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2c:	4b23      	ldr	r3, [pc, #140]	; (8006dbc <xTaskResumeAll+0x12c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d302      	bcc.n	8006d3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006d36:	4b22      	ldr	r3, [pc, #136]	; (8006dc0 <xTaskResumeAll+0x130>)
 8006d38:	2201      	movs	r2, #1
 8006d3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d3c:	4b1c      	ldr	r3, [pc, #112]	; (8006db0 <xTaskResumeAll+0x120>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1cb      	bne.n	8006cdc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d4a:	f000 fb55 	bl	80073f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006d4e:	4b1d      	ldr	r3, [pc, #116]	; (8006dc4 <xTaskResumeAll+0x134>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d010      	beq.n	8006d7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d5a:	f000 f847 	bl	8006dec <xTaskIncrementTick>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006d64:	4b16      	ldr	r3, [pc, #88]	; (8006dc0 <xTaskResumeAll+0x130>)
 8006d66:	2201      	movs	r2, #1
 8006d68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1f1      	bne.n	8006d5a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006d76:	4b13      	ldr	r3, [pc, #76]	; (8006dc4 <xTaskResumeAll+0x134>)
 8006d78:	2200      	movs	r2, #0
 8006d7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d7c:	4b10      	ldr	r3, [pc, #64]	; (8006dc0 <xTaskResumeAll+0x130>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d009      	beq.n	8006d98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d84:	2301      	movs	r3, #1
 8006d86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d88:	4b0f      	ldr	r3, [pc, #60]	; (8006dc8 <xTaskResumeAll+0x138>)
 8006d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d8e:	601a      	str	r2, [r3, #0]
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d98:	f001 fa94 	bl	80082c4 <vPortExitCritical>

	return xAlreadyYielded;
 8006d9c:	68bb      	ldr	r3, [r7, #8]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	20000d24 	.word	0x20000d24
 8006dac:	20000cfc 	.word	0x20000cfc
 8006db0:	20000cbc 	.word	0x20000cbc
 8006db4:	20000d04 	.word	0x20000d04
 8006db8:	2000082c 	.word	0x2000082c
 8006dbc:	20000828 	.word	0x20000828
 8006dc0:	20000d10 	.word	0x20000d10
 8006dc4:	20000d0c 	.word	0x20000d0c
 8006dc8:	e000ed04 	.word	0xe000ed04

08006dcc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006dd2:	4b05      	ldr	r3, [pc, #20]	; (8006de8 <xTaskGetTickCount+0x1c>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006dd8:	687b      	ldr	r3, [r7, #4]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	20000d00 	.word	0x20000d00

08006dec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006df2:	2300      	movs	r3, #0
 8006df4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006df6:	4b4f      	ldr	r3, [pc, #316]	; (8006f34 <xTaskIncrementTick+0x148>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f040 808f 	bne.w	8006f1e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e00:	4b4d      	ldr	r3, [pc, #308]	; (8006f38 <xTaskIncrementTick+0x14c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3301      	adds	r3, #1
 8006e06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e08:	4a4b      	ldr	r2, [pc, #300]	; (8006f38 <xTaskIncrementTick+0x14c>)
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d120      	bne.n	8006e56 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e14:	4b49      	ldr	r3, [pc, #292]	; (8006f3c <xTaskIncrementTick+0x150>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00a      	beq.n	8006e34 <xTaskIncrementTick+0x48>
	__asm volatile
 8006e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	603b      	str	r3, [r7, #0]
}
 8006e30:	bf00      	nop
 8006e32:	e7fe      	b.n	8006e32 <xTaskIncrementTick+0x46>
 8006e34:	4b41      	ldr	r3, [pc, #260]	; (8006f3c <xTaskIncrementTick+0x150>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	60fb      	str	r3, [r7, #12]
 8006e3a:	4b41      	ldr	r3, [pc, #260]	; (8006f40 <xTaskIncrementTick+0x154>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a3f      	ldr	r2, [pc, #252]	; (8006f3c <xTaskIncrementTick+0x150>)
 8006e40:	6013      	str	r3, [r2, #0]
 8006e42:	4a3f      	ldr	r2, [pc, #252]	; (8006f40 <xTaskIncrementTick+0x154>)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6013      	str	r3, [r2, #0]
 8006e48:	4b3e      	ldr	r3, [pc, #248]	; (8006f44 <xTaskIncrementTick+0x158>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	4a3d      	ldr	r2, [pc, #244]	; (8006f44 <xTaskIncrementTick+0x158>)
 8006e50:	6013      	str	r3, [r2, #0]
 8006e52:	f000 fad1 	bl	80073f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e56:	4b3c      	ldr	r3, [pc, #240]	; (8006f48 <xTaskIncrementTick+0x15c>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d349      	bcc.n	8006ef4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e60:	4b36      	ldr	r3, [pc, #216]	; (8006f3c <xTaskIncrementTick+0x150>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d104      	bne.n	8006e74 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e6a:	4b37      	ldr	r3, [pc, #220]	; (8006f48 <xTaskIncrementTick+0x15c>)
 8006e6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e70:	601a      	str	r2, [r3, #0]
					break;
 8006e72:	e03f      	b.n	8006ef4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e74:	4b31      	ldr	r3, [pc, #196]	; (8006f3c <xTaskIncrementTick+0x150>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d203      	bcs.n	8006e94 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e8c:	4a2e      	ldr	r2, [pc, #184]	; (8006f48 <xTaskIncrementTick+0x15c>)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e92:	e02f      	b.n	8006ef4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	3304      	adds	r3, #4
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7fe fe09 	bl	8005ab0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d004      	beq.n	8006eb0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	3318      	adds	r3, #24
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7fe fe00 	bl	8005ab0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb4:	4b25      	ldr	r3, [pc, #148]	; (8006f4c <xTaskIncrementTick+0x160>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d903      	bls.n	8006ec4 <xTaskIncrementTick+0xd8>
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec0:	4a22      	ldr	r2, [pc, #136]	; (8006f4c <xTaskIncrementTick+0x160>)
 8006ec2:	6013      	str	r3, [r2, #0]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec8:	4613      	mov	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4a1f      	ldr	r2, [pc, #124]	; (8006f50 <xTaskIncrementTick+0x164>)
 8006ed2:	441a      	add	r2, r3
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	3304      	adds	r3, #4
 8006ed8:	4619      	mov	r1, r3
 8006eda:	4610      	mov	r0, r2
 8006edc:	f7fe fd8b 	bl	80059f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee4:	4b1b      	ldr	r3, [pc, #108]	; (8006f54 <xTaskIncrementTick+0x168>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d3b8      	bcc.n	8006e60 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ef2:	e7b5      	b.n	8006e60 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ef4:	4b17      	ldr	r3, [pc, #92]	; (8006f54 <xTaskIncrementTick+0x168>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006efa:	4915      	ldr	r1, [pc, #84]	; (8006f50 <xTaskIncrementTick+0x164>)
 8006efc:	4613      	mov	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	440b      	add	r3, r1
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d901      	bls.n	8006f10 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006f10:	4b11      	ldr	r3, [pc, #68]	; (8006f58 <xTaskIncrementTick+0x16c>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d007      	beq.n	8006f28 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	617b      	str	r3, [r7, #20]
 8006f1c:	e004      	b.n	8006f28 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006f1e:	4b0f      	ldr	r3, [pc, #60]	; (8006f5c <xTaskIncrementTick+0x170>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	3301      	adds	r3, #1
 8006f24:	4a0d      	ldr	r2, [pc, #52]	; (8006f5c <xTaskIncrementTick+0x170>)
 8006f26:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006f28:	697b      	ldr	r3, [r7, #20]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3718      	adds	r7, #24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	20000d24 	.word	0x20000d24
 8006f38:	20000d00 	.word	0x20000d00
 8006f3c:	20000cb4 	.word	0x20000cb4
 8006f40:	20000cb8 	.word	0x20000cb8
 8006f44:	20000d14 	.word	0x20000d14
 8006f48:	20000d1c 	.word	0x20000d1c
 8006f4c:	20000d04 	.word	0x20000d04
 8006f50:	2000082c 	.word	0x2000082c
 8006f54:	20000828 	.word	0x20000828
 8006f58:	20000d10 	.word	0x20000d10
 8006f5c:	20000d0c 	.word	0x20000d0c

08006f60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f66:	4b28      	ldr	r3, [pc, #160]	; (8007008 <vTaskSwitchContext+0xa8>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d003      	beq.n	8006f76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f6e:	4b27      	ldr	r3, [pc, #156]	; (800700c <vTaskSwitchContext+0xac>)
 8006f70:	2201      	movs	r2, #1
 8006f72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f74:	e041      	b.n	8006ffa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006f76:	4b25      	ldr	r3, [pc, #148]	; (800700c <vTaskSwitchContext+0xac>)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f7c:	4b24      	ldr	r3, [pc, #144]	; (8007010 <vTaskSwitchContext+0xb0>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	60fb      	str	r3, [r7, #12]
 8006f82:	e010      	b.n	8006fa6 <vTaskSwitchContext+0x46>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10a      	bne.n	8006fa0 <vTaskSwitchContext+0x40>
	__asm volatile
 8006f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	607b      	str	r3, [r7, #4]
}
 8006f9c:	bf00      	nop
 8006f9e:	e7fe      	b.n	8006f9e <vTaskSwitchContext+0x3e>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	60fb      	str	r3, [r7, #12]
 8006fa6:	491b      	ldr	r1, [pc, #108]	; (8007014 <vTaskSwitchContext+0xb4>)
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	4613      	mov	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	440b      	add	r3, r1
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d0e4      	beq.n	8006f84 <vTaskSwitchContext+0x24>
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4a13      	ldr	r2, [pc, #76]	; (8007014 <vTaskSwitchContext+0xb4>)
 8006fc6:	4413      	add	r3, r2
 8006fc8:	60bb      	str	r3, [r7, #8]
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	605a      	str	r2, [r3, #4]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	3308      	adds	r3, #8
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d104      	bne.n	8006fea <vTaskSwitchContext+0x8a>
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	685a      	ldr	r2, [r3, #4]
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	605a      	str	r2, [r3, #4]
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	4a09      	ldr	r2, [pc, #36]	; (8007018 <vTaskSwitchContext+0xb8>)
 8006ff2:	6013      	str	r3, [r2, #0]
 8006ff4:	4a06      	ldr	r2, [pc, #24]	; (8007010 <vTaskSwitchContext+0xb0>)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6013      	str	r3, [r2, #0]
}
 8006ffa:	bf00      	nop
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	20000d24 	.word	0x20000d24
 800700c:	20000d10 	.word	0x20000d10
 8007010:	20000d04 	.word	0x20000d04
 8007014:	2000082c 	.word	0x2000082c
 8007018:	20000828 	.word	0x20000828

0800701c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10a      	bne.n	8007042 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	60fb      	str	r3, [r7, #12]
}
 800703e:	bf00      	nop
 8007040:	e7fe      	b.n	8007040 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007042:	4b07      	ldr	r3, [pc, #28]	; (8007060 <vTaskPlaceOnEventList+0x44>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3318      	adds	r3, #24
 8007048:	4619      	mov	r1, r3
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7fe fcf7 	bl	8005a3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007050:	2101      	movs	r1, #1
 8007052:	6838      	ldr	r0, [r7, #0]
 8007054:	f000 fb7a 	bl	800774c <prvAddCurrentTaskToDelayedList>
}
 8007058:	bf00      	nop
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	20000828 	.word	0x20000828

08007064 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10a      	bne.n	800708c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	617b      	str	r3, [r7, #20]
}
 8007088:	bf00      	nop
 800708a:	e7fe      	b.n	800708a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800708c:	4b0a      	ldr	r3, [pc, #40]	; (80070b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3318      	adds	r3, #24
 8007092:	4619      	mov	r1, r3
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f7fe fcae 	bl	80059f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d002      	beq.n	80070a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80070a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80070a6:	6879      	ldr	r1, [r7, #4]
 80070a8:	68b8      	ldr	r0, [r7, #8]
 80070aa:	f000 fb4f 	bl	800774c <prvAddCurrentTaskToDelayedList>
	}
 80070ae:	bf00      	nop
 80070b0:	3718      	adds	r7, #24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	20000828 	.word	0x20000828

080070bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10a      	bne.n	80070e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80070d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	60fb      	str	r3, [r7, #12]
}
 80070e4:	bf00      	nop
 80070e6:	e7fe      	b.n	80070e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	3318      	adds	r3, #24
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7fe fcdf 	bl	8005ab0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070f2:	4b1e      	ldr	r3, [pc, #120]	; (800716c <xTaskRemoveFromEventList+0xb0>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d11d      	bne.n	8007136 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	3304      	adds	r3, #4
 80070fe:	4618      	mov	r0, r3
 8007100:	f7fe fcd6 	bl	8005ab0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007108:	4b19      	ldr	r3, [pc, #100]	; (8007170 <xTaskRemoveFromEventList+0xb4>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	429a      	cmp	r2, r3
 800710e:	d903      	bls.n	8007118 <xTaskRemoveFromEventList+0x5c>
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007114:	4a16      	ldr	r2, [pc, #88]	; (8007170 <xTaskRemoveFromEventList+0xb4>)
 8007116:	6013      	str	r3, [r2, #0]
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800711c:	4613      	mov	r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4413      	add	r3, r2
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4a13      	ldr	r2, [pc, #76]	; (8007174 <xTaskRemoveFromEventList+0xb8>)
 8007126:	441a      	add	r2, r3
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	3304      	adds	r3, #4
 800712c:	4619      	mov	r1, r3
 800712e:	4610      	mov	r0, r2
 8007130:	f7fe fc61 	bl	80059f6 <vListInsertEnd>
 8007134:	e005      	b.n	8007142 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	3318      	adds	r3, #24
 800713a:	4619      	mov	r1, r3
 800713c:	480e      	ldr	r0, [pc, #56]	; (8007178 <xTaskRemoveFromEventList+0xbc>)
 800713e:	f7fe fc5a 	bl	80059f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007146:	4b0d      	ldr	r3, [pc, #52]	; (800717c <xTaskRemoveFromEventList+0xc0>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714c:	429a      	cmp	r2, r3
 800714e:	d905      	bls.n	800715c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007150:	2301      	movs	r3, #1
 8007152:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007154:	4b0a      	ldr	r3, [pc, #40]	; (8007180 <xTaskRemoveFromEventList+0xc4>)
 8007156:	2201      	movs	r2, #1
 8007158:	601a      	str	r2, [r3, #0]
 800715a:	e001      	b.n	8007160 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800715c:	2300      	movs	r3, #0
 800715e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007160:	697b      	ldr	r3, [r7, #20]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	20000d24 	.word	0x20000d24
 8007170:	20000d04 	.word	0x20000d04
 8007174:	2000082c 	.word	0x2000082c
 8007178:	20000cbc 	.word	0x20000cbc
 800717c:	20000828 	.word	0x20000828
 8007180:	20000d10 	.word	0x20000d10

08007184 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800718c:	4b06      	ldr	r3, [pc, #24]	; (80071a8 <vTaskInternalSetTimeOutState+0x24>)
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007194:	4b05      	ldr	r3, [pc, #20]	; (80071ac <vTaskInternalSetTimeOutState+0x28>)
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	605a      	str	r2, [r3, #4]
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	20000d14 	.word	0x20000d14
 80071ac:	20000d00 	.word	0x20000d00

080071b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b088      	sub	sp, #32
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d10a      	bne.n	80071d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80071c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	613b      	str	r3, [r7, #16]
}
 80071d2:	bf00      	nop
 80071d4:	e7fe      	b.n	80071d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	60fb      	str	r3, [r7, #12]
}
 80071ee:	bf00      	nop
 80071f0:	e7fe      	b.n	80071f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80071f2:	f001 f837 	bl	8008264 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80071f6:	4b1d      	ldr	r3, [pc, #116]	; (800726c <xTaskCheckForTimeOut+0xbc>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	69ba      	ldr	r2, [r7, #24]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800720e:	d102      	bne.n	8007216 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007210:	2300      	movs	r3, #0
 8007212:	61fb      	str	r3, [r7, #28]
 8007214:	e023      	b.n	800725e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	4b15      	ldr	r3, [pc, #84]	; (8007270 <xTaskCheckForTimeOut+0xc0>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	429a      	cmp	r2, r3
 8007220:	d007      	beq.n	8007232 <xTaskCheckForTimeOut+0x82>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	69ba      	ldr	r2, [r7, #24]
 8007228:	429a      	cmp	r2, r3
 800722a:	d302      	bcc.n	8007232 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800722c:	2301      	movs	r3, #1
 800722e:	61fb      	str	r3, [r7, #28]
 8007230:	e015      	b.n	800725e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	429a      	cmp	r2, r3
 800723a:	d20b      	bcs.n	8007254 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	1ad2      	subs	r2, r2, r3
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f7ff ff9b 	bl	8007184 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800724e:	2300      	movs	r3, #0
 8007250:	61fb      	str	r3, [r7, #28]
 8007252:	e004      	b.n	800725e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	2200      	movs	r2, #0
 8007258:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800725a:	2301      	movs	r3, #1
 800725c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800725e:	f001 f831 	bl	80082c4 <vPortExitCritical>

	return xReturn;
 8007262:	69fb      	ldr	r3, [r7, #28]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3720      	adds	r7, #32
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	20000d00 	.word	0x20000d00
 8007270:	20000d14 	.word	0x20000d14

08007274 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007274:	b480      	push	{r7}
 8007276:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007278:	4b03      	ldr	r3, [pc, #12]	; (8007288 <vTaskMissedYield+0x14>)
 800727a:	2201      	movs	r2, #1
 800727c:	601a      	str	r2, [r3, #0]
}
 800727e:	bf00      	nop
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr
 8007288:	20000d10 	.word	0x20000d10

0800728c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007294:	f000 f852 	bl	800733c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007298:	4b06      	ldr	r3, [pc, #24]	; (80072b4 <prvIdleTask+0x28>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d9f9      	bls.n	8007294 <prvIdleTask+0x8>
			{
				taskYIELD();
 80072a0:	4b05      	ldr	r3, [pc, #20]	; (80072b8 <prvIdleTask+0x2c>)
 80072a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a6:	601a      	str	r2, [r3, #0]
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80072b0:	e7f0      	b.n	8007294 <prvIdleTask+0x8>
 80072b2:	bf00      	nop
 80072b4:	2000082c 	.word	0x2000082c
 80072b8:	e000ed04 	.word	0xe000ed04

080072bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072c2:	2300      	movs	r3, #0
 80072c4:	607b      	str	r3, [r7, #4]
 80072c6:	e00c      	b.n	80072e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	4613      	mov	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4a12      	ldr	r2, [pc, #72]	; (800731c <prvInitialiseTaskLists+0x60>)
 80072d4:	4413      	add	r3, r2
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fe fb60 	bl	800599c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	3301      	adds	r3, #1
 80072e0:	607b      	str	r3, [r7, #4]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b37      	cmp	r3, #55	; 0x37
 80072e6:	d9ef      	bls.n	80072c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072e8:	480d      	ldr	r0, [pc, #52]	; (8007320 <prvInitialiseTaskLists+0x64>)
 80072ea:	f7fe fb57 	bl	800599c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072ee:	480d      	ldr	r0, [pc, #52]	; (8007324 <prvInitialiseTaskLists+0x68>)
 80072f0:	f7fe fb54 	bl	800599c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072f4:	480c      	ldr	r0, [pc, #48]	; (8007328 <prvInitialiseTaskLists+0x6c>)
 80072f6:	f7fe fb51 	bl	800599c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80072fa:	480c      	ldr	r0, [pc, #48]	; (800732c <prvInitialiseTaskLists+0x70>)
 80072fc:	f7fe fb4e 	bl	800599c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007300:	480b      	ldr	r0, [pc, #44]	; (8007330 <prvInitialiseTaskLists+0x74>)
 8007302:	f7fe fb4b 	bl	800599c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007306:	4b0b      	ldr	r3, [pc, #44]	; (8007334 <prvInitialiseTaskLists+0x78>)
 8007308:	4a05      	ldr	r2, [pc, #20]	; (8007320 <prvInitialiseTaskLists+0x64>)
 800730a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800730c:	4b0a      	ldr	r3, [pc, #40]	; (8007338 <prvInitialiseTaskLists+0x7c>)
 800730e:	4a05      	ldr	r2, [pc, #20]	; (8007324 <prvInitialiseTaskLists+0x68>)
 8007310:	601a      	str	r2, [r3, #0]
}
 8007312:	bf00      	nop
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	2000082c 	.word	0x2000082c
 8007320:	20000c8c 	.word	0x20000c8c
 8007324:	20000ca0 	.word	0x20000ca0
 8007328:	20000cbc 	.word	0x20000cbc
 800732c:	20000cd0 	.word	0x20000cd0
 8007330:	20000ce8 	.word	0x20000ce8
 8007334:	20000cb4 	.word	0x20000cb4
 8007338:	20000cb8 	.word	0x20000cb8

0800733c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007342:	e019      	b.n	8007378 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007344:	f000 ff8e 	bl	8008264 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007348:	4b10      	ldr	r3, [pc, #64]	; (800738c <prvCheckTasksWaitingTermination+0x50>)
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	3304      	adds	r3, #4
 8007354:	4618      	mov	r0, r3
 8007356:	f7fe fbab 	bl	8005ab0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800735a:	4b0d      	ldr	r3, [pc, #52]	; (8007390 <prvCheckTasksWaitingTermination+0x54>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3b01      	subs	r3, #1
 8007360:	4a0b      	ldr	r2, [pc, #44]	; (8007390 <prvCheckTasksWaitingTermination+0x54>)
 8007362:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007364:	4b0b      	ldr	r3, [pc, #44]	; (8007394 <prvCheckTasksWaitingTermination+0x58>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3b01      	subs	r3, #1
 800736a:	4a0a      	ldr	r2, [pc, #40]	; (8007394 <prvCheckTasksWaitingTermination+0x58>)
 800736c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800736e:	f000 ffa9 	bl	80082c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f810 	bl	8007398 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007378:	4b06      	ldr	r3, [pc, #24]	; (8007394 <prvCheckTasksWaitingTermination+0x58>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1e1      	bne.n	8007344 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007380:	bf00      	nop
 8007382:	bf00      	nop
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	20000cd0 	.word	0x20000cd0
 8007390:	20000cfc 	.word	0x20000cfc
 8007394:	20000ce4 	.word	0x20000ce4

08007398 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d108      	bne.n	80073bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ae:	4618      	mov	r0, r3
 80073b0:	f001 f946 	bl	8008640 <vPortFree>
				vPortFree( pxTCB );
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f001 f943 	bl	8008640 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80073ba:	e018      	b.n	80073ee <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d103      	bne.n	80073ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f001 f93a 	bl	8008640 <vPortFree>
	}
 80073cc:	e00f      	b.n	80073ee <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d00a      	beq.n	80073ee <prvDeleteTCB+0x56>
	__asm volatile
 80073d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073dc:	f383 8811 	msr	BASEPRI, r3
 80073e0:	f3bf 8f6f 	isb	sy
 80073e4:	f3bf 8f4f 	dsb	sy
 80073e8:	60fb      	str	r3, [r7, #12]
}
 80073ea:	bf00      	nop
 80073ec:	e7fe      	b.n	80073ec <prvDeleteTCB+0x54>
	}
 80073ee:	bf00      	nop
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
	...

080073f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073fe:	4b0c      	ldr	r3, [pc, #48]	; (8007430 <prvResetNextTaskUnblockTime+0x38>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d104      	bne.n	8007412 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007408:	4b0a      	ldr	r3, [pc, #40]	; (8007434 <prvResetNextTaskUnblockTime+0x3c>)
 800740a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800740e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007410:	e008      	b.n	8007424 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007412:	4b07      	ldr	r3, [pc, #28]	; (8007430 <prvResetNextTaskUnblockTime+0x38>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	4a04      	ldr	r2, [pc, #16]	; (8007434 <prvResetNextTaskUnblockTime+0x3c>)
 8007422:	6013      	str	r3, [r2, #0]
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr
 8007430:	20000cb4 	.word	0x20000cb4
 8007434:	20000d1c 	.word	0x20000d1c

08007438 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800743e:	4b0b      	ldr	r3, [pc, #44]	; (800746c <xTaskGetSchedulerState+0x34>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d102      	bne.n	800744c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007446:	2301      	movs	r3, #1
 8007448:	607b      	str	r3, [r7, #4]
 800744a:	e008      	b.n	800745e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800744c:	4b08      	ldr	r3, [pc, #32]	; (8007470 <xTaskGetSchedulerState+0x38>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d102      	bne.n	800745a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007454:	2302      	movs	r3, #2
 8007456:	607b      	str	r3, [r7, #4]
 8007458:	e001      	b.n	800745e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800745a:	2300      	movs	r3, #0
 800745c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800745e:	687b      	ldr	r3, [r7, #4]
	}
 8007460:	4618      	mov	r0, r3
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	20000d08 	.word	0x20000d08
 8007470:	20000d24 	.word	0x20000d24

08007474 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007480:	2300      	movs	r3, #0
 8007482:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d051      	beq.n	800752e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800748e:	4b2a      	ldr	r3, [pc, #168]	; (8007538 <xTaskPriorityInherit+0xc4>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007494:	429a      	cmp	r2, r3
 8007496:	d241      	bcs.n	800751c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	2b00      	cmp	r3, #0
 800749e:	db06      	blt.n	80074ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074a0:	4b25      	ldr	r3, [pc, #148]	; (8007538 <xTaskPriorityInherit+0xc4>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	6959      	ldr	r1, [r3, #20]
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b6:	4613      	mov	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4a1f      	ldr	r2, [pc, #124]	; (800753c <xTaskPriorityInherit+0xc8>)
 80074c0:	4413      	add	r3, r2
 80074c2:	4299      	cmp	r1, r3
 80074c4:	d122      	bne.n	800750c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	3304      	adds	r3, #4
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fe faf0 	bl	8005ab0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80074d0:	4b19      	ldr	r3, [pc, #100]	; (8007538 <xTaskPriorityInherit+0xc4>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074de:	4b18      	ldr	r3, [pc, #96]	; (8007540 <xTaskPriorityInherit+0xcc>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d903      	bls.n	80074ee <xTaskPriorityInherit+0x7a>
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ea:	4a15      	ldr	r2, [pc, #84]	; (8007540 <xTaskPriorityInherit+0xcc>)
 80074ec:	6013      	str	r3, [r2, #0]
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f2:	4613      	mov	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4413      	add	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4a10      	ldr	r2, [pc, #64]	; (800753c <xTaskPriorityInherit+0xc8>)
 80074fc:	441a      	add	r2, r3
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	3304      	adds	r3, #4
 8007502:	4619      	mov	r1, r3
 8007504:	4610      	mov	r0, r2
 8007506:	f7fe fa76 	bl	80059f6 <vListInsertEnd>
 800750a:	e004      	b.n	8007516 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800750c:	4b0a      	ldr	r3, [pc, #40]	; (8007538 <xTaskPriorityInherit+0xc4>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007516:	2301      	movs	r3, #1
 8007518:	60fb      	str	r3, [r7, #12]
 800751a:	e008      	b.n	800752e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007520:	4b05      	ldr	r3, [pc, #20]	; (8007538 <xTaskPriorityInherit+0xc4>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007526:	429a      	cmp	r2, r3
 8007528:	d201      	bcs.n	800752e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800752a:	2301      	movs	r3, #1
 800752c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800752e:	68fb      	ldr	r3, [r7, #12]
	}
 8007530:	4618      	mov	r0, r3
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	20000828 	.word	0x20000828
 800753c:	2000082c 	.word	0x2000082c
 8007540:	20000d04 	.word	0x20000d04

08007544 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007544:	b580      	push	{r7, lr}
 8007546:	b086      	sub	sp, #24
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007550:	2300      	movs	r3, #0
 8007552:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d056      	beq.n	8007608 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800755a:	4b2e      	ldr	r3, [pc, #184]	; (8007614 <xTaskPriorityDisinherit+0xd0>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	429a      	cmp	r2, r3
 8007562:	d00a      	beq.n	800757a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	60fb      	str	r3, [r7, #12]
}
 8007576:	bf00      	nop
 8007578:	e7fe      	b.n	8007578 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10a      	bne.n	8007598 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007586:	f383 8811 	msr	BASEPRI, r3
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	60bb      	str	r3, [r7, #8]
}
 8007594:	bf00      	nop
 8007596:	e7fe      	b.n	8007596 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800759c:	1e5a      	subs	r2, r3, #1
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d02c      	beq.n	8007608 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d128      	bne.n	8007608 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	3304      	adds	r3, #4
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fe fa78 	bl	8005ab0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d8:	4b0f      	ldr	r3, [pc, #60]	; (8007618 <xTaskPriorityDisinherit+0xd4>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d903      	bls.n	80075e8 <xTaskPriorityDisinherit+0xa4>
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e4:	4a0c      	ldr	r2, [pc, #48]	; (8007618 <xTaskPriorityDisinherit+0xd4>)
 80075e6:	6013      	str	r3, [r2, #0]
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ec:	4613      	mov	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4a09      	ldr	r2, [pc, #36]	; (800761c <xTaskPriorityDisinherit+0xd8>)
 80075f6:	441a      	add	r2, r3
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	3304      	adds	r3, #4
 80075fc:	4619      	mov	r1, r3
 80075fe:	4610      	mov	r0, r2
 8007600:	f7fe f9f9 	bl	80059f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007604:	2301      	movs	r3, #1
 8007606:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007608:	697b      	ldr	r3, [r7, #20]
	}
 800760a:	4618      	mov	r0, r3
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	20000828 	.word	0x20000828
 8007618:	20000d04 	.word	0x20000d04
 800761c:	2000082c 	.word	0x2000082c

08007620 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007620:	b580      	push	{r7, lr}
 8007622:	b088      	sub	sp, #32
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800762e:	2301      	movs	r3, #1
 8007630:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d06a      	beq.n	800770e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10a      	bne.n	8007656 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	60fb      	str	r3, [r7, #12]
}
 8007652:	bf00      	nop
 8007654:	e7fe      	b.n	8007654 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	429a      	cmp	r2, r3
 800765e:	d902      	bls.n	8007666 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	61fb      	str	r3, [r7, #28]
 8007664:	e002      	b.n	800766c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800766a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007670:	69fa      	ldr	r2, [r7, #28]
 8007672:	429a      	cmp	r2, r3
 8007674:	d04b      	beq.n	800770e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	429a      	cmp	r2, r3
 800767e:	d146      	bne.n	800770e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007680:	4b25      	ldr	r3, [pc, #148]	; (8007718 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	429a      	cmp	r2, r3
 8007688:	d10a      	bne.n	80076a0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800768a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768e:	f383 8811 	msr	BASEPRI, r3
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	60bb      	str	r3, [r7, #8]
}
 800769c:	bf00      	nop
 800769e:	e7fe      	b.n	800769e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	69fa      	ldr	r2, [r7, #28]
 80076aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	db04      	blt.n	80076be <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	6959      	ldr	r1, [r3, #20]
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	4613      	mov	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4413      	add	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4a13      	ldr	r2, [pc, #76]	; (800771c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80076ce:	4413      	add	r3, r2
 80076d0:	4299      	cmp	r1, r3
 80076d2:	d11c      	bne.n	800770e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	3304      	adds	r3, #4
 80076d8:	4618      	mov	r0, r3
 80076da:	f7fe f9e9 	bl	8005ab0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e2:	4b0f      	ldr	r3, [pc, #60]	; (8007720 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d903      	bls.n	80076f2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ee:	4a0c      	ldr	r2, [pc, #48]	; (8007720 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80076f0:	6013      	str	r3, [r2, #0]
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f6:	4613      	mov	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4a07      	ldr	r2, [pc, #28]	; (800771c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007700:	441a      	add	r2, r3
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	3304      	adds	r3, #4
 8007706:	4619      	mov	r1, r3
 8007708:	4610      	mov	r0, r2
 800770a:	f7fe f974 	bl	80059f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800770e:	bf00      	nop
 8007710:	3720      	adds	r7, #32
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	20000828 	.word	0x20000828
 800771c:	2000082c 	.word	0x2000082c
 8007720:	20000d04 	.word	0x20000d04

08007724 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007724:	b480      	push	{r7}
 8007726:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007728:	4b07      	ldr	r3, [pc, #28]	; (8007748 <pvTaskIncrementMutexHeldCount+0x24>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d004      	beq.n	800773a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007730:	4b05      	ldr	r3, [pc, #20]	; (8007748 <pvTaskIncrementMutexHeldCount+0x24>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007736:	3201      	adds	r2, #1
 8007738:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800773a:	4b03      	ldr	r3, [pc, #12]	; (8007748 <pvTaskIncrementMutexHeldCount+0x24>)
 800773c:	681b      	ldr	r3, [r3, #0]
	}
 800773e:	4618      	mov	r0, r3
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	20000828 	.word	0x20000828

0800774c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007756:	4b21      	ldr	r3, [pc, #132]	; (80077dc <prvAddCurrentTaskToDelayedList+0x90>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800775c:	4b20      	ldr	r3, [pc, #128]	; (80077e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	3304      	adds	r3, #4
 8007762:	4618      	mov	r0, r3
 8007764:	f7fe f9a4 	bl	8005ab0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800776e:	d10a      	bne.n	8007786 <prvAddCurrentTaskToDelayedList+0x3a>
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d007      	beq.n	8007786 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007776:	4b1a      	ldr	r3, [pc, #104]	; (80077e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3304      	adds	r3, #4
 800777c:	4619      	mov	r1, r3
 800777e:	4819      	ldr	r0, [pc, #100]	; (80077e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007780:	f7fe f939 	bl	80059f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007784:	e026      	b.n	80077d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4413      	add	r3, r2
 800778c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800778e:	4b14      	ldr	r3, [pc, #80]	; (80077e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	429a      	cmp	r2, r3
 800779c:	d209      	bcs.n	80077b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800779e:	4b12      	ldr	r3, [pc, #72]	; (80077e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	4b0f      	ldr	r3, [pc, #60]	; (80077e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3304      	adds	r3, #4
 80077a8:	4619      	mov	r1, r3
 80077aa:	4610      	mov	r0, r2
 80077ac:	f7fe f947 	bl	8005a3e <vListInsert>
}
 80077b0:	e010      	b.n	80077d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077b2:	4b0e      	ldr	r3, [pc, #56]	; (80077ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	4b0a      	ldr	r3, [pc, #40]	; (80077e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	3304      	adds	r3, #4
 80077bc:	4619      	mov	r1, r3
 80077be:	4610      	mov	r0, r2
 80077c0:	f7fe f93d 	bl	8005a3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077c4:	4b0a      	ldr	r3, [pc, #40]	; (80077f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d202      	bcs.n	80077d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80077ce:	4a08      	ldr	r2, [pc, #32]	; (80077f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	6013      	str	r3, [r2, #0]
}
 80077d4:	bf00      	nop
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	20000d00 	.word	0x20000d00
 80077e0:	20000828 	.word	0x20000828
 80077e4:	20000ce8 	.word	0x20000ce8
 80077e8:	20000cb8 	.word	0x20000cb8
 80077ec:	20000cb4 	.word	0x20000cb4
 80077f0:	20000d1c 	.word	0x20000d1c

080077f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b08a      	sub	sp, #40	; 0x28
 80077f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80077fa:	2300      	movs	r3, #0
 80077fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80077fe:	f000 fba1 	bl	8007f44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007802:	4b1c      	ldr	r3, [pc, #112]	; (8007874 <xTimerCreateTimerTask+0x80>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d021      	beq.n	800784e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800780a:	2300      	movs	r3, #0
 800780c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800780e:	2300      	movs	r3, #0
 8007810:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007812:	1d3a      	adds	r2, r7, #4
 8007814:	f107 0108 	add.w	r1, r7, #8
 8007818:	f107 030c 	add.w	r3, r7, #12
 800781c:	4618      	mov	r0, r3
 800781e:	f7fe f8a3 	bl	8005968 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007822:	6879      	ldr	r1, [r7, #4]
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	9202      	str	r2, [sp, #8]
 800782a:	9301      	str	r3, [sp, #4]
 800782c:	2302      	movs	r3, #2
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	2300      	movs	r3, #0
 8007832:	460a      	mov	r2, r1
 8007834:	4910      	ldr	r1, [pc, #64]	; (8007878 <xTimerCreateTimerTask+0x84>)
 8007836:	4811      	ldr	r0, [pc, #68]	; (800787c <xTimerCreateTimerTask+0x88>)
 8007838:	f7fe ffe0 	bl	80067fc <xTaskCreateStatic>
 800783c:	4603      	mov	r3, r0
 800783e:	4a10      	ldr	r2, [pc, #64]	; (8007880 <xTimerCreateTimerTask+0x8c>)
 8007840:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007842:	4b0f      	ldr	r3, [pc, #60]	; (8007880 <xTimerCreateTimerTask+0x8c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800784a:	2301      	movs	r3, #1
 800784c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10a      	bne.n	800786a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	613b      	str	r3, [r7, #16]
}
 8007866:	bf00      	nop
 8007868:	e7fe      	b.n	8007868 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800786a:	697b      	ldr	r3, [r7, #20]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	20000d58 	.word	0x20000d58
 8007878:	08008990 	.word	0x08008990
 800787c:	08007aed 	.word	0x08007aed
 8007880:	20000d5c 	.word	0x20000d5c

08007884 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007884:	b580      	push	{r7, lr}
 8007886:	b088      	sub	sp, #32
 8007888:	af02      	add	r7, sp, #8
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
 8007890:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007892:	202c      	movs	r0, #44	; 0x2c
 8007894:	f000 fe08 	bl	80084a8 <pvPortMalloc>
 8007898:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00d      	beq.n	80078bc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	9301      	str	r3, [sp, #4]
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	68b9      	ldr	r1, [r7, #8]
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f000 f843 	bl	8007942 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80078bc:	697b      	ldr	r3, [r7, #20]
	}
 80078be:	4618      	mov	r0, r3
 80078c0:	3718      	adds	r7, #24
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b08a      	sub	sp, #40	; 0x28
 80078ca:	af02      	add	r7, sp, #8
 80078cc:	60f8      	str	r0, [r7, #12]
 80078ce:	60b9      	str	r1, [r7, #8]
 80078d0:	607a      	str	r2, [r7, #4]
 80078d2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80078d4:	232c      	movs	r3, #44	; 0x2c
 80078d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	2b2c      	cmp	r3, #44	; 0x2c
 80078dc:	d00a      	beq.n	80078f4 <xTimerCreateStatic+0x2e>
	__asm volatile
 80078de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	61bb      	str	r3, [r7, #24]
}
 80078f0:	bf00      	nop
 80078f2:	e7fe      	b.n	80078f2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80078f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80078f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10a      	bne.n	8007912 <xTimerCreateStatic+0x4c>
	__asm volatile
 80078fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007900:	f383 8811 	msr	BASEPRI, r3
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	617b      	str	r3, [r7, #20]
}
 800790e:	bf00      	nop
 8007910:	e7fe      	b.n	8007910 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8007912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007914:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00d      	beq.n	8007938 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	2202      	movs	r2, #2
 8007920:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	9301      	str	r3, [sp, #4]
 8007928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792a:	9300      	str	r3, [sp, #0]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	68b9      	ldr	r1, [r7, #8]
 8007932:	68f8      	ldr	r0, [r7, #12]
 8007934:	f000 f805 	bl	8007942 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007938:	69fb      	ldr	r3, [r7, #28]
	}
 800793a:	4618      	mov	r0, r3
 800793c:	3720      	adds	r7, #32
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b086      	sub	sp, #24
 8007946:	af00      	add	r7, sp, #0
 8007948:	60f8      	str	r0, [r7, #12]
 800794a:	60b9      	str	r1, [r7, #8]
 800794c:	607a      	str	r2, [r7, #4]
 800794e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10a      	bne.n	800796c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8007956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	617b      	str	r3, [r7, #20]
}
 8007968:	bf00      	nop
 800796a:	e7fe      	b.n	800796a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	2b00      	cmp	r3, #0
 8007970:	d01e      	beq.n	80079b0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007972:	f000 fae7 	bl	8007f44 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	683a      	ldr	r2, [r7, #0]
 8007986:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	6a3a      	ldr	r2, [r7, #32]
 800798c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007990:	3304      	adds	r3, #4
 8007992:	4618      	mov	r0, r3
 8007994:	f7fe f822 	bl	80059dc <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d008      	beq.n	80079b0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079a4:	f043 0304 	orr.w	r3, r3, #4
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80079b0:	bf00      	nop
 80079b2:	3718      	adds	r7, #24
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b08a      	sub	sp, #40	; 0x28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
 80079c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80079c6:	2300      	movs	r3, #0
 80079c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10a      	bne.n	80079e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80079d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	623b      	str	r3, [r7, #32]
}
 80079e2:	bf00      	nop
 80079e4:	e7fe      	b.n	80079e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80079e6:	4b1a      	ldr	r3, [pc, #104]	; (8007a50 <xTimerGenericCommand+0x98>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d02a      	beq.n	8007a44 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2b05      	cmp	r3, #5
 80079fe:	dc18      	bgt.n	8007a32 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007a00:	f7ff fd1a 	bl	8007438 <xTaskGetSchedulerState>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d109      	bne.n	8007a1e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a0a:	4b11      	ldr	r3, [pc, #68]	; (8007a50 <xTimerGenericCommand+0x98>)
 8007a0c:	6818      	ldr	r0, [r3, #0]
 8007a0e:	f107 0110 	add.w	r1, r7, #16
 8007a12:	2300      	movs	r3, #0
 8007a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a16:	f7fe f9e5 	bl	8005de4 <xQueueGenericSend>
 8007a1a:	6278      	str	r0, [r7, #36]	; 0x24
 8007a1c:	e012      	b.n	8007a44 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a1e:	4b0c      	ldr	r3, [pc, #48]	; (8007a50 <xTimerGenericCommand+0x98>)
 8007a20:	6818      	ldr	r0, [r3, #0]
 8007a22:	f107 0110 	add.w	r1, r7, #16
 8007a26:	2300      	movs	r3, #0
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f7fe f9db 	bl	8005de4 <xQueueGenericSend>
 8007a2e:	6278      	str	r0, [r7, #36]	; 0x24
 8007a30:	e008      	b.n	8007a44 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a32:	4b07      	ldr	r3, [pc, #28]	; (8007a50 <xTimerGenericCommand+0x98>)
 8007a34:	6818      	ldr	r0, [r3, #0]
 8007a36:	f107 0110 	add.w	r1, r7, #16
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	f7fe facf 	bl	8005fe0 <xQueueGenericSendFromISR>
 8007a42:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3728      	adds	r7, #40	; 0x28
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	20000d58 	.word	0x20000d58

08007a54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b088      	sub	sp, #32
 8007a58:	af02      	add	r7, sp, #8
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a5e:	4b22      	ldr	r3, [pc, #136]	; (8007ae8 <prvProcessExpiredTimer+0x94>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7fe f81f 	bl	8005ab0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a78:	f003 0304 	and.w	r3, r3, #4
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d022      	beq.n	8007ac6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	699a      	ldr	r2, [r3, #24]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	18d1      	adds	r1, r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	6978      	ldr	r0, [r7, #20]
 8007a8e:	f000 f8d1 	bl	8007c34 <prvInsertTimerInActiveList>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d01f      	beq.n	8007ad8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a98:	2300      	movs	r3, #0
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	6978      	ldr	r0, [r7, #20]
 8007aa4:	f7ff ff88 	bl	80079b8 <xTimerGenericCommand>
 8007aa8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d113      	bne.n	8007ad8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	60fb      	str	r3, [r7, #12]
}
 8007ac2:	bf00      	nop
 8007ac4:	e7fe      	b.n	8007ac4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007acc:	f023 0301 	bic.w	r3, r3, #1
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	6978      	ldr	r0, [r7, #20]
 8007ade:	4798      	blx	r3
}
 8007ae0:	bf00      	nop
 8007ae2:	3718      	adds	r7, #24
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	20000d50 	.word	0x20000d50

08007aec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007af4:	f107 0308 	add.w	r3, r7, #8
 8007af8:	4618      	mov	r0, r3
 8007afa:	f000 f857 	bl	8007bac <prvGetNextExpireTime>
 8007afe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	4619      	mov	r1, r3
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 f803 	bl	8007b10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007b0a:	f000 f8d5 	bl	8007cb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b0e:	e7f1      	b.n	8007af4 <prvTimerTask+0x8>

08007b10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007b1a:	f7ff f8ab 	bl	8006c74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b1e:	f107 0308 	add.w	r3, r7, #8
 8007b22:	4618      	mov	r0, r3
 8007b24:	f000 f866 	bl	8007bf4 <prvSampleTimeNow>
 8007b28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d130      	bne.n	8007b92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10a      	bne.n	8007b4c <prvProcessTimerOrBlockTask+0x3c>
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d806      	bhi.n	8007b4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b3e:	f7ff f8a7 	bl	8006c90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b42:	68f9      	ldr	r1, [r7, #12]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7ff ff85 	bl	8007a54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007b4a:	e024      	b.n	8007b96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d008      	beq.n	8007b64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b52:	4b13      	ldr	r3, [pc, #76]	; (8007ba0 <prvProcessTimerOrBlockTask+0x90>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d101      	bne.n	8007b60 <prvProcessTimerOrBlockTask+0x50>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e000      	b.n	8007b62 <prvProcessTimerOrBlockTask+0x52>
 8007b60:	2300      	movs	r3, #0
 8007b62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b64:	4b0f      	ldr	r3, [pc, #60]	; (8007ba4 <prvProcessTimerOrBlockTask+0x94>)
 8007b66:	6818      	ldr	r0, [r3, #0]
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	683a      	ldr	r2, [r7, #0]
 8007b70:	4619      	mov	r1, r3
 8007b72:	f7fe fe0f 	bl	8006794 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b76:	f7ff f88b 	bl	8006c90 <xTaskResumeAll>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10a      	bne.n	8007b96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007b80:	4b09      	ldr	r3, [pc, #36]	; (8007ba8 <prvProcessTimerOrBlockTask+0x98>)
 8007b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b86:	601a      	str	r2, [r3, #0]
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	f3bf 8f6f 	isb	sy
}
 8007b90:	e001      	b.n	8007b96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007b92:	f7ff f87d 	bl	8006c90 <xTaskResumeAll>
}
 8007b96:	bf00      	nop
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	20000d54 	.word	0x20000d54
 8007ba4:	20000d58 	.word	0x20000d58
 8007ba8:	e000ed04 	.word	0xe000ed04

08007bac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007bb4:	4b0e      	ldr	r3, [pc, #56]	; (8007bf0 <prvGetNextExpireTime+0x44>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d101      	bne.n	8007bc2 <prvGetNextExpireTime+0x16>
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	e000      	b.n	8007bc4 <prvGetNextExpireTime+0x18>
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d105      	bne.n	8007bdc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bd0:	4b07      	ldr	r3, [pc, #28]	; (8007bf0 <prvGetNextExpireTime+0x44>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	60fb      	str	r3, [r7, #12]
 8007bda:	e001      	b.n	8007be0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007be0:	68fb      	ldr	r3, [r7, #12]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	20000d50 	.word	0x20000d50

08007bf4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007bfc:	f7ff f8e6 	bl	8006dcc <xTaskGetTickCount>
 8007c00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007c02:	4b0b      	ldr	r3, [pc, #44]	; (8007c30 <prvSampleTimeNow+0x3c>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d205      	bcs.n	8007c18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007c0c:	f000 f936 	bl	8007e7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	601a      	str	r2, [r3, #0]
 8007c16:	e002      	b.n	8007c1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007c1e:	4a04      	ldr	r2, [pc, #16]	; (8007c30 <prvSampleTimeNow+0x3c>)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007c24:	68fb      	ldr	r3, [r7, #12]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	20000d60 	.word	0x20000d60

08007c34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
 8007c40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c42:	2300      	movs	r3, #0
 8007c44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d812      	bhi.n	8007c80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	1ad2      	subs	r2, r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	699b      	ldr	r3, [r3, #24]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d302      	bcc.n	8007c6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	617b      	str	r3, [r7, #20]
 8007c6c:	e01b      	b.n	8007ca6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c6e:	4b10      	ldr	r3, [pc, #64]	; (8007cb0 <prvInsertTimerInActiveList+0x7c>)
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	3304      	adds	r3, #4
 8007c76:	4619      	mov	r1, r3
 8007c78:	4610      	mov	r0, r2
 8007c7a:	f7fd fee0 	bl	8005a3e <vListInsert>
 8007c7e:	e012      	b.n	8007ca6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d206      	bcs.n	8007c96 <prvInsertTimerInActiveList+0x62>
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d302      	bcc.n	8007c96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007c90:	2301      	movs	r3, #1
 8007c92:	617b      	str	r3, [r7, #20]
 8007c94:	e007      	b.n	8007ca6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c96:	4b07      	ldr	r3, [pc, #28]	; (8007cb4 <prvInsertTimerInActiveList+0x80>)
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	f7fd fecc 	bl	8005a3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007ca6:	697b      	ldr	r3, [r7, #20]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3718      	adds	r7, #24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	20000d54 	.word	0x20000d54
 8007cb4:	20000d50 	.word	0x20000d50

08007cb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b08e      	sub	sp, #56	; 0x38
 8007cbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cbe:	e0ca      	b.n	8007e56 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	da18      	bge.n	8007cf8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007cc6:	1d3b      	adds	r3, r7, #4
 8007cc8:	3304      	adds	r3, #4
 8007cca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10a      	bne.n	8007ce8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd6:	f383 8811 	msr	BASEPRI, r3
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	61fb      	str	r3, [r7, #28]
}
 8007ce4:	bf00      	nop
 8007ce6:	e7fe      	b.n	8007ce6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cee:	6850      	ldr	r0, [r2, #4]
 8007cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cf2:	6892      	ldr	r2, [r2, #8]
 8007cf4:	4611      	mov	r1, r2
 8007cf6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f2c0 80ab 	blt.w	8007e56 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d06:	695b      	ldr	r3, [r3, #20]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d004      	beq.n	8007d16 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0e:	3304      	adds	r3, #4
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7fd fecd 	bl	8005ab0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d16:	463b      	mov	r3, r7
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7ff ff6b 	bl	8007bf4 <prvSampleTimeNow>
 8007d1e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b09      	cmp	r3, #9
 8007d24:	f200 8096 	bhi.w	8007e54 <prvProcessReceivedCommands+0x19c>
 8007d28:	a201      	add	r2, pc, #4	; (adr r2, 8007d30 <prvProcessReceivedCommands+0x78>)
 8007d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2e:	bf00      	nop
 8007d30:	08007d59 	.word	0x08007d59
 8007d34:	08007d59 	.word	0x08007d59
 8007d38:	08007d59 	.word	0x08007d59
 8007d3c:	08007dcd 	.word	0x08007dcd
 8007d40:	08007de1 	.word	0x08007de1
 8007d44:	08007e2b 	.word	0x08007e2b
 8007d48:	08007d59 	.word	0x08007d59
 8007d4c:	08007d59 	.word	0x08007d59
 8007d50:	08007dcd 	.word	0x08007dcd
 8007d54:	08007de1 	.word	0x08007de1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d5e:	f043 0301 	orr.w	r3, r3, #1
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6e:	699b      	ldr	r3, [r3, #24]
 8007d70:	18d1      	adds	r1, r2, r3
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d78:	f7ff ff5c 	bl	8007c34 <prvInsertTimerInActiveList>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d069      	beq.n	8007e56 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d90:	f003 0304 	and.w	r3, r3, #4
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d05e      	beq.n	8007e56 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	441a      	add	r2, r3
 8007da0:	2300      	movs	r3, #0
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	2300      	movs	r3, #0
 8007da6:	2100      	movs	r1, #0
 8007da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007daa:	f7ff fe05 	bl	80079b8 <xTimerGenericCommand>
 8007dae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d14f      	bne.n	8007e56 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dba:	f383 8811 	msr	BASEPRI, r3
 8007dbe:	f3bf 8f6f 	isb	sy
 8007dc2:	f3bf 8f4f 	dsb	sy
 8007dc6:	61bb      	str	r3, [r7, #24]
}
 8007dc8:	bf00      	nop
 8007dca:	e7fe      	b.n	8007dca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dd2:	f023 0301 	bic.w	r3, r3, #1
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007dde:	e03a      	b.n	8007e56 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007de6:	f043 0301 	orr.w	r3, r3, #1
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfa:	699b      	ldr	r3, [r3, #24]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10a      	bne.n	8007e16 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	617b      	str	r3, [r7, #20]
}
 8007e12:	bf00      	nop
 8007e14:	e7fe      	b.n	8007e14 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e18:	699a      	ldr	r2, [r3, #24]
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	18d1      	adds	r1, r2, r3
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e24:	f7ff ff06 	bl	8007c34 <prvInsertTimerInActiveList>
					break;
 8007e28:	e015      	b.n	8007e56 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e30:	f003 0302 	and.w	r3, r3, #2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d103      	bne.n	8007e40 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e3a:	f000 fc01 	bl	8008640 <vPortFree>
 8007e3e:	e00a      	b.n	8007e56 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e46:	f023 0301 	bic.w	r3, r3, #1
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007e52:	e000      	b.n	8007e56 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007e54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e56:	4b08      	ldr	r3, [pc, #32]	; (8007e78 <prvProcessReceivedCommands+0x1c0>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	1d39      	adds	r1, r7, #4
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fe f95a 	bl	8006118 <xQueueReceive>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f47f af2a 	bne.w	8007cc0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007e6c:	bf00      	nop
 8007e6e:	bf00      	nop
 8007e70:	3730      	adds	r7, #48	; 0x30
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	20000d58 	.word	0x20000d58

08007e7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b088      	sub	sp, #32
 8007e80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e82:	e048      	b.n	8007f16 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e84:	4b2d      	ldr	r3, [pc, #180]	; (8007f3c <prvSwitchTimerLists+0xc0>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e8e:	4b2b      	ldr	r3, [pc, #172]	; (8007f3c <prvSwitchTimerLists+0xc0>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fd fe07 	bl	8005ab0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007eb0:	f003 0304 	and.w	r3, r3, #4
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d02e      	beq.n	8007f16 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	693a      	ldr	r2, [r7, #16]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d90e      	bls.n	8007ee8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ed6:	4b19      	ldr	r3, [pc, #100]	; (8007f3c <prvSwitchTimerLists+0xc0>)
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	3304      	adds	r3, #4
 8007ede:	4619      	mov	r1, r3
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	f7fd fdac 	bl	8005a3e <vListInsert>
 8007ee6:	e016      	b.n	8007f16 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ee8:	2300      	movs	r3, #0
 8007eea:	9300      	str	r3, [sp, #0]
 8007eec:	2300      	movs	r3, #0
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f7ff fd60 	bl	80079b8 <xTimerGenericCommand>
 8007ef8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10a      	bne.n	8007f16 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	603b      	str	r3, [r7, #0]
}
 8007f12:	bf00      	nop
 8007f14:	e7fe      	b.n	8007f14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f16:	4b09      	ldr	r3, [pc, #36]	; (8007f3c <prvSwitchTimerLists+0xc0>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1b1      	bne.n	8007e84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007f20:	4b06      	ldr	r3, [pc, #24]	; (8007f3c <prvSwitchTimerLists+0xc0>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007f26:	4b06      	ldr	r3, [pc, #24]	; (8007f40 <prvSwitchTimerLists+0xc4>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a04      	ldr	r2, [pc, #16]	; (8007f3c <prvSwitchTimerLists+0xc0>)
 8007f2c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007f2e:	4a04      	ldr	r2, [pc, #16]	; (8007f40 <prvSwitchTimerLists+0xc4>)
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	6013      	str	r3, [r2, #0]
}
 8007f34:	bf00      	nop
 8007f36:	3718      	adds	r7, #24
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	20000d50 	.word	0x20000d50
 8007f40:	20000d54 	.word	0x20000d54

08007f44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007f4a:	f000 f98b 	bl	8008264 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007f4e:	4b15      	ldr	r3, [pc, #84]	; (8007fa4 <prvCheckForValidListAndQueue+0x60>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d120      	bne.n	8007f98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007f56:	4814      	ldr	r0, [pc, #80]	; (8007fa8 <prvCheckForValidListAndQueue+0x64>)
 8007f58:	f7fd fd20 	bl	800599c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007f5c:	4813      	ldr	r0, [pc, #76]	; (8007fac <prvCheckForValidListAndQueue+0x68>)
 8007f5e:	f7fd fd1d 	bl	800599c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007f62:	4b13      	ldr	r3, [pc, #76]	; (8007fb0 <prvCheckForValidListAndQueue+0x6c>)
 8007f64:	4a10      	ldr	r2, [pc, #64]	; (8007fa8 <prvCheckForValidListAndQueue+0x64>)
 8007f66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007f68:	4b12      	ldr	r3, [pc, #72]	; (8007fb4 <prvCheckForValidListAndQueue+0x70>)
 8007f6a:	4a10      	ldr	r2, [pc, #64]	; (8007fac <prvCheckForValidListAndQueue+0x68>)
 8007f6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007f6e:	2300      	movs	r3, #0
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	4b11      	ldr	r3, [pc, #68]	; (8007fb8 <prvCheckForValidListAndQueue+0x74>)
 8007f74:	4a11      	ldr	r2, [pc, #68]	; (8007fbc <prvCheckForValidListAndQueue+0x78>)
 8007f76:	2110      	movs	r1, #16
 8007f78:	200a      	movs	r0, #10
 8007f7a:	f7fd fe2b 	bl	8005bd4 <xQueueGenericCreateStatic>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	4a08      	ldr	r2, [pc, #32]	; (8007fa4 <prvCheckForValidListAndQueue+0x60>)
 8007f82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007f84:	4b07      	ldr	r3, [pc, #28]	; (8007fa4 <prvCheckForValidListAndQueue+0x60>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d005      	beq.n	8007f98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f8c:	4b05      	ldr	r3, [pc, #20]	; (8007fa4 <prvCheckForValidListAndQueue+0x60>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	490b      	ldr	r1, [pc, #44]	; (8007fc0 <prvCheckForValidListAndQueue+0x7c>)
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fe fbd4 	bl	8006740 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f98:	f000 f994 	bl	80082c4 <vPortExitCritical>
}
 8007f9c:	bf00      	nop
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	20000d58 	.word	0x20000d58
 8007fa8:	20000d28 	.word	0x20000d28
 8007fac:	20000d3c 	.word	0x20000d3c
 8007fb0:	20000d50 	.word	0x20000d50
 8007fb4:	20000d54 	.word	0x20000d54
 8007fb8:	20000e04 	.word	0x20000e04
 8007fbc:	20000d64 	.word	0x20000d64
 8007fc0:	08008998 	.word	0x08008998

08007fc4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b086      	sub	sp, #24
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10a      	bne.n	8007fec <pvTimerGetTimerID+0x28>
	__asm volatile
 8007fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fda:	f383 8811 	msr	BASEPRI, r3
 8007fde:	f3bf 8f6f 	isb	sy
 8007fe2:	f3bf 8f4f 	dsb	sy
 8007fe6:	60fb      	str	r3, [r7, #12]
}
 8007fe8:	bf00      	nop
 8007fea:	e7fe      	b.n	8007fea <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8007fec:	f000 f93a 	bl	8008264 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	69db      	ldr	r3, [r3, #28]
 8007ff4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007ff6:	f000 f965 	bl	80082c4 <vPortExitCritical>

	return pvReturn;
 8007ffa:	693b      	ldr	r3, [r7, #16]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3718      	adds	r7, #24
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	3b04      	subs	r3, #4
 8008014:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800801c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	3b04      	subs	r3, #4
 8008022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	f023 0201 	bic.w	r2, r3, #1
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	3b04      	subs	r3, #4
 8008032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008034:	4a0c      	ldr	r2, [pc, #48]	; (8008068 <pxPortInitialiseStack+0x64>)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	3b14      	subs	r3, #20
 800803e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	3b04      	subs	r3, #4
 800804a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f06f 0202 	mvn.w	r2, #2
 8008052:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	3b20      	subs	r3, #32
 8008058:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800805a:	68fb      	ldr	r3, [r7, #12]
}
 800805c:	4618      	mov	r0, r3
 800805e:	3714      	adds	r7, #20
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	0800806d 	.word	0x0800806d

0800806c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008072:	2300      	movs	r3, #0
 8008074:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008076:	4b12      	ldr	r3, [pc, #72]	; (80080c0 <prvTaskExitError+0x54>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800807e:	d00a      	beq.n	8008096 <prvTaskExitError+0x2a>
	__asm volatile
 8008080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	60fb      	str	r3, [r7, #12]
}
 8008092:	bf00      	nop
 8008094:	e7fe      	b.n	8008094 <prvTaskExitError+0x28>
	__asm volatile
 8008096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809a:	f383 8811 	msr	BASEPRI, r3
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f3bf 8f4f 	dsb	sy
 80080a6:	60bb      	str	r3, [r7, #8]
}
 80080a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80080aa:	bf00      	nop
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d0fc      	beq.n	80080ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80080b2:	bf00      	nop
 80080b4:	bf00      	nop
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	2000000c 	.word	0x2000000c
	...

080080d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80080d0:	4b07      	ldr	r3, [pc, #28]	; (80080f0 <pxCurrentTCBConst2>)
 80080d2:	6819      	ldr	r1, [r3, #0]
 80080d4:	6808      	ldr	r0, [r1, #0]
 80080d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080da:	f380 8809 	msr	PSP, r0
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	f04f 0000 	mov.w	r0, #0
 80080e6:	f380 8811 	msr	BASEPRI, r0
 80080ea:	4770      	bx	lr
 80080ec:	f3af 8000 	nop.w

080080f0 <pxCurrentTCBConst2>:
 80080f0:	20000828 	.word	0x20000828
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80080f4:	bf00      	nop
 80080f6:	bf00      	nop

080080f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80080f8:	4808      	ldr	r0, [pc, #32]	; (800811c <prvPortStartFirstTask+0x24>)
 80080fa:	6800      	ldr	r0, [r0, #0]
 80080fc:	6800      	ldr	r0, [r0, #0]
 80080fe:	f380 8808 	msr	MSP, r0
 8008102:	f04f 0000 	mov.w	r0, #0
 8008106:	f380 8814 	msr	CONTROL, r0
 800810a:	b662      	cpsie	i
 800810c:	b661      	cpsie	f
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	df00      	svc	0
 8008118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800811a:	bf00      	nop
 800811c:	e000ed08 	.word	0xe000ed08

08008120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008126:	4b46      	ldr	r3, [pc, #280]	; (8008240 <xPortStartScheduler+0x120>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a46      	ldr	r2, [pc, #280]	; (8008244 <xPortStartScheduler+0x124>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d10a      	bne.n	8008146 <xPortStartScheduler+0x26>
	__asm volatile
 8008130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008134:	f383 8811 	msr	BASEPRI, r3
 8008138:	f3bf 8f6f 	isb	sy
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	613b      	str	r3, [r7, #16]
}
 8008142:	bf00      	nop
 8008144:	e7fe      	b.n	8008144 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008146:	4b3e      	ldr	r3, [pc, #248]	; (8008240 <xPortStartScheduler+0x120>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a3f      	ldr	r2, [pc, #252]	; (8008248 <xPortStartScheduler+0x128>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d10a      	bne.n	8008166 <xPortStartScheduler+0x46>
	__asm volatile
 8008150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	60fb      	str	r3, [r7, #12]
}
 8008162:	bf00      	nop
 8008164:	e7fe      	b.n	8008164 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008166:	4b39      	ldr	r3, [pc, #228]	; (800824c <xPortStartScheduler+0x12c>)
 8008168:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	b2db      	uxtb	r3, r3
 8008170:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	22ff      	movs	r2, #255	; 0xff
 8008176:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	b2db      	uxtb	r3, r3
 800817e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008180:	78fb      	ldrb	r3, [r7, #3]
 8008182:	b2db      	uxtb	r3, r3
 8008184:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008188:	b2da      	uxtb	r2, r3
 800818a:	4b31      	ldr	r3, [pc, #196]	; (8008250 <xPortStartScheduler+0x130>)
 800818c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800818e:	4b31      	ldr	r3, [pc, #196]	; (8008254 <xPortStartScheduler+0x134>)
 8008190:	2207      	movs	r2, #7
 8008192:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008194:	e009      	b.n	80081aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008196:	4b2f      	ldr	r3, [pc, #188]	; (8008254 <xPortStartScheduler+0x134>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	3b01      	subs	r3, #1
 800819c:	4a2d      	ldr	r2, [pc, #180]	; (8008254 <xPortStartScheduler+0x134>)
 800819e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80081a0:	78fb      	ldrb	r3, [r7, #3]
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	005b      	lsls	r3, r3, #1
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081aa:	78fb      	ldrb	r3, [r7, #3]
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081b2:	2b80      	cmp	r3, #128	; 0x80
 80081b4:	d0ef      	beq.n	8008196 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80081b6:	4b27      	ldr	r3, [pc, #156]	; (8008254 <xPortStartScheduler+0x134>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f1c3 0307 	rsb	r3, r3, #7
 80081be:	2b04      	cmp	r3, #4
 80081c0:	d00a      	beq.n	80081d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80081c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	60bb      	str	r3, [r7, #8]
}
 80081d4:	bf00      	nop
 80081d6:	e7fe      	b.n	80081d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80081d8:	4b1e      	ldr	r3, [pc, #120]	; (8008254 <xPortStartScheduler+0x134>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	021b      	lsls	r3, r3, #8
 80081de:	4a1d      	ldr	r2, [pc, #116]	; (8008254 <xPortStartScheduler+0x134>)
 80081e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80081e2:	4b1c      	ldr	r3, [pc, #112]	; (8008254 <xPortStartScheduler+0x134>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081ea:	4a1a      	ldr	r2, [pc, #104]	; (8008254 <xPortStartScheduler+0x134>)
 80081ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	b2da      	uxtb	r2, r3
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80081f6:	4b18      	ldr	r3, [pc, #96]	; (8008258 <xPortStartScheduler+0x138>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a17      	ldr	r2, [pc, #92]	; (8008258 <xPortStartScheduler+0x138>)
 80081fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008200:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008202:	4b15      	ldr	r3, [pc, #84]	; (8008258 <xPortStartScheduler+0x138>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a14      	ldr	r2, [pc, #80]	; (8008258 <xPortStartScheduler+0x138>)
 8008208:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800820c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800820e:	f000 f8dd 	bl	80083cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008212:	4b12      	ldr	r3, [pc, #72]	; (800825c <xPortStartScheduler+0x13c>)
 8008214:	2200      	movs	r2, #0
 8008216:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008218:	f000 f8fc 	bl	8008414 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800821c:	4b10      	ldr	r3, [pc, #64]	; (8008260 <xPortStartScheduler+0x140>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a0f      	ldr	r2, [pc, #60]	; (8008260 <xPortStartScheduler+0x140>)
 8008222:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008226:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008228:	f7ff ff66 	bl	80080f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800822c:	f7fe fe98 	bl	8006f60 <vTaskSwitchContext>
	prvTaskExitError();
 8008230:	f7ff ff1c 	bl	800806c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3718      	adds	r7, #24
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	e000ed00 	.word	0xe000ed00
 8008244:	410fc271 	.word	0x410fc271
 8008248:	410fc270 	.word	0x410fc270
 800824c:	e000e400 	.word	0xe000e400
 8008250:	20000e54 	.word	0x20000e54
 8008254:	20000e58 	.word	0x20000e58
 8008258:	e000ed20 	.word	0xe000ed20
 800825c:	2000000c 	.word	0x2000000c
 8008260:	e000ef34 	.word	0xe000ef34

08008264 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
	__asm volatile
 800826a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826e:	f383 8811 	msr	BASEPRI, r3
 8008272:	f3bf 8f6f 	isb	sy
 8008276:	f3bf 8f4f 	dsb	sy
 800827a:	607b      	str	r3, [r7, #4]
}
 800827c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800827e:	4b0f      	ldr	r3, [pc, #60]	; (80082bc <vPortEnterCritical+0x58>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	3301      	adds	r3, #1
 8008284:	4a0d      	ldr	r2, [pc, #52]	; (80082bc <vPortEnterCritical+0x58>)
 8008286:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008288:	4b0c      	ldr	r3, [pc, #48]	; (80082bc <vPortEnterCritical+0x58>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2b01      	cmp	r3, #1
 800828e:	d10f      	bne.n	80082b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008290:	4b0b      	ldr	r3, [pc, #44]	; (80082c0 <vPortEnterCritical+0x5c>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00a      	beq.n	80082b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	603b      	str	r3, [r7, #0]
}
 80082ac:	bf00      	nop
 80082ae:	e7fe      	b.n	80082ae <vPortEnterCritical+0x4a>
	}
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	2000000c 	.word	0x2000000c
 80082c0:	e000ed04 	.word	0xe000ed04

080082c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80082ca:	4b12      	ldr	r3, [pc, #72]	; (8008314 <vPortExitCritical+0x50>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10a      	bne.n	80082e8 <vPortExitCritical+0x24>
	__asm volatile
 80082d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d6:	f383 8811 	msr	BASEPRI, r3
 80082da:	f3bf 8f6f 	isb	sy
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	607b      	str	r3, [r7, #4]
}
 80082e4:	bf00      	nop
 80082e6:	e7fe      	b.n	80082e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80082e8:	4b0a      	ldr	r3, [pc, #40]	; (8008314 <vPortExitCritical+0x50>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	3b01      	subs	r3, #1
 80082ee:	4a09      	ldr	r2, [pc, #36]	; (8008314 <vPortExitCritical+0x50>)
 80082f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80082f2:	4b08      	ldr	r3, [pc, #32]	; (8008314 <vPortExitCritical+0x50>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d105      	bne.n	8008306 <vPortExitCritical+0x42>
 80082fa:	2300      	movs	r3, #0
 80082fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	f383 8811 	msr	BASEPRI, r3
}
 8008304:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008306:	bf00      	nop
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	2000000c 	.word	0x2000000c
	...

08008320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008320:	f3ef 8009 	mrs	r0, PSP
 8008324:	f3bf 8f6f 	isb	sy
 8008328:	4b15      	ldr	r3, [pc, #84]	; (8008380 <pxCurrentTCBConst>)
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	f01e 0f10 	tst.w	lr, #16
 8008330:	bf08      	it	eq
 8008332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800833a:	6010      	str	r0, [r2, #0]
 800833c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008340:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008344:	f380 8811 	msr	BASEPRI, r0
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f7fe fe06 	bl	8006f60 <vTaskSwitchContext>
 8008354:	f04f 0000 	mov.w	r0, #0
 8008358:	f380 8811 	msr	BASEPRI, r0
 800835c:	bc09      	pop	{r0, r3}
 800835e:	6819      	ldr	r1, [r3, #0]
 8008360:	6808      	ldr	r0, [r1, #0]
 8008362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008366:	f01e 0f10 	tst.w	lr, #16
 800836a:	bf08      	it	eq
 800836c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008370:	f380 8809 	msr	PSP, r0
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	f3af 8000 	nop.w

08008380 <pxCurrentTCBConst>:
 8008380:	20000828 	.word	0x20000828
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008384:	bf00      	nop
 8008386:	bf00      	nop

08008388 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
	__asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	607b      	str	r3, [r7, #4]
}
 80083a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083a2:	f7fe fd23 	bl	8006dec <xTaskIncrementTick>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d003      	beq.n	80083b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083ac:	4b06      	ldr	r3, [pc, #24]	; (80083c8 <xPortSysTickHandler+0x40>)
 80083ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083b2:	601a      	str	r2, [r3, #0]
 80083b4:	2300      	movs	r3, #0
 80083b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	f383 8811 	msr	BASEPRI, r3
}
 80083be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80083c0:	bf00      	nop
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	e000ed04 	.word	0xe000ed04

080083cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80083cc:	b480      	push	{r7}
 80083ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80083d0:	4b0b      	ldr	r3, [pc, #44]	; (8008400 <vPortSetupTimerInterrupt+0x34>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80083d6:	4b0b      	ldr	r3, [pc, #44]	; (8008404 <vPortSetupTimerInterrupt+0x38>)
 80083d8:	2200      	movs	r2, #0
 80083da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083dc:	4b0a      	ldr	r3, [pc, #40]	; (8008408 <vPortSetupTimerInterrupt+0x3c>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a0a      	ldr	r2, [pc, #40]	; (800840c <vPortSetupTimerInterrupt+0x40>)
 80083e2:	fba2 2303 	umull	r2, r3, r2, r3
 80083e6:	099b      	lsrs	r3, r3, #6
 80083e8:	4a09      	ldr	r2, [pc, #36]	; (8008410 <vPortSetupTimerInterrupt+0x44>)
 80083ea:	3b01      	subs	r3, #1
 80083ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083ee:	4b04      	ldr	r3, [pc, #16]	; (8008400 <vPortSetupTimerInterrupt+0x34>)
 80083f0:	2207      	movs	r2, #7
 80083f2:	601a      	str	r2, [r3, #0]
}
 80083f4:	bf00      	nop
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	e000e010 	.word	0xe000e010
 8008404:	e000e018 	.word	0xe000e018
 8008408:	20000000 	.word	0x20000000
 800840c:	10624dd3 	.word	0x10624dd3
 8008410:	e000e014 	.word	0xe000e014

08008414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008414:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008424 <vPortEnableVFP+0x10>
 8008418:	6801      	ldr	r1, [r0, #0]
 800841a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800841e:	6001      	str	r1, [r0, #0]
 8008420:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008422:	bf00      	nop
 8008424:	e000ed88 	.word	0xe000ed88

08008428 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800842e:	f3ef 8305 	mrs	r3, IPSR
 8008432:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2b0f      	cmp	r3, #15
 8008438:	d914      	bls.n	8008464 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800843a:	4a17      	ldr	r2, [pc, #92]	; (8008498 <vPortValidateInterruptPriority+0x70>)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	4413      	add	r3, r2
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008444:	4b15      	ldr	r3, [pc, #84]	; (800849c <vPortValidateInterruptPriority+0x74>)
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	7afa      	ldrb	r2, [r7, #11]
 800844a:	429a      	cmp	r2, r3
 800844c:	d20a      	bcs.n	8008464 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	607b      	str	r3, [r7, #4]
}
 8008460:	bf00      	nop
 8008462:	e7fe      	b.n	8008462 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008464:	4b0e      	ldr	r3, [pc, #56]	; (80084a0 <vPortValidateInterruptPriority+0x78>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800846c:	4b0d      	ldr	r3, [pc, #52]	; (80084a4 <vPortValidateInterruptPriority+0x7c>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	429a      	cmp	r2, r3
 8008472:	d90a      	bls.n	800848a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	603b      	str	r3, [r7, #0]
}
 8008486:	bf00      	nop
 8008488:	e7fe      	b.n	8008488 <vPortValidateInterruptPriority+0x60>
	}
 800848a:	bf00      	nop
 800848c:	3714      	adds	r7, #20
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	e000e3f0 	.word	0xe000e3f0
 800849c:	20000e54 	.word	0x20000e54
 80084a0:	e000ed0c 	.word	0xe000ed0c
 80084a4:	20000e58 	.word	0x20000e58

080084a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b08a      	sub	sp, #40	; 0x28
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084b0:	2300      	movs	r3, #0
 80084b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80084b4:	f7fe fbde 	bl	8006c74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80084b8:	4b5b      	ldr	r3, [pc, #364]	; (8008628 <pvPortMalloc+0x180>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d101      	bne.n	80084c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80084c0:	f000 f920 	bl	8008704 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084c4:	4b59      	ldr	r3, [pc, #356]	; (800862c <pvPortMalloc+0x184>)
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4013      	ands	r3, r2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f040 8093 	bne.w	80085f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d01d      	beq.n	8008514 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80084d8:	2208      	movs	r2, #8
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4413      	add	r3, r2
 80084de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f003 0307 	and.w	r3, r3, #7
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d014      	beq.n	8008514 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f023 0307 	bic.w	r3, r3, #7
 80084f0:	3308      	adds	r3, #8
 80084f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f003 0307 	and.w	r3, r3, #7
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00a      	beq.n	8008514 <pvPortMalloc+0x6c>
	__asm volatile
 80084fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	617b      	str	r3, [r7, #20]
}
 8008510:	bf00      	nop
 8008512:	e7fe      	b.n	8008512 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d06e      	beq.n	80085f8 <pvPortMalloc+0x150>
 800851a:	4b45      	ldr	r3, [pc, #276]	; (8008630 <pvPortMalloc+0x188>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	429a      	cmp	r2, r3
 8008522:	d869      	bhi.n	80085f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008524:	4b43      	ldr	r3, [pc, #268]	; (8008634 <pvPortMalloc+0x18c>)
 8008526:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008528:	4b42      	ldr	r3, [pc, #264]	; (8008634 <pvPortMalloc+0x18c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800852e:	e004      	b.n	800853a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	429a      	cmp	r2, r3
 8008542:	d903      	bls.n	800854c <pvPortMalloc+0xa4>
 8008544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1f1      	bne.n	8008530 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800854c:	4b36      	ldr	r3, [pc, #216]	; (8008628 <pvPortMalloc+0x180>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008552:	429a      	cmp	r2, r3
 8008554:	d050      	beq.n	80085f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008556:	6a3b      	ldr	r3, [r7, #32]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2208      	movs	r2, #8
 800855c:	4413      	add	r3, r2
 800855e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	6a3b      	ldr	r3, [r7, #32]
 8008566:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	1ad2      	subs	r2, r2, r3
 8008570:	2308      	movs	r3, #8
 8008572:	005b      	lsls	r3, r3, #1
 8008574:	429a      	cmp	r2, r3
 8008576:	d91f      	bls.n	80085b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4413      	add	r3, r2
 800857e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	f003 0307 	and.w	r3, r3, #7
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00a      	beq.n	80085a0 <pvPortMalloc+0xf8>
	__asm volatile
 800858a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858e:	f383 8811 	msr	BASEPRI, r3
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	f3bf 8f4f 	dsb	sy
 800859a:	613b      	str	r3, [r7, #16]
}
 800859c:	bf00      	nop
 800859e:	e7fe      	b.n	800859e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	1ad2      	subs	r2, r2, r3
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085b2:	69b8      	ldr	r0, [r7, #24]
 80085b4:	f000 f908 	bl	80087c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085b8:	4b1d      	ldr	r3, [pc, #116]	; (8008630 <pvPortMalloc+0x188>)
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	4a1b      	ldr	r2, [pc, #108]	; (8008630 <pvPortMalloc+0x188>)
 80085c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085c6:	4b1a      	ldr	r3, [pc, #104]	; (8008630 <pvPortMalloc+0x188>)
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	4b1b      	ldr	r3, [pc, #108]	; (8008638 <pvPortMalloc+0x190>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d203      	bcs.n	80085da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085d2:	4b17      	ldr	r3, [pc, #92]	; (8008630 <pvPortMalloc+0x188>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a18      	ldr	r2, [pc, #96]	; (8008638 <pvPortMalloc+0x190>)
 80085d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	685a      	ldr	r2, [r3, #4]
 80085de:	4b13      	ldr	r3, [pc, #76]	; (800862c <pvPortMalloc+0x184>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	431a      	orrs	r2, r3
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	2200      	movs	r2, #0
 80085ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80085ee:	4b13      	ldr	r3, [pc, #76]	; (800863c <pvPortMalloc+0x194>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	3301      	adds	r3, #1
 80085f4:	4a11      	ldr	r2, [pc, #68]	; (800863c <pvPortMalloc+0x194>)
 80085f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80085f8:	f7fe fb4a 	bl	8006c90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	f003 0307 	and.w	r3, r3, #7
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00a      	beq.n	800861c <pvPortMalloc+0x174>
	__asm volatile
 8008606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860a:	f383 8811 	msr	BASEPRI, r3
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	f3bf 8f4f 	dsb	sy
 8008616:	60fb      	str	r3, [r7, #12]
}
 8008618:	bf00      	nop
 800861a:	e7fe      	b.n	800861a <pvPortMalloc+0x172>
	return pvReturn;
 800861c:	69fb      	ldr	r3, [r7, #28]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3728      	adds	r7, #40	; 0x28
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	20004a64 	.word	0x20004a64
 800862c:	20004a78 	.word	0x20004a78
 8008630:	20004a68 	.word	0x20004a68
 8008634:	20004a5c 	.word	0x20004a5c
 8008638:	20004a6c 	.word	0x20004a6c
 800863c:	20004a70 	.word	0x20004a70

08008640 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d04d      	beq.n	80086ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008652:	2308      	movs	r3, #8
 8008654:	425b      	negs	r3, r3
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	4413      	add	r3, r2
 800865a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	685a      	ldr	r2, [r3, #4]
 8008664:	4b24      	ldr	r3, [pc, #144]	; (80086f8 <vPortFree+0xb8>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4013      	ands	r3, r2
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10a      	bne.n	8008684 <vPortFree+0x44>
	__asm volatile
 800866e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	60fb      	str	r3, [r7, #12]
}
 8008680:	bf00      	nop
 8008682:	e7fe      	b.n	8008682 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00a      	beq.n	80086a2 <vPortFree+0x62>
	__asm volatile
 800868c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008690:	f383 8811 	msr	BASEPRI, r3
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	60bb      	str	r3, [r7, #8]
}
 800869e:	bf00      	nop
 80086a0:	e7fe      	b.n	80086a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	685a      	ldr	r2, [r3, #4]
 80086a6:	4b14      	ldr	r3, [pc, #80]	; (80086f8 <vPortFree+0xb8>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4013      	ands	r3, r2
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d01e      	beq.n	80086ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d11a      	bne.n	80086ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	4b0e      	ldr	r3, [pc, #56]	; (80086f8 <vPortFree+0xb8>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	43db      	mvns	r3, r3
 80086c2:	401a      	ands	r2, r3
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086c8:	f7fe fad4 	bl	8006c74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	685a      	ldr	r2, [r3, #4]
 80086d0:	4b0a      	ldr	r3, [pc, #40]	; (80086fc <vPortFree+0xbc>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4413      	add	r3, r2
 80086d6:	4a09      	ldr	r2, [pc, #36]	; (80086fc <vPortFree+0xbc>)
 80086d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086da:	6938      	ldr	r0, [r7, #16]
 80086dc:	f000 f874 	bl	80087c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80086e0:	4b07      	ldr	r3, [pc, #28]	; (8008700 <vPortFree+0xc0>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	3301      	adds	r3, #1
 80086e6:	4a06      	ldr	r2, [pc, #24]	; (8008700 <vPortFree+0xc0>)
 80086e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80086ea:	f7fe fad1 	bl	8006c90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80086ee:	bf00      	nop
 80086f0:	3718      	adds	r7, #24
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	20004a78 	.word	0x20004a78
 80086fc:	20004a68 	.word	0x20004a68
 8008700:	20004a74 	.word	0x20004a74

08008704 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800870a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800870e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008710:	4b27      	ldr	r3, [pc, #156]	; (80087b0 <prvHeapInit+0xac>)
 8008712:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f003 0307 	and.w	r3, r3, #7
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00c      	beq.n	8008738 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	3307      	adds	r3, #7
 8008722:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f023 0307 	bic.w	r3, r3, #7
 800872a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800872c:	68ba      	ldr	r2, [r7, #8]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	4a1f      	ldr	r2, [pc, #124]	; (80087b0 <prvHeapInit+0xac>)
 8008734:	4413      	add	r3, r2
 8008736:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800873c:	4a1d      	ldr	r2, [pc, #116]	; (80087b4 <prvHeapInit+0xb0>)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008742:	4b1c      	ldr	r3, [pc, #112]	; (80087b4 <prvHeapInit+0xb0>)
 8008744:	2200      	movs	r2, #0
 8008746:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	4413      	add	r3, r2
 800874e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008750:	2208      	movs	r2, #8
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	1a9b      	subs	r3, r3, r2
 8008756:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f023 0307 	bic.w	r3, r3, #7
 800875e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	4a15      	ldr	r2, [pc, #84]	; (80087b8 <prvHeapInit+0xb4>)
 8008764:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008766:	4b14      	ldr	r3, [pc, #80]	; (80087b8 <prvHeapInit+0xb4>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2200      	movs	r2, #0
 800876c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800876e:	4b12      	ldr	r3, [pc, #72]	; (80087b8 <prvHeapInit+0xb4>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2200      	movs	r2, #0
 8008774:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	1ad2      	subs	r2, r2, r3
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008784:	4b0c      	ldr	r3, [pc, #48]	; (80087b8 <prvHeapInit+0xb4>)
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	4a0a      	ldr	r2, [pc, #40]	; (80087bc <prvHeapInit+0xb8>)
 8008792:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	4a09      	ldr	r2, [pc, #36]	; (80087c0 <prvHeapInit+0xbc>)
 800879a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800879c:	4b09      	ldr	r3, [pc, #36]	; (80087c4 <prvHeapInit+0xc0>)
 800879e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80087a2:	601a      	str	r2, [r3, #0]
}
 80087a4:	bf00      	nop
 80087a6:	3714      	adds	r7, #20
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr
 80087b0:	20000e5c 	.word	0x20000e5c
 80087b4:	20004a5c 	.word	0x20004a5c
 80087b8:	20004a64 	.word	0x20004a64
 80087bc:	20004a6c 	.word	0x20004a6c
 80087c0:	20004a68 	.word	0x20004a68
 80087c4:	20004a78 	.word	0x20004a78

080087c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087d0:	4b28      	ldr	r3, [pc, #160]	; (8008874 <prvInsertBlockIntoFreeList+0xac>)
 80087d2:	60fb      	str	r3, [r7, #12]
 80087d4:	e002      	b.n	80087dc <prvInsertBlockIntoFreeList+0x14>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	60fb      	str	r3, [r7, #12]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d8f7      	bhi.n	80087d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	4413      	add	r3, r2
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d108      	bne.n	800880a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	685a      	ldr	r2, [r3, #4]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	441a      	add	r2, r3
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	441a      	add	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	429a      	cmp	r2, r3
 800881c:	d118      	bne.n	8008850 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	4b15      	ldr	r3, [pc, #84]	; (8008878 <prvInsertBlockIntoFreeList+0xb0>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	429a      	cmp	r2, r3
 8008828:	d00d      	beq.n	8008846 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	685a      	ldr	r2, [r3, #4]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	441a      	add	r2, r3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	e008      	b.n	8008858 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008846:	4b0c      	ldr	r3, [pc, #48]	; (8008878 <prvInsertBlockIntoFreeList+0xb0>)
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	e003      	b.n	8008858 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	429a      	cmp	r2, r3
 800885e:	d002      	beq.n	8008866 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008866:	bf00      	nop
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	20004a5c 	.word	0x20004a5c
 8008878:	20004a64 	.word	0x20004a64

0800887c <memset>:
 800887c:	4402      	add	r2, r0
 800887e:	4603      	mov	r3, r0
 8008880:	4293      	cmp	r3, r2
 8008882:	d100      	bne.n	8008886 <memset+0xa>
 8008884:	4770      	bx	lr
 8008886:	f803 1b01 	strb.w	r1, [r3], #1
 800888a:	e7f9      	b.n	8008880 <memset+0x4>

0800888c <__libc_init_array>:
 800888c:	b570      	push	{r4, r5, r6, lr}
 800888e:	4d0d      	ldr	r5, [pc, #52]	; (80088c4 <__libc_init_array+0x38>)
 8008890:	4c0d      	ldr	r4, [pc, #52]	; (80088c8 <__libc_init_array+0x3c>)
 8008892:	1b64      	subs	r4, r4, r5
 8008894:	10a4      	asrs	r4, r4, #2
 8008896:	2600      	movs	r6, #0
 8008898:	42a6      	cmp	r6, r4
 800889a:	d109      	bne.n	80088b0 <__libc_init_array+0x24>
 800889c:	4d0b      	ldr	r5, [pc, #44]	; (80088cc <__libc_init_array+0x40>)
 800889e:	4c0c      	ldr	r4, [pc, #48]	; (80088d0 <__libc_init_array+0x44>)
 80088a0:	f000 f826 	bl	80088f0 <_init>
 80088a4:	1b64      	subs	r4, r4, r5
 80088a6:	10a4      	asrs	r4, r4, #2
 80088a8:	2600      	movs	r6, #0
 80088aa:	42a6      	cmp	r6, r4
 80088ac:	d105      	bne.n	80088ba <__libc_init_array+0x2e>
 80088ae:	bd70      	pop	{r4, r5, r6, pc}
 80088b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80088b4:	4798      	blx	r3
 80088b6:	3601      	adds	r6, #1
 80088b8:	e7ee      	b.n	8008898 <__libc_init_array+0xc>
 80088ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80088be:	4798      	blx	r3
 80088c0:	3601      	adds	r6, #1
 80088c2:	e7f2      	b.n	80088aa <__libc_init_array+0x1e>
 80088c4:	08008a18 	.word	0x08008a18
 80088c8:	08008a18 	.word	0x08008a18
 80088cc:	08008a18 	.word	0x08008a18
 80088d0:	08008a1c 	.word	0x08008a1c

080088d4 <memcpy>:
 80088d4:	440a      	add	r2, r1
 80088d6:	4291      	cmp	r1, r2
 80088d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80088dc:	d100      	bne.n	80088e0 <memcpy+0xc>
 80088de:	4770      	bx	lr
 80088e0:	b510      	push	{r4, lr}
 80088e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088ea:	4291      	cmp	r1, r2
 80088ec:	d1f9      	bne.n	80088e2 <memcpy+0xe>
 80088ee:	bd10      	pop	{r4, pc}

080088f0 <_init>:
 80088f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f2:	bf00      	nop
 80088f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088f6:	bc08      	pop	{r3}
 80088f8:	469e      	mov	lr, r3
 80088fa:	4770      	bx	lr

080088fc <_fini>:
 80088fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fe:	bf00      	nop
 8008900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008902:	bc08      	pop	{r3}
 8008904:	469e      	mov	lr, r3
 8008906:	4770      	bx	lr
